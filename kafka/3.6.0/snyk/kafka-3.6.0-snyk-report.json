{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/javabeanz/owasp-security-logging/commit/477ecf68f3102f309f3ec9af01ab852294cbd826?diff=split#diff-c14e8b3d208e6acad1c0ca88a8a8227e4140088dfe2206349680aec0558df5cbL-1",
                    "lines": [
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/HttpSessionReplacer/commit/2446e990415bc285fed740539c4f131708c56a3c?diff=split#diff-c03b1a2951c34501ec780ec5f5e146284be8a5f93d21ace8abcb1a54d43dd5d2L-1",
                    "lines": [
                      {
                        "line": "MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest sha = MessageDigest.getInstance(\"SHA-256\");\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/codeka/wwmmo/commit/31c54b90cae6bc6dafa4aa2b2e8206fc2324dfbe?diff=split#diff-bf17bd3165b8e75a0bfb95f42138140d5befba995b54eff50f4389f0e47a0feeL-1",
                    "lines": [
                      {
                        "line": "Hashing.sha1().hashString(etag, Charset.defaultCharset()).asBytes());\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Hashing.sha256().hashString(etag, Charset.defaultCharset()).asBytes());\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "scala/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "scala",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket/test",
              "name": "UsageOfUnencryptedSocket/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "UsageOfUnencryptedSocket",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/SmartBear/soapui/commit/98ce7aeaac98963795d4ebf22f673b64032fe572?diff=split#diff-c6679790ed47144c981b0f64cf5abe08d625880b9a6eb64cf9f6373a2ab84c83L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocket;\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.servlet.ServletException;\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Request;\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Response;\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.util.IO;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class Server extends org.mortbay.jetty.Server\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic void handle(final org.mortbay.jetty.HttpConnection connection) throws IOException, ServletException\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t{\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Request request = connection.getRequest();\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif (!request.getMethod().equals(\"CONNECT\"))\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t{\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tsuper.handle(connection);\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String uri = request.getUri().toString();\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal int c = uri.indexOf(':');\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String port = uri.substring(c + 1);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String host = uri.substring(0, c);\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InetSocketAddress inetAddress = new InetSocketAddress(host, Integer.parseInt(port));\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket clientSocket = connection.getEndPoint().getTransport() instanceof Socket ? (Socket) connection\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t.getEndPoint().getTransport() : ((SocketChannel) connection.getEndPoint().getTransport()).socket();\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InputStream in = clientSocket.getInputStream();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal OutputStream out = clientSocket.getOutputStream();\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket socket = new Socket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfinal SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Response response = connection.getResponse();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.setStatus(200);\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "//\t\tresponse.setHeader(\"Connection\", \"close\");\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.flushBuffer();\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tIO.copyThread(socket.getInputStream(), out);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketOut = socket.getOutputStream();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/NonCryptoHardcodedSecret/test",
              "name": "NonCryptoHardcodedSecret/test",
              "shortDescription": {
                "text": "Use of Hardcoded, Security-relevant Constants"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n* Never hard code security-related constants; use symbolic names or configuration lookup files.\n* As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n* Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "NonCryptoHardcodedSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tulaoda/shandianpaopao/commit/1e2ffaffdc5e1f20d89268237c9e6a741644528d?diff=split#diff-0acf6bcafe86b10f2d48f5702ba55f8587dd4c1e5c6724786b99bd056425a127L-1",
                    "lines": [
                      {
                        "line": "String wxspAppid = \"wxc4c6ab37b0d79d8b\";\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String wxspAppid = Constant.APP_ID;\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "//小程序的 app secret (在微信小程序管理后台获取)\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "String wxspSecret = \"6ede70b3af433549cb921077a531ae18\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String wxspSecret = Constant.APP_SECRET;\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/codeka/weather/commit/993ad273e475d16df1029bfd5c9a42e80bfdf3e4?diff=split#diff-ef1202ca8d5c5972373553ba53d84a5e7d32e637652a3cb2b1b602bd072e842dL-1",
                    "lines": [
                      {
                        "line": "private static final String API_KEY = \"094ceebb0893481d\";\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static final String API_KEY = BuildConfig.WUNDERGROUND_API_KEY;\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/longfeizheng/security-oauth2/commit/5b8659a33e42db71d916d2239116f58658aa7d5f?diff=split#diff-bd9bc7dcdbd3e9e2ee70d524baf89883cd6f7f360255aab53dad8c52c30170dcL-1",
                    "lines": [
                      {
                        "line": "Claims claims = Jwts.parser().setSigningKey(\"merryyou\".getBytes(\"UTF-8\")).parseClaimsJws(token).getBody();\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Claims claims = Jwts.parser().setSigningKey(oAuth2Properties.getJwtSigningKey().getBytes(\"UTF-8\")).parseClaimsJws(token).getBody();\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 52,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "scala/UsageOfUnencryptedSocket/test",
              "name": "UsageOfUnencryptedSocket/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "scala",
                  "UsageOfUnencryptedSocket",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/HardcodedSecret/test",
              "name": "HardcodedSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "HardcodedSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/aberic/fabric-net-server/commit/963bb9fe026b454672fb83fd739f3d754b6844e1?diff=split#diff-9d304ac28cc0feb031d1bde8598ac8de9156b18f56406259c258d9620615fe8dL-1",
                    "lines": [
                      {
                        "line": "app.setPublicKey(\"pub1\");\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.setPrivateKey(\"pri1\");\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Key key = Utils.obtain().createECCDSAKeyPair(keyPath);\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (null == key) {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0;\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.setPublicKey(key.getPublicKey());\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.setPrivateKey(key.getPrivateKey());\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Talend/tcommon-studio-se/commit/d95d058e7560d27ad58d43cf7d0be4731582230c?diff=split#diff-49b91a9d900560ad716dc4cb80065066261a7c13294cf8be280afc4c5125f69eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            byte rawKeyData[] = RAWKEY.getBytes();\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            byte rawKeyData[] = StudioEncryption.getKeySource(StudioEncryption.EncryptionKeyName.MIGRATION.name(), false)\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "                    .getKey();\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "            DESKeySpec dks = new DESKeySpec(rawKeyData);\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bulktrade/SMSC/commit/a28a9bf2a975e27ad7ccecce47588fe1a57659f3?diff=split#diff-d61a5e31effad4932c402c2638bba72d6d72eda975f375bf21ce055846a911d9L-1",
                    "lines": [
                      {
                        "line": "Key key = new SecretKeySpec(KEY, \"AES\");\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Key key = new SecretKeySpec(secretKey.getBytes(), \"AES\");\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 26,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/HardcodedSecret",
              "name": "HardcodedSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "HardcodedSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/aberic/fabric-net-server/commit/963bb9fe026b454672fb83fd739f3d754b6844e1?diff=split#diff-9d304ac28cc0feb031d1bde8598ac8de9156b18f56406259c258d9620615fe8dL-1",
                    "lines": [
                      {
                        "line": "app.setPublicKey(\"pub1\");\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.setPrivateKey(\"pri1\");\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Key key = Utils.obtain().createECCDSAKeyPair(keyPath);\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (null == key) {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 0;\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.setPublicKey(key.getPublicKey());\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.setPrivateKey(key.getPrivateKey());\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Talend/tcommon-studio-se/commit/d95d058e7560d27ad58d43cf7d0be4731582230c?diff=split#diff-49b91a9d900560ad716dc4cb80065066261a7c13294cf8be280afc4c5125f69eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            byte rawKeyData[] = RAWKEY.getBytes();\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            byte rawKeyData[] = StudioEncryption.getKeySource(StudioEncryption.EncryptionKeyName.MIGRATION.name(), false)\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "                    .getKey();\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "            DESKeySpec dks = new DESKeySpec(rawKeyData);\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bulktrade/SMSC/commit/a28a9bf2a975e27ad7ccecce47588fe1a57659f3?diff=split#diff-d61a5e31effad4932c402c2638bba72d6d72eda975f375bf21ce055846a911d9L-1",
                    "lines": [
                      {
                        "line": "Key key = new SecretKeySpec(KEY, \"AES\");\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Key key = new SecretKeySpec(secretKey.getBytes(), \"AES\");\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 26,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Gepardec/Hogarama/commit/7b532d9240eb2e7a059539e419ea218c22a5b0f5?diff=split#diff-db19dfe0e7a0c625c6e48b0d94c04add219239f2f63cf6f2674dd962e92e8ff2L-1",
                    "lines": [
                      {
                        "line": "\tprivate static final char[] PASSWORD = \"hogajama@mongodb\".toCharArray();\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tprivate static final char[] PASSWORD = System.getProperty(\"MONGODB_PW\").toCharArray();\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tprivate static final int PORT = 27017;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String COLLECTION = \"habarama\";\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String HOST = System.getProperty(\"mongo.host\", \"mongodb\");\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Produces \n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic Datastore datastore() {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoClient mongoClient = getClient();\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMorphia morphia = new Morphia();\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmorphia.mapPackage(\"com.gepardec.hogarama.domain\");\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tDatastore datastore = morphia.createDatastore(mongoClient, MongoDbProducer.HOGAJAMA_DB);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdatastore.ensureIndexes();\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn datastore;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Produces \n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic DBCollection collection() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoClient mongoClient = getClient();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tDB db = mongoClient.getDB(HOGAJAMA_DB);\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn db.getCollection(COLLECTION);\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate MongoClient getClient() {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoCredential credential = MongoCredential.createCredential(USER, HOGAJAMA_DB, PASSWORD);\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/xfifix/SEO_REPO/commit/4807500fee6a392ed64f66bc4dfe38d103bdb64e?diff=split#diff-9873c5adc0806eb5d51fdefea3f0460c6fc28b67d21ce7380f6c9cd52770b250L-1",
                    "lines": [
                      {
                        "line": "\t\t//\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\t\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url=\"jdbc:postgresql://localhost/KEYWORDSDB\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString user=\"postgres\";\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString passwd=\"mogette\";\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// Instantiating the database\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tConnection con = null;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPreparedStatement pst = null;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// the csv file variables\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tResultSet rs = null;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcon = DriverManager.getConnection(url, user, passwd);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/xfifix/SEO_REPO/commit/4807500fee6a392ed64f66bc4dfe38d103bdb64e?diff=split#diff-a3dca6ec48a4147bea68835a9da60df6ca08a8bff0c47e1eff8ce86c6a1c601fL-1",
                    "lines": [
                      {
                        "line": "//\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\t\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url=\"jdbc:postgresql://localhost/KEYWORDSDB\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString user=\"postgres\";\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString passwd=\"mogette\";\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// Instantiating the database\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tConnection con = null;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPreparedStatement pst = null;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// the csv file variables\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tResultSet rs = null;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcon = DriverManager.getConnection(url, user, passwd);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 65,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "scala/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "scala",
                  "HardcodedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "java/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/InsecureSecret",
              "name": "InsecureSecret",
              "shortDescription": {
                "text": "Use of Insufficiently Random Values"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nComputer security relies on random numbers for many things: generating secure, confidential session keys; hashing password data; encryption for transmitting sensitive data, and more. It's easy to understand why. If session keys, for example, were generated sequentially, attackers would be able to guess these easily and then hijack legitimate user sessions. Similarly, if encryption techniques used easy-to-guess numbers, attackers could use brute-force attacks to gain unauthorized access.\n\nIn reality, since computers cannot generate truly random numbers, they use \"pseudorandom\" numbers instead, generated using an algorithm that is \"seeded\" in a variety of ways to produce highly variable values in a random-seeming order, making them very hard-in theory-for attackers to guess. However, if developers inadvertently make use of a weak random algorithm, attackers may be able to discover the algorithm, seed, or pattern, ultimately unlocking access to commands or sensitive data, which can then be held for ransom or sold.\n\n## Best practices for prevention\n* Avoid using weak pseudorandom number generators (PRNGs), such as statistical PRNGs. Instead, choose a cryptographically secure PRNG.\n* Avoid using predictable seed values, such as user ID or server start time. Instead, use a seed that is itself pseudorandom, such as one taken from an external hardware source.\n* Use standard, accepted security algorithms and libraries rather than taking a DIY approach and creating custom code that may contain inherent weaknesses or overlook critical flaws.\n* Use static analysis tools to identify potential instances of this weakness in code and then ensure good test coverage with appropriate white-box testing.\n* Educate developers about the importance of entropy in security systems development, and consider adopting tools that are FIPS 140-2 compliant.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "InsecureSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/adrian/upm-swing/commit/e27b794a3ac1a4e25a8f03b436f4e72430cce57b?diff=split#diff-a692680a02fef754cebcdb780e87d9f352c7626e8a5331b2325b6650c130db49L-1",
                    "lines": [
                      {
                        "line": "import java.util.Random;\r\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import java.security.SecureRandom;\r\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.crypto.IllegalBlockSizeException;\r\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.BadPaddingException;\r\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.File;\r\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\r\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class EncryptionService {\r\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate Cipher encryptionCipher; \r\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate Cipher decryptionCipher;\r\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate byte[] salt;\r\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic static final int SALT_LENGTH = 8;\r\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t//Would prefer if I could use AES or Twofish here. Sun doesn't \r\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t//distribute one with their JRE. Might want to look into\r\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t//http://www.bouncycastle.org\r\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String algorithm = \"PBEWithMD5AndDES\";\r\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String randomAlgorithm = \"SHA1PRNG\";\r\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\r\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic EncryptionService(char[] password) throws GeneralSecurityException {\r\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    //Generate a random salt\r\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    Random saltGen = new Random();\r\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t    SecureRandom saltGen = SecureRandom.getInstance(randomAlgorithm);\r\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t    byte pSalt[] = new byte[SALT_LENGTH];\r\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    saltGen.nextBytes(pSalt);\r\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    init(password, pSalt);\r\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\r\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\r\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\r\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic EncryptionService(char[] password, byte[] salt) throws GeneralSecurityException {\r\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tinit(password, salt);\r\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\r\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\r\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\r\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate void init(char[] password, byte[] salt) throws GeneralSecurityException {\r\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\r\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPBEKeySpec pbeKeySpec;\r\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    PBEParameterSpec pbeParamSpec;\r\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    SecretKeyFactory keyFac;\r\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    this.salt = salt;\r\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    int count = 20;\r\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\r\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t    pbeParamSpec = new PBEParameterSpec(salt, count);\r\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aionnetwork/aion/commit/8ac04002e9bfc2ba8b92d54c84de0e5a0d9e350e?diff=split#diff-d4db3a6f0259d35df8a64b12b3c2673f91141cee954057a802a61e5806e300d5L-1",
                    "lines": [
                      {
                        "line": "import java.security.GeneralSecurityException;\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import java.security.InvalidAlgorithmParameterException;\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import java.security.InvalidKeyException;\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import java.security.NoSuchAlgorithmException;\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import java.security.*;\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Random;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.UUID;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.BadPaddingException;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.Cipher;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.IllegalBlockSizeException;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.NoSuchPaddingException;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.SecretKeyFactory;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.spec.IvParameterSpec;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.spec.PBEKeySpec;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.crypto.spec.SecretKeySpec;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.aion.crypto.ECKey;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.aion.crypto.ECKeyFac;\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.aion.crypto.HashUtil;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.spongycastle.crypto.generators.SCrypt;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.spongycastle.util.encoders.Hex;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": " *  keystore format class\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class KeystoreFormat {\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public byte[] toKeystore(final ECKey key, String password) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // n,r,p = 2^18, 8, 1 uses 256MB memory and approx 1s CPU time on a\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // modern CPU.\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // final int ScryptN = ((Double) Math.pow(10.0, 18.0)).intValue();\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int ScryptN = 262144;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int ScryptR = 8;\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int ScryptP = 1;\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int ScryptDklen = 32;\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // salt\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] salt = generateRandomBytes(32);\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] derivedKey = scrypt(password.getBytes(), salt, ScryptN, ScryptR, ScryptP, ScryptDklen);\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // 128-bit initialisation vector for the cipher (16 bytes)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] iv = generateRandomBytes(16);\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] privateKey = key.getPrivKeyBytes();\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] encryptKey = Arrays.copyOfRange(derivedKey, 0, 16);\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] cipherText = encryptAes(iv, encryptKey, privateKey);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] mac = HashUtil.h256(concat(Arrays.copyOfRange(derivedKey, 16, 32), cipherText));\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final KeystoreItem keystore = new KeystoreItem();\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.address = Hex.toHexString(key.getAddress());\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.id = UUID.randomUUID().toString();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.version = 3;\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto = new KeystoreCrypto();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.setKdf(\"scrypt\");\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.setMac(Hex.toHexString(mac));\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.setCipher(\"aes-128-ctr\");\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.setCipherText(Hex.toHexString(cipherText));\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.setCipherParams(new CipherParams());\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.getCipherParams().setIv(Hex.toHexString(iv));\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.setKdfParams(new KdfParams());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.getKdfParams().setN(ScryptN);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.getKdfParams().setR(ScryptR);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.getKdfParams().setP(ScryptP);\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.getKdfParams().setDklen(ScryptDklen);\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            keystore.crypto.getKdfParams().setSalt(Hex.toHexString(salt));\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            byte[] bytes = keystore.toRlp();\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return bytes;\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception e) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throw new RuntimeException(\"Problem storing key. Message: \" + e.getMessage(), e);\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private byte[] generateRandomBytes(int size) {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final byte[] bytes = new byte[size];\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Random random = new Random();\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Random random = new SecureRandom();\n",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "        random.nextBytes(bytes);\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bytes;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public static ECKey fromKeystore(final byte[] content, final String password) {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final KeystoreItem keystore = KeystoreItem.parse(content);\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final byte[] cipherKey;\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (keystore.version != 3) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "                throw new RuntimeException(\"Keystore version 3 only supported.\");\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "            switch (keystore.getKeystoreCrypto().getKdf()) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            case \"pbkdf2\":\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                cipherKey = checkMacSha3(keystore, password);\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                break;\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "            case \"scrypt\":\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "                cipherKey = checkMacScrypt(keystore, password);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "                break;\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "            default:\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "                throw new RuntimeException(\"non valid algorithm \" + keystore.getKeystoreCrypto().getCipher());\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            byte[] privateKey = decryptAes(Hex.decode(keystore.getKeystoreCrypto().getCipherParams().getIv()),\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    cipherKey, Hex.decode(keystore.getKeystoreCrypto().getCipherText()));\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return ECKeyFac.inst().create().fromPrivate(privateKey);\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception e) {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return null;\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private static byte[] decryptAes(byte[] iv, byte[] keyBytes, byte[] cipherText)\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return processAes(iv, keyBytes, cipherText, Cipher.DECRYPT_MODE);\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private byte[] encryptAes(byte[] iv, byte[] keyBytes, byte[] cipherText)\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return processAes(iv, keyBytes, cipherText, Cipher.ENCRYPT_MODE);\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private static byte[] processAes(byte[] iv, byte[] keyBytes, byte[] cipherText, int encryptMode)\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        SecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-330"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CommandInjection",
                  "Security",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Xcal1bur/Giter/commit/cd3cb5a9a8a2b20d38d76350dce71d5ce4c1ae52?diff=split#diff-5525cbff62ceafe31dc99d746001579986f2348868bf4da54771d6a54259e3f7L-1",
                    "lines": [
                      {
                        "line": "    subprocess.run(f\"git remote add origin git@github.com:{username}/{repo_name}.git\", shell=True)\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git pull origin master:master\", shell=True)\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git rebase origin/master\", shell=True)\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git push -u origin master\", shell=True)\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.run([\"git\", \"remote\", \"add\", \"origin\", f\"git@github.com:{username}/{repo_name}.git\"])\n",
                        "lineNumber": 112,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"pull\", \"origin\", \"master:master\"])\n",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"rebase\", \"origin/master\"])\n",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"push\", \"-u\", \"origin\", \"master\"])\n",
                        "lineNumber": 115,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lammps/lammps/commit/22f99be57e6e97754bb9f1ee264b7dd844916fda?diff=split#diff-4e7cc7a44b4b4f346493d07636004e210db6bc3f4ec9e0652aa5c7408360f27aL-1",
                    "lines": [
                      {
                        "line": "import sys,os,re,subprocess\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import sys,os,re,subprocess,shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "# help message\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "help = \"\"\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from src dir: make lib-scafacos args=\"-b\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: make lib-scafacos args=\"-p /usr/local/scafacos\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from lib dir: python Install.py -b\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: python Install.py -p /usr/local/scafacos\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "specify zero or more options, order does not matter\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -b = download and build the Scafacos library\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -p = specify folder of existing Scafacos installation\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "   always creates includelink, liblink to Scafacos dirs\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "Example:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-b\"   # download/build in lib/scafacos/scafacos\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-p $HOME/scafacos\" # use existing Scafacos installation in $HOME\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "# settings\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "version = \"scafacos-1.0.1\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "url = \"https://github.com/scafacos/scafacos/releases/download/v1.0.1/scafacos-1.0.1.tar.gz\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "#url = \"https://gigamove.rz.rwth-aachen.de/d/id/CTzyApN76MXMJ6/dd/100\" % version\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "# print error message or help\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "def error(str=None):\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not str: print(help)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: print(\"ERROR\",str)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sys.exit()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "# expand to full path name\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "# process leading '~' or relative path\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "def fullpath(path):\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return os.path.abspath(os.path.expanduser(path))\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "def which(program):\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  def is_exe(fpath):\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fpath, fname = os.path.split(program)\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if fpath:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if is_exe(program):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return program\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for path in os.environ[\"PATH\"].split(os.pathsep):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      path = path.strip('\"')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "      exe_file = os.path.join(path, program)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if is_exe(exe_file):\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return exe_file\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return None\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "def geturl(url,fname):\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  success = False\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if which('curl') != None:\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'curl -L -o \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling curl failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success and which('wget') != None:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'wget -O \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Wget command: %s\" % cmd)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling wget failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Failed to download source code with 'curl' or 'wget'\")\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "# parse args\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "args = sys.argv[1:]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "nargs = len(args)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = \".\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "buildflag = True \n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "pathflag = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "linkflag = True\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "iarg = 0\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "while iarg < nargs:\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if args[iarg] == \"-v\":\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    version = args[iarg+1]\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-p\":\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scafacospath = fullpath(args[iarg+1])\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    pathflag = True\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-b\":\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    buildflag = True\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 1\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: error()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = fullpath(homepath)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "homedir = \"%s/%s\" % (homepath,version)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathflag):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.isdir(scafacospath): error(\"Scafacos path does not exist\")\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    homedir =scafacospath\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (buildflag and pathflag):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Cannot use -b and -p flag at the same time\")\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "# download and unpack Scafacos tarball\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "if buildflag:\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Downloading Scafacos ...\")\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  geturl(url,\"%s/%s.tar.gz\" % (homepath,version))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Unpacking Scafacos tarball ...\")\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if os.path.exists(\"%s/%s\" % (homepath,version)):\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'rm -rf \"%s/%s\"' % (homepath,version)\n",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 135,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shutil.rmtree(\"%s/%s\" % (homepath,version))\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jachinlin/kindle_maker/commit/8804b85a69865837d31e37bdf73e01844229c5bc?diff=split#diff-00e2b2a85960fbf3f1969c885888cbc0aefd4e01c24e7fc34e1fecc94429f7b3L-1",
                    "lines": [
                      {
                        "line": "import shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from jinja2 import Environment, FileSystemLoader\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "templates_env = Environment(loader=FileSystemLoader('%s/templates/' % os.path.dirname(os.path.realpath(__file__))))\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "_default_output_dir = '/tmp/kindle_maker/'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_file(template_name, context, output_name, output_dir):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = templates_env.get_template(template_name)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(os.path.join(output_dir, output_name), \"w\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f.write(template.render(**context))\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_ncx(headers, output_dir, title=None, author=None):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file(\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.xml',\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'headers': headers,\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': title or 'jachinlin.github.io' + str(datetime.date.today()),\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'author': author or 'jachinlin.github.io'\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        },\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.ncx',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        output_dir\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_html(headers, output_dir):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('toc.html', {'headers': headers}, 'toc.html', output_dir)\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_opf(headers, title, output_dir, author=None):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('opf.xml', {'headers': headers, 'title': title,\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            'author': author or 'jachinlin.github.io'}, '{}.opf'.format(title), output_dir)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "def parse_headers(toc_file_name):\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param toc_file_name:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    headers_info = []\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(toc_file_name) as f:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        headers = f.readlines()\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        order = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not headers:\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title_line = 0\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        while (not headers[title_line].strip()) or title_line == len(headers):\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            title_line += 1\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if title_line == len(headers):\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title = headers[title_line].strip()\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for h in headers[title_line + 1:]:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('# '):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info.append({\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'next_headers': []\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('## '):\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if len(headers) == 0:\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info[-1]['next_headers'].append({\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return title, headers_info\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "def make_ebook(source_dir, output_dir=None):\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    make ebook with the files in source_dir and put the ebook made in output_dir\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param source_dir:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output_dir = output_dir or _default_output_dir\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # make a tmp dir in output_dir\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmp_dir = os.path.join(output_dir, str(uuid.uuid4()))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"mkdir -p {}\".format(tmp_dir))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # copy source files to tmp dir\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"cp -rf {}/* {}\".format(source_dir, tmp_dir))\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # parse toc.md file\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toc_file_name = os.path.join(tmp_dir, 'toc.md')\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(toc_file_name):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('not exists toc md file')\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    title, headers = parse_headers(toc_file_name)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not title:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('invalid toc md file')\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # cover\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cover_file_name = os.path.join(tmp_dir, 'cover.jpg')\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(cover_file_name):\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cover = '%s/templates/cover.jpg' % os.path.dirname(os.path.realpath(__file__))\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        os.system('cp %s %s' % (cover, tmp_dir))\n",
                        "lineNumber": 133,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        shutil.copy(cover, tmp_dir)\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 47,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "scala/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "scala",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storage/src/main/java/org/apache/kafka/storage/internals/log/SkimpyOffsetMap.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 23,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "213627fc105b8d05e00efaac499bc177f4f8092f4b7cd6cd771575988c370b3a",
            "1": "46a69213.1cbd3ff4.33fa5dbe.e22980a8.3d2bca12.7fda7c5e.e954c80d.c4e81b6c.d6deb347.7f413d6f.33fa5dbe.e22980a8.3d2bca12.7fda7c5e.5b1ccecb.c4e81b6c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storage/src/main/java/org/apache/kafka/storage/internals/log/SkimpyOffsetMap.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storage/src/main/java/org/apache/kafka/storage/internals/log/SkimpyOffsetMap.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 23,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1040,
                  "endLine": 1040,
                  "startColumn": 20,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4410258c5474d419c9bc45e8b76a56bb6771baa702475a3d1bcbbb163c1bdc86",
            "1": "6fc39a76.8318fc43.bd65d204.cac289c4.4b1c25b6.c4a0045a.b9f7aa10.e10f778d.6fc39a76.886d5ad7.bd65d204.cac289c4.4b1c25b6.c4a0045a.b9f7aa10.e10f778d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1040,
                            "endLine": 1040,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/utils/PasswordEncoderTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 20,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b99c88e4334de58cb415a19408f2a9cd1ff40f7998c640ac02757851235589e2",
            "1": "879c6b89.10aa938d.8e3a0e6a.cac289c4.4b1c25b6.798c7c6e.d8a1cbd3.e625ef16.879c6b89.1847a4f3.8e3a0e6a.cac289c4.4b1c25b6.58a9aaca.28f9eba2.e625ef16"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/utils/PasswordEncoderTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/utils/PasswordEncoderTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 20,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "efed825b5e79360c1573c5cff53ca57379a2696baa4d562705650ea20d3d5567",
            "1": "879c6b89.10aa938d.8e3a0e6a.cac289c4.4b1c25b6.798c7c6e.d8a1cbd3.e625ef16.879c6b89.dd180a0a.8e3a0e6a.cac289c4.4b1c25b6.798c7c6e.28f9eba2.e625ef16"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/utils/PasswordEncoderTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/utils/PasswordEncoderTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 22,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49f3503e6de8715b7b369f6fc027f14c5923d1b9c5bafbe364f28d47de4a90b0",
            "1": "879c6b89.10aa938d.8e3a0e6a.cac289c4.4b1c25b6.798c7c6e.d8a1cbd3.e625ef16.879c6b89.1847a4f3.8e3a0e6a.cac289c4.4b1c25b6.58a9aaca.28f9eba2.e625ef16"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/utils/PasswordEncoderTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/KafkaConfigTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "startColumn": 20,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd7ec4b346672a664449bfc5ad6bcdbf04303926bc81195edf78b4c9d20e9a60",
            "1": "6fc39a76.dd180a0a.bd65d204.cac289c4.852b7e8e.798c7c6e.b9f7aa10.e10f778d.6fc39a76.dd180a0a.bd65d204.cac289c4.852b7e8e.798c7c6e.b9f7aa10.e10f778d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/KafkaConfigTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 20,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/KafkaConfigTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 230,
                  "endLine": 230,
                  "startColumn": 40,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c75ef3dc58e9d3394d537483e320be35a13bb68d119a06187f1aa713be3e418",
            "1": "812eb84e.58728200.053e8528.03503ce3.4b1c25b6.c4a0045a.941b879c.85a3b96a.812eb84e.58728200.053e8528.03503ce3.4b1c25b6.c4a0045a.941b879c.ad692b6d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/KafkaConfigTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 230,
                            "endLine": 230,
                            "startColumn": 40,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4ff96dbbe916fa8936789fe0cfc9f2a5377afceaa1daa0f1fb8830284649af93",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0b0e262f66fcb95d16706ade0b9c7ca15beaf4e273c071e584fd187ca229a819",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.9ac51e41.16e85952.408180c7.e82173b5.839d9b14.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-20/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StaticMemberTestClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a7b4020939f6accf15296089382119f69033468dc37288c8d40dbe03a0a3473",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.20becd7d.de031890.408180c7.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StaticMemberTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StaticMemberTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StaticMemberTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StaticMemberTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "892a75fe3164162cd2cbcf5addf5164e4d9850eafbac5787959294b851fdca3e",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c3a6dcbc46f0b65e8d2c3253866361d78d07d39db72c6e19eac8406b9e9018bf",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.20becd7d.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e9c839876300ef1c274b86e15ad8f38e025023a9125dc4faa0ced23b0b306d6c",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.20becd7d.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5125e519ed5ed47ce22251dc8222b6e53216e1faefe0e171f5a52f5ccdd3955d",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1c15e1cc6956d0d50950ca11d573456d1b4bed64260a882497760b577f3e73e1",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5a26953a17150bfbdc122804731d139951b0889251ea5f854dcfb1757a841d52",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.d6959ade.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "689f4800e204293b4f91c24d4f6638a66be9e26d89d4aa8e127b4d61abf47ca3",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3ce9bdee18453668e2b844027ff48229ddf015c7184123301f7dde3390f3c797",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb77dee82f959fcd0d875bff5f2300d29a04a5dc375ee8ec13ff821ae1a2481c",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0102/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7195f19e01adb9fa778c508359d721ae43318c8afe2df234f64e632b4bff7219",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.9ac51e41.16e85952.408180c7.e82173b5.839d9b14.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5df9f074adb9ac4d08b3dc3e46b624d3fb630993718890d362bde22bbf56d1dd",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2f66f5a71258a1304b534ccb0e3fd1a2d4a6ba36e7c0dc4ab58da81caaac482d",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37c6b049a0d90b8e75623a117d0acbe37623f13a1d2fbaee863e886cdd9ec242",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.9ac51e41.16e85952.408180c7.e82173b5.839d9b14.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-11/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5063a66d27fbc57585ee96cab3946f6e585fd0e399da5c5443b9e586d2465f47",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61b5b0824ad04f1b407f9c7a6fc03e127e4bee63cf8bf9b5a2a9e4de52fe1150",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.b051b3b8.2873c9aa.54d46e25.00331dfa.f326e24d.20becd7d.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d7300c3c8dfa03dfb6c81fb5ff7ef64de0234dcb765a0b782595dd1fab484a7",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e48e53e3385597816a087e0ae2a4d5f03f1dd121a51ea7b415885d6c66f3fb94",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e4f3fcda2d6b2faebafc21f56bd68c51b38329445b2b5a66edc2159a6e1e6a64",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.b051b3b8.2873c9aa.54d46e25.00331dfa.f326e24d.20becd7d.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7ac26239de46b591094810bfffb5a1bc2de0be83f3ea459aed4043aeb28c68d",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0110/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bdb43e9ceacc5621dbca8b6e478df15734e2f0568ad68b2dceed2a8e64997518",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3718cc39012248cb3abd3591af0b9bfd6fe199d7a6d2bb1d9f3a249da86bb3aa",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.b051b3b8.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsEosTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5260cd74ab96f96f34a778783bf587995c7f5cc404538a95791cc21671cca7ac",
            "1": "00331dfa.60314eca.af3bbb01.03328d15.408180c7.e4d7b7ac.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e4d7b7ac.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsEosTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsEosTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsEosTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsEosTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9a10984d40859ff46f4754c787a6af2416867ee2ebbcb9d6de6045898a1b3721",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c5bf5b92ffff4afdb057004c998102b601f40d01d35573d900f591f7ca6bd28b",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4ffb86286866f64b31747e08f6f0745b8e45aa62c911117db2f79fa4a85ee695",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4350ee5cc3a0f03c7254d66ddbe9e4879e6d81ac3823f4478432d15575a4ad9",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d8ba7b74f4878cab0a199f699ba6fd3909924a7428dad3d089f5783f700268fa",
            "1": "00331dfa.92e378d2.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.989b31e4.6d049a04.e22980a8.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 55,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 55,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 22,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f150ef0b4856e7e41e0a7b2f33ca3e459c7c0eee1c333b3fff6024725d87a6d8",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5d76ceee431bae62c1f53c264f0e2b85d13d559c2974f34433785ad8e1368630",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04ce18f2c708ce7cf93470310a02c5b20abfb4cea00dafcddb37595bb0027b69",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.afc63bd9.de031890.408180c7.c2a2834d.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5a0c3406894a4ae7fa72bbee4200f22ce1e97d4a627bfe18d4aadb176ae21fcd",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.b051b3b8.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "189cac3ce5801ef8fa241cbe811542da707d515f65033260bf297e8c6e0df9c9",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.9ac51e41.16e85952.408180c7.e82173b5.839d9b14.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c92bc91ea6c3696763774056dc7b25443480eef227ff4f815479c6637492e06c",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "491a3524ba3e27c5bf1067e204de64cc911f2df3665dbd7c1cfe1014641c2d86",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.9ac51e41.e22980a8.408180c7.e82173b5.839d9b14.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c926255850920934c747d00a3c2ad1c0169bf5dafdb593309bf96e9e25e54a70",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a4c45c77b788f0caeb0d83d42ac26c6fc9d753fe6e49d08c4c1c63a7bcd5ea0",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.20becd7d.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "36a56c2b37e0167f3cf82b1cb2a515e1a586b9f321048613792ec8de8babed56",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d4dd47b2157b51bcdcddbd2d704763794106b4a908cb12ce2fd89d1c8d54a54",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8f89a92d352e34a8e99362d78912077cddcd79c3676ceabe89c6eeb64bab2f4a",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5c36f651a3471850a1cdb73da514fd13988d4ceb9f3bed8da52b9847993e0cb3",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21534a755870218b04fa37e51d0b1ea84faa5423ef93d2be41d47c954cac07b1",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsNamedRepartitionTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88088a70a9f53ca16bb4df831234d55dd946eeb5af842702297566bc49d8852f",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.e22980a8.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsNamedRepartitionTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsNamedRepartitionTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsNamedRepartitionTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsNamedRepartitionTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9e61579c97b2520fbfca643a79aef471ea0d50c2d86a2b26c4e92ae3ec760f2d",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e737ace6b8299e5a8c30bacea410b8d3d9f3b2018872515a768ab7f5e7e40675",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.09dcc7cb.de031890.408180c7.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 435,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4bf006fa44b71b08c90af248de1eb3b71b3a0370c5251274dbd0607878fb48b",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.60314eca.20becd7d.4a09d7a6.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "be74a28b7e5bbb4fbed7b3264bf8d61e3a6efb6af23f5673f99d10e3514ea41e",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.5ee85860.16e85952.408180c7.e82173b5.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.nio.file.Files.newInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 46,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "79f1e9e63cdafb6af97a5f900637f531c40671fb739bd4a8fd9f80a58402bee6",
            "1": "00331dfa.7797192f.af3bbb01.82e76c82.408180c7.117e971f.2873c9aa.54d46e25.00331dfa.f326e24d.9ac51e41.16e85952.408180c7.e82173b5.839d9b14.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 62,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 385,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27)",
              "[exists](28)",
              "[conditional expression](29)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 42,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "833d5ae8262d84fee23e198dcfb3e4c73a213daf005b85e517c51a73e6d1747d",
            "1": "2d06e3d6.06157398.4c414d2f.6c52ae28.4b90d613.e82173b5.2eb2e3ce.54d46e25.00331dfa.f15a4282.09dcc7cb.de031890.408180c7.ce109560.2b1bbfb7.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 39,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 39,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 22,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/test/java/org/apache/kafka/streams/tests/BrokerCompatibilityTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 72,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 746,
                            "endLine": 746,
                            "startColumn": 25,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 747,
                            "endLine": 747,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 816,
                            "endLine": 816,
                            "startColumn": 25,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 817,
                            "endLine": 817,
                            "startColumn": 24,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 833,
                            "endLine": 833,
                            "startColumn": 25,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 835,
                            "endLine": 835,
                            "startColumn": 90,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 863,
                            "endLine": 863,
                            "startColumn": 28,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 865,
                            "endLine": 865,
                            "startColumn": 32,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 869,
                            "endLine": 869,
                            "startColumn": 26,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 9,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 881,
                            "endLine": 881,
                            "startColumn": 49,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 27,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 37,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 37,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 22,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 20,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 17,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 435,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/network/PlaintextSender.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 36,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b02d2c271bc8d660138df3c62e5f3e42f05e9bfa2b3b9a05eafd49ac9b36516",
            "1": "19689298.49766a9f.2236f628.6c52ae28.d31a8364.85d83993.bae646e8.0f01a149.19689298.be62888c.2236f628.6c52ae28.d31a8364.85d83993.bae646e8.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/network/PlaintextSender.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 36,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/network/PlaintextSender.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 36,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 166,
                  "startColumn": 50,
                  "endColumn": 83
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8db0f27e8f4c223bc68aa7187bb2c060e69494c260110624792adbcc1ab99f89",
            "1": "e6fcc0e0.23591c59.85780899.f6207afb.1b707fb5.163a26f7.3619a8be.7b7c0bc9.e6fcc0e0.23591c59.85780899.f6207afb.1b707fb5.163a26f7.3619a8be.7b7c0bc9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactoryTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 165,
                            "endLine": 166,
                            "startColumn": 50,
                            "endColumn": 83
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorDemo.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 50,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2a0178f24f473f10617fc158d10fa94cf952c6196f4a27e0a5e0aca1efc29736",
            "1": "ac4e7c8b.ff76257e.1b9a1d8e.6c52ae28.f6d438cc.117e971f.2501145e.6f114b23.8df8fa68.6a984baf.622565c7.e22980a8.a7b964d9.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 66,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 66,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 50,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountTransformerDemo.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 50,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a846c7081d5c0a8c9776e3a1ef940d70c4452d0f5365fbe78a841d88e8e0b305",
            "1": "ac4e7c8b.ff76257e.1b9a1d8e.6c52ae28.f6d438cc.117e971f.2501145e.6f114b23.8df8fa68.7f413d6f.622565c7.e22980a8.a7b964d9.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountTransformerDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 66,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountTransformerDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 66,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountTransformerDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 50,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 50,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "195fdb34ea523fa7ed261545e9c3b45cc6ca781e64b6b5393d9f19680f082d15",
            "1": "ac4e7c8b.ff76257e.1b9a1d8e.6c52ae28.f6d438cc.117e971f.2501145e.6f114b23.8df8fa68.dd05ec30.622565c7.de031890.a7b964d9.17320362.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 66,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 66,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 50,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.newInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[java.nio.file.Files.newInputStream](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 199,
                  "startColumn": 62,
                  "endColumn": 77
                }
              }
            }
          ],
          "fingerprints": {
            "0": "71aa021973efc85181384c5ae76626e00b531857cf74b9ed0f18d498751a931a",
            "1": "00331dfa.290d913b.e0d6f35d.da7bbd37.c4578576.7fa7d490.db2588b6.a85a5292.e1d7cd7c.290d913b.e0b2d4c4.de031890.025462d2.ce109560.73e774fa.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 102,
                            "endColumn": 109
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 102,
                            "endColumn": 109
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 90,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 26,
                            "endColumn": 129
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 75,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 70,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 205,
                            "endLine": 205,
                            "startColumn": 66,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 198,
                            "startColumn": 61,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 33,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 78,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tools/src/main/java/org/apache/kafka/tools/EndToEndLatency.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 78,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 670,
                            "endLine": 670,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 680,
                            "endLine": 680,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 684,
                            "endLine": 684,
                            "startColumn": 43,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 503,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "493f9074fd332aa82e9a7a9b2c8d81ee3f2523582fa5ab508aac00dc14211a40",
            "1": "cee1e251.51a0baa3.a7096d20.1b971824.6822b0af.c29cd069.89894a2c.792cc043.cee1e251.08e8a46f.28181755.1b971824.1c4758c5.c29cd069.89894a2c.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 399,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0922a320cb8ad84b7d8740117cf7b8c8ddc1a17ea05749f586524393b4abba2b",
            "1": "cee1e251.1847a4f3.8e3a0e6a.1b971824.82b50ca4.58a9aaca.acef648e.9ee06234.cee1e251.08e8a46f.28181755.1b971824.1c4758c5.80128908.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 399,
                            "endLine": 399,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 399,
                            "endLine": 399,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 417,
                  "endLine": 417,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c3c3b1651b56b4c780643eebb7d2860404b3a07f4998466542f845f43b6b60fa",
            "1": "cee1e251.1847a4f3.8e3a0e6a.1b971824.82b50ca4.58a9aaca.acef648e.9ee06234.cee1e251.08e8a46f.28181755.1b971824.1c4758c5.80128908.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f7c0188b2e11013eeb1431911ebf5054b6d76ed0f8762d154a88439254a2dfe2",
            "1": "cee1e251.51a0baa3.a7096d20.1b971824.82b50ca4.58a9aaca.28f9eba2.a8af8866.cee1e251.51a0baa3.28181755.1b971824.1c4758c5.c4a0045a.e187f5aa.85a3b96a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/zk/ZkFourLetterWords.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 23,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a50b1a3765fa97138da1acc34c0a1d88bd5a7b0af4c64d35bed894c066344de1",
            "1": "f70bfb78.2f5da211.3cfc9ae0.1b971824.4b1c25b6.c4a0045a.1d91e5bf.96106719.17565a7c.2f5da211.28181755.1b971824.1c4758c5.c4a0045a.28f9eba2.96106719"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/zk/ZkFourLetterWords.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/zk/ZkFourLetterWords.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 162,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "62fc37fd92ce68a64b96702cc050f0d5f0d1a5bb6cacda0b74dd68f8090adf0b",
            "1": "cee1e251.51a0baa3.a7096d20.1b971824.82b50ca4.58a9aaca.28f9eba2.a8af8866.cee1e251.51a0baa3.28181755.1b971824.1c4758c5.c4a0045a.a351edeb.ac4f231e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/integration/kafka/server/IntegrationTestUtils.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 41,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92df0ec66dc553fd2fc23a00f0e5439c8f62efe6e99576799ab9aa565c4ec119",
            "1": "cee1e251.51a0baa3.a7096d20.1b971824.82b50ca4.58a9aaca.28f9eba2.a8af8866.cee1e251.7d4b7307.28181755.1b971824.1c4758c5.c4a0045a.a351edeb.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/integration/kafka/server/IntegrationTestUtils.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/integration/kafka/server/IntegrationTestUtils.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 41,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 40,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af61a44fd0d446cbd2557ef96dd1aff5ecf98f9bd3a6f04ebdfcbb858ddce42c",
            "1": "cee1e251.51a0baa3.a7096d20.e99b6cf4.82b50ca4.2f623806.28f9eba2.a8af8866.cee1e251.08e8a46f.28181755.cac289c4.1c4758c5.2f623806.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 800,
                  "endLine": 800,
                  "startColumn": 22,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c19a3b21169139e7e4c16b2e9a8a473de47ce98d725cad149c900135d53d5438",
            "1": "cd0cfe44.27363544.5fd94877.c564ac9d.2372bc48.c4a0045a.f7f730c1.48a041d7.cee1e251.08e8a46f.28181755.cac289c4.1c4758c5.c4a0045a.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 800,
                            "endLine": 800,
                            "startColumn": 22,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 800,
                            "endLine": 800,
                            "startColumn": 22,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 829,
                  "endLine": 829,
                  "startColumn": 24,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5dce46ae7e2b0c0a574ab87325fea6ebd57d716862f4baac30bc5b8cfebc8936",
            "1": "cd0cfe44.27363544.5fd94877.c564ac9d.2372bc48.c4a0045a.f7f730c1.48a041d7.cee1e251.08e8a46f.28181755.cac289c4.1c4758c5.c4a0045a.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 829,
                            "endLine": 829,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 829,
                            "endLine": 829,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 846,
                  "endLine": 846,
                  "startColumn": 24,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c46acb0336aa2121f659d5204f397cd8df45cbfdbf9c79a801b1ed89b0ffa7e8",
            "1": "cd0cfe44.27363544.5fd94877.c564ac9d.2372bc48.c4a0045a.f7f730c1.48a041d7.cee1e251.08e8a46f.28181755.cac289c4.1c4758c5.c4a0045a.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 846,
                            "endLine": 846,
                            "startColumn": 24,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 846,
                            "endLine": 846,
                            "startColumn": 24,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 875,
                  "endLine": 875,
                  "startColumn": 24,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1916d1244def8c1a29eccb39c651abfddf98e50bfb232a2d60173e224bb8e0ae",
            "1": "cd0cfe44.27363544.5fd94877.b60682c1.2372bc48.c4a0045a.f7f730c1.91e1dc88.cee1e251.08e8a46f.28181755.cac289c4.1c4758c5.c4a0045a.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 875,
                            "endLine": 875,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 875,
                            "endLine": 875,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 905,
                  "endLine": 905,
                  "startColumn": 24,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dadb22be456c68290e2c731b70a91d11fcec2b168f659999d193f19e2fc7e2c7",
            "1": "cd0cfe44.27363544.5fd94877.b60682c1.2372bc48.c4a0045a.f7f730c1.8c796fda.cee1e251.08e8a46f.28181755.cac289c4.1c4758c5.c4a0045a.acef648e.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 905,
                            "endLine": 905,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 905,
                            "endLine": 905,
                            "startColumn": 24,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 40,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c724cb25826a0b9306c1c95a9fa79135d131f8e6046f4a047581ce62963556ae",
            "1": "cee1e251.51a0baa3.a7096d20.e99b6cf4.82b50ca4.2f623806.28f9eba2.a8af8866.cee1e251.51a0baa3.28181755.cac289c4.1c4758c5.c4a0045a.e187f5aa.85a3b96a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 24,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8277533e8051b49270f9b58eb82a64a3ffe142b6a40d185d30e1c3b2de54a6d7",
            "1": "cee1e251.51a0baa3.a7096d20.c564ac9d.2372bc48.c4a0045a.f7f730c1.48a041d7.cee1e251.51a0baa3.28181755.cac289c4.1c4758c5.c4a0045a.e187f5aa.48a041d7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 24,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 24,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 40,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dec06ff33d1622eccc51f8bdcba4fe6434e1e2bec02cc15d105191a8389f1b69",
            "1": "cee1e251.51a0baa3.a7096d20.e99b6cf4.82b50ca4.2f623806.28f9eba2.a8af8866.cee1e251.51a0baa3.28181755.cac289c4.1c4758c5.c4a0045a.a351edeb.ac4f231e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/UsageOfUnencryptedSocket/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/integration/kafka/server/IntegrationTestUtils.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 40,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12ac1664ab81f7708fa77b35f8660764c4fb63ae35da3ff08259675ce4618674",
            "1": "cee1e251.51a0baa3.a7096d20.e99b6cf4.82b50ca4.2f623806.28f9eba2.a8af8866.cee1e251.7d4b7307.28181755.cac289c4.1c4758c5.c4a0045a.a351edeb.5fb69f4c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/integration/kafka/server/IntegrationTestUtils.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/integration/kafka/server/IntegrationTestUtils.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 40,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 212,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedSecret/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Hardcoded value array {...} is used as a cipher key. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Hardcoded value {0} is used as a {1}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[array {...}](0)",
              "[cipher key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/InternalRequestSignatureTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 46,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cfc71299c152d4b516fbc2a39f081e75aa1292fc5bc3ae2b073c29391fc840a7",
            "1": "4392f873.dd05ec30.8f415be7.de031890.a69fb8f9.c2a2834d.018a0f65.667380ee.b91763f9.dd05ec30.8f415be7.de031890.a69fb8f9.c2a2834d.018a0f65.667380ee"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/InternalRequestSignatureTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/InternalRequestSignatureTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 46,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedSecret",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Hardcoded value array {...} is used as a cipher key. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Hardcoded value {0} is used as a {1}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[array {...}](0)",
              "[cipher key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 22,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f4309caed16dae31c2164ac073109a38452a5cb5258be4741ed275614c8066e8",
            "1": "4392f873.19d25089.0de70b61.0c53b9af.178caa9c.3fe77750.f4252641.c2e63edc.8df8fa68.19d25089.8f415be7.0c53b9af.c0115a3e.3fe77750.3388a401.c0fe4abd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 523,
                  "endLine": 523,
                  "startColumn": 33,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3f435b7dfc772de9150295f6265c6ef4fb5c24acc91d8944ae40acfbd0cd9942",
            "1": "641206ff.f7e1b003.8a06bb37.042720bc.e5c1af39.ba2b7f9a.055df7b2.54d46e25.641206ff.f7e1b003.017fe53e.e22980a8.e5c1af39.ba2b7f9a.055df7b2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 523,
                            "endLine": 523,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 606,
                  "endLine": 606,
                  "startColumn": 28,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4dc94921a955698efbdfd89414e7daa0fca57fe345df16cc608db7ccf5459401",
            "1": "19689298.83dbfe52.6d6b6b6e.ede9cf8e.14209a8b.3d5c6e12.d999fe23.54d46e25.19689298.83dbfe52.fc7d5400.e22980a8.e5c1af39.feffea73.d999fe23.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 606,
                            "endLine": 606,
                            "startColumn": 28,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 642,
                  "endLine": 642,
                  "startColumn": 28,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b81dbde63bb0ac6e0808f2c9ee8d08558a71a0cf44258b2aa7e42b5a223a0658",
            "1": "19689298.83dbfe52.6d6b6b6e.ede9cf8e.14209a8b.3d5c6e12.d999fe23.54d46e25.19689298.83dbfe52.fc7d5400.e22980a8.e5c1af39.3d5c6e12.d999fe23.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 642,
                            "endLine": 642,
                            "startColumn": 28,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2314,
                  "endLine": 2314,
                  "startColumn": 40,
                  "endColumn": 76
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f30480786ec7cc9bc656a8f69c0d633fb47006545d71cff0d1d17ebd5d9d14c8",
            "1": "19f079a4.37d56a49.5cc1370f.de031890.8b2d3351.ce109560.1148c131.b8e126d4.19f079a4.37d56a49.45f72ea1.de031890.bb61bed7.ce109560.1148c131.b8e126d4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2314,
                            "endLine": 2314,
                            "startColumn": 40,
                            "endColumn": 76
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2377,
                  "endLine": 2377,
                  "startColumn": 40,
                  "endColumn": 76
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22ba5aa2f34fae01273fa2e1b1a2b9f6207add0256c0e30d5bf7683d95c23d8e",
            "1": "19f079a4.dd05ec30.5cc1370f.de031890.7b2761b4.ce109560.1148c131.8488dd2e.19f079a4.dd05ec30.5cc1370f.de031890.7b2761b4.ce109560.1148c131.8488dd2e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2377,
                            "endLine": 2377,
                            "startColumn": 40,
                            "endColumn": 76
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2395,
                  "endLine": 2395,
                  "startColumn": 63,
                  "endColumn": 83
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6502de99ea2ac3f21a6b3bc1a065264d606e9efb66d9e1cf3363a07da117aac4",
            "1": "19f079a4.e8c02a15.5cc1370f.de031890.7b2761b4.ce109560.2ed7aa4c.fde7589e.f7559148.e8c02a15.fbc68d0b.de031890.7b2761b4.ce109560.2ed7aa4c.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2395,
                            "endLine": 2395,
                            "startColumn": 63,
                            "endColumn": 83
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/TestJaasConfig.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 36,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "153ea8cfec13b3bc94c8a599db142728c33756284af0f2d98bf8296cc77d6c09",
            "1": "19f079a4.dd05ec30.5cc1370f.de031890.8b2d3351.a1653a93.1148c131.87dfd8cc.19f079a4.dd05ec30.5cc1370f.de031890.8b2d3351.a1653a93.1148c131.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/TestJaasConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 36,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/scram/internals/ScramFormatterTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 27,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1cfe6106f5e29de18c3a94e72ed84e52bcd712efb11d6d2911099c87e890950d",
            "1": "19689298.1d3b1951.71a71d19.bd0e4e78.bc6ac6aa.dd62fee0.5cd65e98.54d46e25.19689298.1d3b1951.71a71d19.e22980a8.f1d9f854.dd62fee0.5cd65e98.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/scram/internals/ScramFormatterTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 75,
                  "endColumn": 86
                }
              }
            }
          ],
          "fingerprints": {
            "0": "083952702eadcd2245bcc95952874060261bb4cb96dd3445e8ad2409f1f1155c",
            "1": "c90cb73f.1cbd3ff4.71a71d19.8d69ed9f.4908d7d3.dd62fee0.33167e31.e6892331.c90cb73f.5de6bed3.71a71d19.8d69ed9f.4908d7d3.dd62fee0.b006b6aa.e6892331"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 75,
                            "endColumn": 86
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 224,
                  "endLine": 224,
                  "startColumn": 76,
                  "endColumn": 87
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc27468e869dc761a72670cad79998f7cec292431c3edcda6222c697eae5eef3",
            "1": "c90cb73f.1cbd3ff4.71a71d19.8d69ed9f.4908d7d3.dd62fee0.33167e31.e6892331.c90cb73f.5de6bed3.71a71d19.8d69ed9f.4908d7d3.dd62fee0.b006b6aa.e6892331"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "connect/basic-auth-extension/src/test/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilterTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 76,
                            "endColumn": 87
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/plain/internals/PlainSaslServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 46,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0756a563564f2f7cd85c77f5c1aacbfc98cfa854685eeadd0788b8ea112f98a9",
            "1": "be150b47.dd05ec30.55b6a6d8.de031890.8b2d3351.ce109560.670aebe9.24da3811.c9f51d48.dd05ec30.71a71d19.de031890.bb61bed7.dd62fee0.0ac97cd8.24da3811"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/plain/internals/PlainSaslServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 46,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/plain/internals/PlainSaslServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 46,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "613af2594178e6375cd97a02a1383ee4ef0713599ecabd41931f4510448b0646",
            "1": "416089e6.46309ded.8ff671c1.de031890.8b2d3351.5f035a84.e4580e17.87dfd8cc.e6fcc0e0.46309ded.8ff671c1.de031890.bb61bed7.5f035a84.7115c551.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/plain/internals/PlainSaslServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 46,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279,
                  "startColumn": 40,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a5c678af8dd7d6f09e1d5cd272d3d3c81d7a907dd0633888a89e3c326964a1a5",
            "1": "b0b5d657.081f5f79.d809d9e6.074f5e9e.4b1c25b6.6746fe59.7315a98d.8baaf775.25db20b9.cad941e8.d809d9e6.a54e4f1b.4b1c25b6.6746fe59.7315a98d.9efc8384"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 279,
                            "endLine": 279,
                            "startColumn": 40,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 660,
                  "endLine": 660,
                  "startColumn": 35,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1b2dab5d0b91940da55c36f8acc2542a1473af630918dc3edd713dcb5b42d514",
            "1": "24fed9db.80329c52.002003e3.20c088c5.4b1c25b6.f2ffffb1.ddd086f3.85a3b96a.24fed9db.80329c52.002003e3.20c088c5.4b1c25b6.f2ffffb1.fce8faf4.85a3b96a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 35,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 661,
                  "endLine": 661,
                  "startColumn": 38,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "381843394d45dcfa2f6cdc62021d2d167dc9f1a6eb95a2628a194b283f31cd3c",
            "1": "24fed9db.80329c52.8dcfea91.0604fdf6.4b1c25b6.f2ffffb1.fce8faf4.85a3b96a.24fed9db.80329c52.002003e3.20c088c5.4b1c25b6.f2ffffb1.fce8faf4.85a3b96a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 661,
                            "endLine": 661,
                            "startColumn": 38,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 662,
                  "endLine": 662,
                  "startColumn": 48,
                  "endColumn": 87
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d56d7352ac339e1eacbf8cba5411aa790f4a4224c861b3f376cc1ee76c25d22d",
            "1": "584ff692.b75b540f.053e8528.0604fdf6.4b1c25b6.65a10386.fce8faf4.85a3b96a.ad4a1fce.34febf04.8dcfea91.0604fdf6.4b1c25b6.f2ffffb1.afe89b83.8258afa0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 662,
                            "endLine": 662,
                            "startColumn": 48,
                            "endColumn": 87
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 663,
                  "endLine": 663,
                  "startColumn": 44,
                  "endColumn": 79
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd0831395658a80f918c0af51cdf67df7e18d2079ce4d6b8fee56e6b781361f4",
            "1": "ad4a1fce.34febf04.053e8528.0604fdf6.4b1c25b6.65a10386.afe89b83.8258afa0.7ea592ed.34febf04.053e8528.0604fdf6.4b1c25b6.65a10386.6ccddcbc.8258afa0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 663,
                            "endLine": 663,
                            "startColumn": 44,
                            "endColumn": 79
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 664,
                  "endLine": 664,
                  "startColumn": 39,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e2ff877028c71d33fe15491da578e197a79328df88132d8cdf08f87157239ef0",
            "1": "7ea592ed.34febf04.053e8528.0604fdf6.4b1c25b6.65a10386.6ccddcbc.8258afa0.7ea592ed.fdcaa0af.053e8528.f4b64d2d.4b1c25b6.04d4e39e.6ccddcbc.8258afa0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 664,
                            "endLine": 664,
                            "startColumn": 39,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 665,
                  "endLine": 665,
                  "startColumn": 40,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04ba2dfe26a42149e8d53d1d0bba1a0d230671e58cee883e4839089a9046f34a",
            "1": "7ea592ed.fdcaa0af.053e8528.f4b64d2d.4b1c25b6.04d4e39e.6ccddcbc.8258afa0.7ea592ed.fdcaa0af.053e8528.f4b64d2d.4b1c25b6.04d4e39e.6ccddcbc.8258afa0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/server/KafkaConfig.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 665,
                            "endLine": 665,
                            "startColumn": 40,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/HardcodedPassword",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/scala/kafka/utils/PasswordEncoder.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 28,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3a957f157829a3700b4b2b3b9240ca998065d36761a14376209a91bab23b5ff",
            "1": "18a3c467.ca7df4be.fac5899b.27ddf813.4b1c25b6.227e72f7.f6e130fb.169330c2.18a3c467.ca7df4be.fac5899b.27ddf813.4b1c25b6.227e72f7.afea5100.169330c2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/scala/kafka/utils/PasswordEncoder.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 28,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 306,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 542,
                  "endLine": 542,
                  "startColumn": 33,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c60971461504ae0b2bd7eec81c8a2864589fa843159b41548ada19bcf4b2d61c",
            "1": "641206ff.28fd3e20.c2dbeeec.d7c82990.f5f4b203.28494f82.d75a0942.54d46e25.19689298.83dbfe52.1f78ea81.d7c82990.f5f4b203.28494f82.d75a0942.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 542,
                            "endLine": 542,
                            "startColumn": 33,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 605,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "96c5db1d71694f9bd102804f25d8d85a7f60b3a95ccace8ca183effc34bd7b15",
            "1": "19689298.83dbfe52.eec688a7.a80ff4f7.c8a8a469.ba2b7f9a.1656af88.54d46e25.19689298.83dbfe52.1f78ea81.a80ff4f7.f5f4b203.feffea73.d75a0942.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 605,
                            "endLine": 605,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 641,
                  "endLine": 641,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "50f2a6903a0b685a822c49088c7c3afefc95085bcce2a7c221c9956259fc3c79",
            "1": "19689298.83dbfe52.eec688a7.a80ff4f7.c8a8a469.ba2b7f9a.1656af88.54d46e25.19689298.83dbfe52.1f78ea81.a80ff4f7.f5f4b203.0de10375.d75a0942.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 641,
                            "endLine": 641,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2313,
                  "endLine": 2313,
                  "startColumn": 40,
                  "endColumn": 72
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a8304cd2982034f784d21c864e459fb71ee3c41a07be1a9c6401af648441bb5",
            "1": "e6fcc0e0.dd05ec30.d1aa5877.de031890.ec3b29a1.ce109560.f0e0ed1a.eecd1d6c.8df8fa68.dd05ec30.45f72ea1.de031890.ec3b29a1.dd62fee0.5b1ccecb.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2313,
                            "endLine": 2313,
                            "startColumn": 40,
                            "endColumn": 72
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2376,
                  "endLine": 2376,
                  "startColumn": 40,
                  "endColumn": 72
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d65a64073e850fd4fd5890a953dafd86c9dcd703090bd586ba64400184eacea",
            "1": "5049caa8.dd05ec30.3c7d90aa.de031890.7b2761b4.ce109560.c32bb4b0.eecd1d6c.5049caa8.dd05ec30.3c7d90aa.de031890.7b2761b4.ce109560.39c0f2cf.84530e59"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2376,
                            "endLine": 2376,
                            "startColumn": 40,
                            "endColumn": 72
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/TestJaasConfig.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 36,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37b9d6d9392c1e9ca9ecd1fc80785066f5834183bb5a60f98fd69c10206417ad",
            "1": "e6fcc0e0.dd05ec30.e144d357.de031890.8b2d3351.ce109560.f0e0ed1a.0cbf7cfb.19689298.dd05ec30.1f78ea81.de031890.f5f4b203.ce109560.39c0f2cf.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/authenticator/TestJaasConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/network/SslSender.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "07f855a0dcb7fa844081b320ba265aa8f33931ba0c4ccbb33f59af055a96b593",
            "1": "8df8fa68.7703ba66.b1ce14cf.a8423d1d.f0e1baa5.58c3080a.7011a60a.1d874c72.8df8fa68.7703ba66.b1ce14cf.a8423d1d.f0e1baa5.58c3080a.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/network/SslSender.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d02a9c568f05352da5c91e4bf0c887a842a136e4ce2f166ee4e8e8bc52c6902c",
            "1": "8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72.8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f9a17da26fc2c1229ce2a98de8f39c426b6288e2eebda0356fad9062e44d2807",
            "1": "8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72.8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "370792755f94c3f29a0394ece435a8e487aaae1c020327ae7db3d1fa1486c8bc",
            "1": "8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72.8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/network/SslSender.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7875599ff637d5cad04ff468b3cbbd61ba97723343892d3e1a52444c4fb2fa89",
            "1": "8df8fa68.7703ba66.b1ce14cf.a8423d1d.f0e1baa5.58c3080a.7011a60a.1d874c72.8df8fa68.7703ba66.b1ce14cf.a8423d1d.f0e1baa5.58c3080a.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/network/SslSender.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24853f9a72ff38befd5d40d63fa04027e905bbbe6349074491fd0101de41216d",
            "1": "8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72.8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "413f7afe83cd60aa68260e5e24a8285f688cfa35b59d96392f05cd08a1cbca39",
            "1": "8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72.8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "265a27d8634deae7bf8e5a3bd5410c042814eaa61d4bf850988ab9760202f68a",
            "1": "8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72.8df8fa68.dd05ec30.b1ce14cf.de031890.f0e1baa5.ce109560.7011a60a.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clients/src/test/java/org/apache/kafka/common/security/ssl/mock/TestTrustManagerFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/InsecureSecret",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Insecure random data flows from nextInt and is used as a secret data. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Insecure random data {0} from {1} and is used as a {2}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30)",
              "[nextInt](31)",
              "[secret data](32)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1604,
                  "endLine": 1604,
                  "startColumn": 17,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "28c75ef2b2104f618b5b9b62151e2c630b006ff2cda7aea61e6b71314edebd86",
            "1": "19689298.95cfea5c.dde3e251.e22980a8.ae63d11c.5bad41e8.2d656bd7.54d46e25.ccb12b86.d0a966f2.2efe7d57.772808f4.8050d153.7fda7c5e.03ca7ab2.da76413e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1604,
                            "endLine": 1604,
                            "startColumn": 17,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1604,
                            "endLine": 1604,
                            "startColumn": 26,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1604,
                            "endLine": 1604,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1604,
                            "endLine": 1604,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1604,
                            "endLine": 1604,
                            "startColumn": 40,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1602,
                            "endLine": 1602,
                            "startColumn": 33,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1735,
                            "endLine": 1735,
                            "startColumn": 32,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1734,
                            "endLine": 1734,
                            "startColumn": 47,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1733,
                            "endLine": 1733,
                            "startColumn": 69,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1732,
                            "endLine": 1732,
                            "startColumn": 34,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1732,
                            "endLine": 1732,
                            "startColumn": 45,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1731,
                            "endLine": 1731,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1728,
                            "endLine": 1728,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1726,
                            "endLine": 1726,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1725,
                            "endLine": 1725,
                            "startColumn": 39,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2310,
                            "endLine": 2310,
                            "startColumn": 34,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2309,
                            "endLine": 2309,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2304,
                            "endLine": 2304,
                            "startColumn": 21,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2304,
                            "endLine": 2304,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2304,
                            "endLine": 2304,
                            "startColumn": 49,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2299,
                            "endLine": 2299,
                            "startColumn": 14,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2299,
                            "endLine": 2299,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2299,
                            "endLine": 2299,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2297,
                            "endLine": 2297,
                            "startColumn": 14,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2051,
                            "endLine": 2051,
                            "startColumn": 20,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2050,
                            "endLine": 2050,
                            "startColumn": 50,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2049,
                            "endLine": 2049,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2047,
                            "endLine": 2047,
                            "startColumn": 18,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 25,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 49,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 49,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1604,
                            "endLine": 1604,
                            "startColumn": 17,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/InsecureSecret",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Insecure random data flows from nextInt and is used as a secret data. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Insecure random data {0} from {1} and is used as a {2}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27)",
              "[nextInt](28)",
              "[secret data](29)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1679,
                  "endLine": 1679,
                  "startColumn": 17,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "32975a10680c1d75dbaea32fb06954c4694b31192697f489aca2a84e311168a0",
            "1": "19689298.95cfea5c.dde3e251.e22980a8.ae63d11c.5bad41e8.2d656bd7.54d46e25.ccb12b86.d0a966f2.ff7d7469.772808f4.c0014e07.7fda7c5e.b71e182f.da76413e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1679,
                            "endLine": 1679,
                            "startColumn": 17,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1679,
                            "endLine": 1679,
                            "startColumn": 26,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1679,
                            "endLine": 1679,
                            "startColumn": 40,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1679,
                            "endLine": 1679,
                            "startColumn": 40,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1679,
                            "endLine": 1679,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1678,
                            "endLine": 1678,
                            "startColumn": 32,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1730,
                            "endLine": 1730,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1729,
                            "endLine": 1729,
                            "startColumn": 33,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1729,
                            "endLine": 1729,
                            "startColumn": 43,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1728,
                            "endLine": 1728,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1726,
                            "endLine": 1726,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1725,
                            "endLine": 1725,
                            "startColumn": 39,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2310,
                            "endLine": 2310,
                            "startColumn": 34,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2309,
                            "endLine": 2309,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2304,
                            "endLine": 2304,
                            "startColumn": 21,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2304,
                            "endLine": 2304,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2304,
                            "endLine": 2304,
                            "startColumn": 49,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2299,
                            "endLine": 2299,
                            "startColumn": 14,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2299,
                            "endLine": 2299,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2299,
                            "endLine": 2299,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2297,
                            "endLine": 2297,
                            "startColumn": 14,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2051,
                            "endLine": 2051,
                            "startColumn": 20,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2050,
                            "endLine": 2050,
                            "startColumn": 50,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2049,
                            "endLine": 2049,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2047,
                            "endLine": 2047,
                            "startColumn": 18,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 25,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 49,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 49,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1679,
                            "endLine": 1679,
                            "startColumn": 17,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[subprocess.check_output](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kafka-merge-pr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "startColumn": 18,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "41ba26d8bb249c0a33883d8834b401efbbb5f41df6797a76526bb872a97fd46b",
            "1": "26f1400e.6d7b0371.79e62dc9.536b825e.29c97757.a2b9e3b0.081ac3f4.ebed174f.a74ed3f0.04ad2656.e25dd4d1.f6463326.3c6e719e.4b9b0275.f590c1a6.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 1,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 47,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 46,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 13,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 42,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[subprocess.check_output](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "kafka-merge-pr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 18,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f322c586fca228af6f0640cc568d14d3a7159fdf28055617db97b91c43c8c3b",
            "1": "cbb24f10.b88e75ef.79e62dc9.f6463326.cc857d4e.ba14daf2.081ac3f4.8356f9c3.a74ed3f0.04ad2656.e25dd4d1.f6463326.3c6e719e.4b9b0275.f590c1a6.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 1,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 47,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 46,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 13,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 42,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 42,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "kafka-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[subprocess.check_output](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 18,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "be107bd15f100f099eb9d8e82e5f28fe061fe2648d6b81a4d0d1b382595be41f",
            "1": "5a1e4966.04ad2656.f7ee2f22.139c59a8.cc71c19d.ba14daf2.ec8b08f5.8794408a.5a1e4966.04ad2656.42f4f9d3.f6463326.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 1,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 60,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 36,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[subprocess.check_output](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 216,
                  "endLine": 216,
                  "startColumn": 20,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ffcdb8918d01726761ff22780053af13e1832b9b18aa85cf532b73948990f83",
            "1": "a6b41d6e.3f6176f1.79e62dc9.72162c22.4c86cd6c.ba14daf2.10427466.f46ed94e.5cf17ed7.3f6176f1.79e62dc9.72162c22.4c86cd6c.f0c9cd6e.10427466.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 27,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 11,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 216,
                            "endLine": 216,
                            "startColumn": 56,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 216,
                            "endLine": 216,
                            "startColumn": 31,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 16,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 36,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 12,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8)",
              "[subprocess.check_output](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 509,
                  "endLine": 509,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67cb012b8bbe62be4886ff2ebdedd53cbb0cfd085a2943e4fd995c54afec2234",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.f40eb707.42f4f9d3.40d229da.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 1,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 60,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 36,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[subprocess.check_output](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 592,
                  "endLine": 592,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38e7e1a802782b370cae8760e905747dbafb5f36a754dd451df9870dd1808a3c",
            "1": "5a1e4966.d39da7df.63890b1a.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.f40eb707.42f4f9d3.40d229da.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 592,
                            "endLine": 592,
                            "startColumn": 58,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 592,
                            "endLine": 592,
                            "startColumn": 35,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22)",
              "[subprocess.check_output](23)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 618,
                  "endLine": 618,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a9a494967bf4effd5e591a4b239816d303274bec0fd978d93da3091fe95eddd2",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.40d229da.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 1,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 587,
                            "endLine": 587,
                            "startColumn": 39,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 85,
                            "endColumn": 94
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 595,
                            "endLine": 595,
                            "startColumn": 82,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 617,
                            "endLine": 617,
                            "startColumn": 79,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 67,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 66,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 26,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24)",
              "[subprocess.check_output](25)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 620,
                  "endLine": 620,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5fb38abb591a7a94e623045a4812d06a6495146eca37a49fc19d878e3beb1ac3",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.40d229da.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 1,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 587,
                            "endLine": 587,
                            "startColumn": 39,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 85,
                            "endColumn": 94
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 595,
                            "endLine": 595,
                            "startColumn": 82,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 617,
                            "endLine": 617,
                            "startColumn": 79,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 67,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 619,
                            "endLine": 619,
                            "startColumn": 63,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 57,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 56,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 21,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30)",
              "[subprocess.check_output](31)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 627,
                  "endLine": 627,
                  "startColumn": 5,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7654fffd9b3bbc5f23c38444669c27d33d37e85305813fea871b7710f7bd87b",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.c9b98ad1.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 82,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 1,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 78,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 68,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 622,
                            "endLine": 622,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 5,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 624,
                            "endLine": 624,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 115,
                            "endColumn": 124
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 115,
                            "endColumn": 133
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 33,
                            "endColumn": 161
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33)",
              "[subprocess.check_output](34)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 628,
                  "endLine": 628,
                  "startColumn": 5,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d1300d342b2c77200f2181d87a35c468ab329ef0bb192a04155b171b379cbce",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.40d229da.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 82,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 1,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 78,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 68,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 622,
                            "endLine": 622,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 5,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 624,
                            "endLine": 624,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 115,
                            "endColumn": 124
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 151,
                            "endColumn": 160
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 55,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 35,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38)",
              "[subprocess.check_output](39)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 633,
                  "endLine": 633,
                  "startColumn": 5,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "268da4b1b56ac8144d2ac9daec507043d376b1b269c814ea41255414c2058621",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.f6463326.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 82,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 1,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 78,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 68,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 622,
                            "endLine": 622,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 5,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 624,
                            "endLine": 624,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 115,
                            "endColumn": 124
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 151,
                            "endColumn": 160
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 75,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 80,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 79,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 44,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40)",
              "[subprocess.check_output](41)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 634,
                  "endLine": 634,
                  "startColumn": 5,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f37f4e78847fd6907fdc4d7d74247636d95920bdb2d0bb96c2acd2767e2bbc9",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.f6463326.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 82,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 1,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 78,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 68,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 622,
                            "endLine": 622,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 5,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 624,
                            "endLine": 624,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 115,
                            "endColumn": 124
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 151,
                            "endColumn": 160
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 75,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 80,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 87,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 83,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 82,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 45,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42)",
              "[subprocess.check_output](43)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 635,
                  "endLine": 635,
                  "startColumn": 5,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2a459a724cc479d5b815c72346dd3a6cc0f72e8cda0d3bd20495f59045bf409a",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.f6463326.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 82,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 1,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 78,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 68,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 622,
                            "endLine": 622,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 623,
                            "endLine": 623,
                            "startColumn": 5,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 624,
                            "endLine": 624,
                            "startColumn": 27,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 115,
                            "endColumn": 124
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 627,
                            "endLine": 627,
                            "startColumn": 151,
                            "endColumn": 160
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 75,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 10,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 80,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 87,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 83,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 90,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 635,
                            "endLine": 635,
                            "startColumn": 89,
                            "endColumn": 94
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 635,
                            "endLine": 635,
                            "startColumn": 88,
                            "endColumn": 102
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 635,
                            "endLine": 635,
                            "startColumn": 47,
                            "endColumn": 102
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24)",
              "[subprocess.check_output](25)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 637,
                  "endLine": 637,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dc10bf44f5e8f792bdb9bae9c7509949093c1e01123e10e926cea4dda2f79d67",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.40d229da.7a2c7963.d21bd15b.16f2c462.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 25,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 12,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 1,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 82,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 1,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 78,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 620,
                            "endLine": 620,
                            "startColumn": 68,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 622,
                            "endLine": 622,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 637,
                            "endLine": 637,
                            "startColumn": 55,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 637,
                            "endLine": 637,
                            "startColumn": 42,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[subprocess.check_output](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 704,
                  "endLine": 704,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce23a959764e7735779a959796948711a85b8052407477d2f5b715b7a4f565c2",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.f40eb707.42f4f9d3.40d229da.7a2c7963.4d0bd811.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 1,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 509,
                            "endLine": 509,
                            "startColumn": 60,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 92,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 42,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 23,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)",
              "[subprocess.check_output](26)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140,
                  "startColumn": 12,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8f66025ab3416b5f03007eb3422606e189c20da466c632d5ddc39547a7260ebe",
            "1": "800eb1b9.d1358c22.79e62dc9.72162c22.29c97757.a2b9e3b0.f904c8ec.8794408a.5a1e4966.04ad2656.42f4f9d3.9711c19d.7a2c7963.d21bd15b.ec8b08f5.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 1,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 67,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 81,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 576,
                            "endLine": 576,
                            "startColumn": 50,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 576,
                            "endLine": 576,
                            "startColumn": 25,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 16,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 36,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 12,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[subprocess.check_output](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 335,
                  "endLine": 335,
                  "startColumn": 34,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e1bd0f91190ba43d1e56295892fd73f42a5c42c98b34ed441da1279e893628ed",
            "1": "16691f08.6a0e600c.7a09bac6.139c59a8.146bf8fd.73cfdf26.081ac3f4.6aac30d8.cb185b39.bae8fc77.c38880dc.dc55fb56.24a9686f.0edf86bf.a2237efa.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 331,
                            "endLine": 331,
                            "startColumn": 9,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 332,
                            "endLine": 332,
                            "startColumn": 30,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 333,
                            "startColumn": 30,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 186,
                            "endColumn": 214
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 185,
                            "endColumn": 236
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 58,
                            "endColumn": 236
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 34,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[subprocess.check_output](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 336,
                  "endLine": 336,
                  "startColumn": 20,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "18358043c9b2796970aef579c5f0b17688e96cacfc97f3969d6a44afbbc50a7a",
            "1": "16691f08.6c25d09b.e725aa9a.139c59a8.146bf8fd.73cfdf26.081ac3f4.6aac30d8.cb185b39.bae8fc77.c38880dc.dc55fb56.24a9686f.0edf86bf.a2237efa.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 331,
                            "endLine": 331,
                            "startColumn": 9,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 332,
                            "endLine": 332,
                            "startColumn": 30,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 333,
                            "startColumn": 30,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 335,
                            "endLine": 335,
                            "startColumn": 186,
                            "endColumn": 214
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 196,
                            "endColumn": 224
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 195,
                            "endColumn": 246
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 44,
                            "endColumn": 246
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 336,
                            "endLine": 336,
                            "startColumn": 20,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[subprocess.check_output](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 559,
                  "endLine": 559,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "84764c266abb3a83c0078cba3035768515d938089ee23802218deac6a06d71ad",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.9711c19d.7a2c7963.4d0bd811.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 75,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 74,
                            "endColumn": 128
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 48,
                            "endColumn": 128
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22)",
              "[subprocess.check_output](23)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 573,
                  "endLine": 573,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1bdf8be8f30882cfe060c6f9b2c69ad13e5193be381c3c9468ebe3ab1650790f",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.42d5b847.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 75,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 561,
                            "endLine": 561,
                            "startColumn": 56,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 562,
                            "endLine": 562,
                            "startColumn": 78,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 571,
                            "endLine": 571,
                            "startColumn": 53,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 573,
                            "endLine": 573,
                            "startColumn": 95,
                            "endColumn": 110
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 573,
                            "endLine": 573,
                            "startColumn": 72,
                            "endColumn": 110
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 573,
                            "endLine": 573,
                            "startColumn": 42,
                            "endColumn": 111
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[subprocess.check_output](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 575,
                  "endLine": 575,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "60f6354ece83796a63b1513062216b40985c65e43ac22f65fe26a0e6e44959f6",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 1,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 67,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 46,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27)",
              "[subprocess.check_output](28)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 590,
                  "endLine": 590,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb15a0949f8025886d972086fe1507df27eeb0ed102ef61a5707c8c307444550",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 1,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 67,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 81,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 576,
                            "endLine": 576,
                            "startColumn": 50,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 1,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 63,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 52,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23)",
              "[subprocess.check_output](24)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 593,
                  "endLine": 593,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "024963e833187c4dfcfc45f64d1a33a446546a15f9fa7ccc0f4341b9035abdc0",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.42d5b847.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 75,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 561,
                            "endLine": 561,
                            "startColumn": 56,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 562,
                            "endLine": 562,
                            "startColumn": 78,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 571,
                            "endLine": 571,
                            "startColumn": 53,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 573,
                            "endLine": 573,
                            "startColumn": 95,
                            "endColumn": 110
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 55,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 54,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 28,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28)",
              "[subprocess.check_output](29)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 615,
                  "endLine": 615,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aba53fa2ba9b473de76842b2066c652d2c1c24e710bcbdb6fe069116b1c60cb9",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.42d5b847.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 75,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 561,
                            "endLine": 561,
                            "startColumn": 56,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 562,
                            "endLine": 562,
                            "startColumn": 78,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 571,
                            "endLine": 571,
                            "startColumn": 53,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 573,
                            "endLine": 573,
                            "startColumn": 95,
                            "endColumn": 110
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 55,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 600,
                            "endLine": 600,
                            "startColumn": 70,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 31,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 12,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 614,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 614,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 615,
                            "startColumn": 170,
                            "endColumn": 176
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 615,
                            "startColumn": 32,
                            "endColumn": 176
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30)",
              "[subprocess.check_output](31)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 639,
                  "endLine": 639,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9dc97d23d2150857d11a5e523b694bbb0f4249f0552d18da18dee5b5338550fc",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.04ad2656.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 1,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 67,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 81,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 576,
                            "endLine": 576,
                            "startColumn": 50,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 1,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 63,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 639,
                            "endLine": 639,
                            "startColumn": 53,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 639,
                            "endLine": 639,
                            "startColumn": 52,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 639,
                            "endLine": 639,
                            "startColumn": 26,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from user input flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[user input](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29)",
              "[subprocess.check_output](30)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "release.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 708,
                  "endLine": 708,
                  "startColumn": 1,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c3d7b66cec5b64016cf63dff1a23c7677d97ee36bb0f74242477f022d89fe8de",
            "1": "5a1e4966.d39da7df.490b73c6.40d229da.cc71c19d.d21bd15b.fbfa138c.8c2d861b.5a1e4966.42d5b847.42f4f9d3.9711c19d.7a2c7963.d21bd15b.fbfa138c.8c2d861b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 317,
                            "endLine": 317,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 12,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 1,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 303,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 506,
                            "endLine": 506,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 512,
                            "endLine": 512,
                            "startColumn": 4,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 556,
                            "endLine": 556,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 75,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 561,
                            "endLine": 561,
                            "startColumn": 56,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 562,
                            "endLine": 562,
                            "startColumn": 78,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 571,
                            "endLine": 571,
                            "startColumn": 53,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 573,
                            "endLine": 573,
                            "startColumn": 95,
                            "endColumn": 110
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 55,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 600,
                            "endLine": 600,
                            "startColumn": 70,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 31,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 46,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 84,
                            "endColumn": 99
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 652,
                            "endLine": 652,
                            "startColumn": 51,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 708,
                            "endLine": 708,
                            "startColumn": 34,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 708,
                            "endLine": 708,
                            "startColumn": 72,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 708,
                            "endLine": 708,
                            "startColumn": 51,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "release.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/NoHardcodedCredentials/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1039,
                  "endLine": 1039,
                  "startColumn": 20,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e4b5f8002cc928b29a71fbc33149d2ad3253562e4d637af0ed91790739f7fc1a",
            "1": "7aa9a9af.886d5ad7.5fd94877.cac289c4.4b1c25b6.c4a0045a.b9f7aa10.1204302f.7aa9a9af.886d5ad7.bd65d204.cac289c4.4b1c25b6.c4a0045a.b9f7aa10.1204302f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1039,
                            "endLine": 1039,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/NoHardcodedCredentials/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 20,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4a2f3b8ff0e51ffd29feac172b220f6e570b8ba97aa2fdd945b2c7140e61b5b7",
            "1": "7aa9a9af.886d5ad7.8e3a0e6a.25a1f507.4b1c25b6.bd862794.401243c6.1204302f.873f78b4.886d5ad7.8e3a0e6a.25a1f507.4b1c25b6.bd862794.401243c6.1204302f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/zk/migration/ZkAclMigrationClientTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/NoHardcodedCredentials/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/unit/kafka/server/DescribeUserScramCredentialsRequestTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95,
                  "startColumn": 16,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "757009a085daa02bc5b51ad17a16a4c98061adc0400385fab2e2f9656d6572df",
            "1": "839b1d0f.e7d69cc8.5fd94877.a4c06688.4b1c25b6.ae861c18.d80bd6b8.62615d74.839b1d0f.e7d69cc8.8e3a0e6a.a4c06688.4b1c25b6.c4a0045a.d80bd6b8.71a2c14b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/unit/kafka/server/DescribeUserScramCredentialsRequestTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "scala/NoHardcodedCredentials/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/scala/integration/kafka/zk/ZkMigrationIntegrationTest.scala",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 20,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8c15661cfde64b7dde199a7bd0a2bb30f4915e339c4e2bcc8edc7da87a0e195",
            "1": "7aa9a9af.886d5ad7.8e3a0e6a.25a1f507.4b1c25b6.bd862794.401243c6.1204302f.873f78b4.886d5ad7.8e3a0e6a.25a1f507.4b1c25b6.bd862794.401243c6.1204302f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/scala/integration/kafka/zk/ZkMigrationIntegrationTest.scala",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "XML",
            "files": 13,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 4261,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 28,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Scala",
            "files": 632,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 148,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 32,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "Java",
            "files": 3,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

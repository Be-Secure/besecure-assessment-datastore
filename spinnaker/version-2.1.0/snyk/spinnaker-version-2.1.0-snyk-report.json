{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                    "lines": [
                      {
                        "line": "from flask import abort, request, Response, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.json import jsonify\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from shutil import copyfileobj\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tempfile import NamedTemporaryFile\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "from xspf import Xspf\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..app import app, music\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..id3 import MP3\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "JSON_TYPE = 'application/json'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Mapping: Google : Mutagen EasyID3\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "METADATA_FIELDS = {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'artist': 'artist',\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'title': 'title',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'album': 'album',\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'albumArtist': 'albumartistsort',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'composer': 'composer',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'trackNumber': 'tracknumber',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'discNumber': 'discnumber',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'genre': 'genre',\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'year': 'date',\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'durationMillis': 'length',\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def mp3ify(resp):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.mimetype = 'audio/mpeg'\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return resp\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "def send_song(filename):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return mp3ify(send_file(filename))\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :type playlist: dict\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :rtype: str\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date=create_iso, location=p_url)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for track in playlist['tracks']:\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'track' not in track:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tmd = track['track']\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        metadata = {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'location': url,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': tmd['title'],\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'creator': tmd['artist'],\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'album': tmd['album'],\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'trackNum': str(tmd['trackNumber']),\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'duration': tmd['durationMillis'],\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        album_art = tmd.get('albumArtRef', [])\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if album_art:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            metadata['image'] = album_art[0]['url']\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xspf.add_track(metadata)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return xspf.toXml()\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/songs/<song_id>')\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_song(song_id):\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # rather than \"application/x-rar\"\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # check file type via mime type\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            os.remove(filepath)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/no~hostname~verification/test",
              "name": "no~hostname~verification/test",
              "shortDescription": {
                "text": "no~hostname~verification/test"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "no~hostname~verification",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "python/TarSlip/test",
              "name": "TarSlip/test",
              "shortDescription": {
                "text": "Arbitrary File Write via Archive Extraction (Tar Slip)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nZip Slip is a form of directory traversal that can be exploited by extracting files from an archive. The premise of the directory traversal vulnerability is that an attacker can gain access to parts of the file system outside of the target folder in which they should reside. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim’s machine. The vulnerability can also cause damage by overwriting configuration files or other sensitive resources, and can be exploited on both client (user) machines and servers.\n\n## Example\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "TarSlip",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-22"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[open](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "unittest/buildtool/branch_scm_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a9033ea8361359e2e7884aefcb10dc14950d6d3e785ff3138b958ef34334640e",
            "1": "9d0461a3.67df6de4.187bf175.22222ad5.f3eda546.e280548d.081ac3f4.d62b86e0.0904f0f3.3ecb8227.ea6f85fb.b38ad66b.4608c58f.70f0200b.d26fceeb.4753dc12"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 3,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 5,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 208,
                            "endLine": 208,
                            "startColumn": 5,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 35,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 11,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 5,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 18,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 18,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 215,
                            "startColumn": 5,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 216,
                            "endLine": 216,
                            "startColumn": 33,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 37,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 55,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 220,
                            "endLine": 220,
                            "startColumn": 55,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 28,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "unittest/buildtool/branch_scm_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 375,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/no~hostname~verification/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Using context that has been passed from ssl._create_unverified_context will result with no hostname verification.",
            "markdown": "Using context that has been passed from {0} will result with no hostname verification.",
            "arguments": [
              "[ssl._create_unverified_context](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testing/citest/spinnaker_testing/scrape_spring_config.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105,
                  "startColumn": 15,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "23a913ebe55a028e38240765de49479537154b2357378f959ca6039943a3235b",
            "1": "8a9351cb.ae949b01.79e62dc9.139c59a8.a62d072b.be3df3bc.b69c6615.1dea1eef.8a9351cb.ae949b01.79e62dc9.139c59a8.a62d072b.be3df3bc.b69c6615.1dea1eef"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/scrape_spring_config.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 15,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 200,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/no~hostname~verification/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Using context that has been passed from ssl._create_unverified_context will result with no hostname verification.",
            "markdown": "Using context that has been passed from {0} will result with no hostname verification.",
            "arguments": [
              "[ssl._create_unverified_context](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dev/validate_bom__test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 639,
                  "endLine": 639,
                  "startColumn": 19,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c640b85eb9fe76d79ad85e9fee6100f98ecc3280f9377901892062ce733a6559",
            "1": "8a9351cb.ae949b01.79e62dc9.139c59a8.a62d072b.be3df3bc.b69c6615.1dea1eef.8a9351cb.ae949b01.79e62dc9.139c59a8.a62d072b.be3df3bc.b69c6615.1dea1eef"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev/validate_bom__test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 639,
                            "endLine": 639,
                            "startColumn": 19,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 200,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TarSlip/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment variable flows into extractfile, where it is used to extract a file from a tar archive. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used to extract a file from a tar archive. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[extractfile](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 651,
                  "endLine": 651,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2578756ff52c9ed1ebfc73dd08059607076e87d67868d609a9f99c67d29a14dd",
            "1": "1850888a.4d629d26.3673de87.15dcaf24.cb6ba951.ba14daf2.381d14bf.2b256a48.c9500685.ee602ff5.8f62c327.2c1ce0da.cb6ba951.73cfdf26.381d14bf.2b256a48"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 16,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 16,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 5,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 645,
                            "endLine": 645,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 646,
                            "endLine": 646,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 646,
                            "endLine": 646,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 646,
                            "endLine": 646,
                            "startColumn": 7,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 646,
                            "endLine": 646,
                            "startColumn": 7,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 19,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testing/citest/spinnaker_testing/spinnaker.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 651,
                            "endLine": 651,
                            "startColumn": 17,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 175,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 6,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 144,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Python",
            "files": 5,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 3,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

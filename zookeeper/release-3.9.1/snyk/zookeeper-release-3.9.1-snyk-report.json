{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/UsageOfUnencryptedSocket/test",
              "name": "UsageOfUnencryptedSocket/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "UsageOfUnencryptedSocket",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/SmartBear/soapui/commit/98ce7aeaac98963795d4ebf22f673b64032fe572?diff=split#diff-c6679790ed47144c981b0f64cf5abe08d625880b9a6eb64cf9f6373a2ab84c83L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocket;\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.servlet.ServletException;\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Request;\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Response;\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.util.IO;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class Server extends org.mortbay.jetty.Server\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic void handle(final org.mortbay.jetty.HttpConnection connection) throws IOException, ServletException\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t{\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Request request = connection.getRequest();\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif (!request.getMethod().equals(\"CONNECT\"))\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t{\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tsuper.handle(connection);\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String uri = request.getUri().toString();\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal int c = uri.indexOf(':');\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String port = uri.substring(c + 1);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String host = uri.substring(0, c);\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InetSocketAddress inetAddress = new InetSocketAddress(host, Integer.parseInt(port));\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket clientSocket = connection.getEndPoint().getTransport() instanceof Socket ? (Socket) connection\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t.getEndPoint().getTransport() : ((SocketChannel) connection.getEndPoint().getTransport()).socket();\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InputStream in = clientSocket.getInputStream();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal OutputStream out = clientSocket.getOutputStream();\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket socket = new Socket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfinal SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Response response = connection.getResponse();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.setStatus(200);\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "//\t\tresponse.setHeader(\"Connection\", \"close\");\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.flushBuffer();\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tIO.copyThread(socket.getInputStream(), out);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketOut = socket.getOutputStream();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CommandInjection",
                  "Security",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Xcal1bur/Giter/commit/cd3cb5a9a8a2b20d38d76350dce71d5ce4c1ae52?diff=split#diff-5525cbff62ceafe31dc99d746001579986f2348868bf4da54771d6a54259e3f7L-1",
                    "lines": [
                      {
                        "line": "    subprocess.run(f\"git remote add origin git@github.com:{username}/{repo_name}.git\", shell=True)\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git pull origin master:master\", shell=True)\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git rebase origin/master\", shell=True)\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "subprocess.run(\"git push -u origin master\", shell=True)\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.run([\"git\", \"remote\", \"add\", \"origin\", f\"git@github.com:{username}/{repo_name}.git\"])\n",
                        "lineNumber": 112,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"pull\", \"origin\", \"master:master\"])\n",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"rebase\", \"origin/master\"])\n",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "subprocess.run([\"git\", \"push\", \"-u\", \"origin\", \"master\"])\n",
                        "lineNumber": 115,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lammps/lammps/commit/22f99be57e6e97754bb9f1ee264b7dd844916fda?diff=split#diff-4e7cc7a44b4b4f346493d07636004e210db6bc3f4ec9e0652aa5c7408360f27aL-1",
                    "lines": [
                      {
                        "line": "import sys,os,re,subprocess\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import sys,os,re,subprocess,shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "# help message\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "help = \"\"\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from src dir: make lib-scafacos args=\"-b\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: make lib-scafacos args=\"-p /usr/local/scafacos\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "Syntax from lib dir: python Install.py -b\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 or: python Install.py -p /usr/local/scafacos\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "specify zero or more options, order does not matter\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -b = download and build the Scafacos library\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  -p = specify folder of existing Scafacos installation\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "   always creates includelink, liblink to Scafacos dirs\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "Example:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-b\"   # download/build in lib/scafacos/scafacos\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "make lib-scafacos args=\"-p $HOME/scafacos\" # use existing Scafacos installation in $HOME\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "# settings\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "version = \"scafacos-1.0.1\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "url = \"https://github.com/scafacos/scafacos/releases/download/v1.0.1/scafacos-1.0.1.tar.gz\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "#url = \"https://gigamove.rz.rwth-aachen.de/d/id/CTzyApN76MXMJ6/dd/100\" % version\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "# print error message or help\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "def error(str=None):\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not str: print(help)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: print(\"ERROR\",str)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sys.exit()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "# expand to full path name\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "# process leading '~' or relative path\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "def fullpath(path):\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return os.path.abspath(os.path.expanduser(path))\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "def which(program):\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  def is_exe(fpath):\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fpath, fname = os.path.split(program)\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if fpath:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if is_exe(program):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return program\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for path in os.environ[\"PATH\"].split(os.pathsep):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      path = path.strip('\"')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "      exe_file = os.path.join(path, program)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if is_exe(exe_file):\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return exe_file\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return None\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "def geturl(url,fname):\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  success = False\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if which('curl') != None:\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'curl -L -o \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling curl failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success and which('wget') != None:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'wget -O \"%s\" %s' % (fname,url)\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Wget command: %s\" % cmd)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      success = True\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except subprocess.CalledProcessError as e:\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "      print(\"Calling wget failed with: %s\" % e.output.decode('UTF-8'))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if not success:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Failed to download source code with 'curl' or 'wget'\")\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "# parse args\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "args = sys.argv[1:]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "nargs = len(args)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = \".\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "buildflag = True \n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "pathflag = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "linkflag = True\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "iarg = 0\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "while iarg < nargs:\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if args[iarg] == \"-v\":\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    version = args[iarg+1]\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-p\":\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if iarg+2 > nargs: error()\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scafacospath = fullpath(args[iarg+1])\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    pathflag = True\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 2\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  elif args[iarg] == \"-b\":\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    buildflag = True\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    iarg += 1\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else: error()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "homepath = fullpath(homepath)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "homedir = \"%s/%s\" % (homepath,version)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathflag):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.isdir(scafacospath): error(\"Scafacos path does not exist\")\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    homedir =scafacospath\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (buildflag and pathflag):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "    error(\"Cannot use -b and -p flag at the same time\")\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "# download and unpack Scafacos tarball\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "if buildflag:\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Downloading Scafacos ...\")\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  geturl(url,\"%s/%s.tar.gz\" % (homepath,version))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  print(\"Unpacking Scafacos tarball ...\")\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if os.path.exists(\"%s/%s\" % (homepath,version)):\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cmd = 'rm -rf \"%s/%s\"' % (homepath,version)\n",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                        "lineNumber": 135,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shutil.rmtree(\"%s/%s\" % (homepath,version))\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jachinlin/kindle_maker/commit/8804b85a69865837d31e37bdf73e01844229c5bc?diff=split#diff-00e2b2a85960fbf3f1969c885888cbc0aefd4e01c24e7fc34e1fecc94429f7b3L-1",
                    "lines": [
                      {
                        "line": "import shutil\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from jinja2 import Environment, FileSystemLoader\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "templates_env = Environment(loader=FileSystemLoader('%s/templates/' % os.path.dirname(os.path.realpath(__file__))))\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "_default_output_dir = '/tmp/kindle_maker/'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_file(template_name, context, output_name, output_dir):\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    template = templates_env.get_template(template_name)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(os.path.join(output_dir, output_name), \"w\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f.write(template.render(**context))\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_ncx(headers, output_dir, title=None, author=None):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file(\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.xml',\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'headers': headers,\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': title or 'jachinlin.github.io' + str(datetime.date.today()),\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'author': author or 'jachinlin.github.io'\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        },\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'toc.ncx',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        output_dir\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_toc_html(headers, output_dir):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('toc.html', {'headers': headers}, 'toc.html', output_dir)\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def render_opf(headers, title, output_dir, author=None):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param headers:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param title:\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param author:\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    render_file('opf.xml', {'headers': headers, 'title': title,\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            'author': author or 'jachinlin.github.io'}, '{}.opf'.format(title), output_dir)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "def parse_headers(toc_file_name):\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param toc_file_name:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    headers_info = []\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(toc_file_name) as f:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        headers = f.readlines()\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        order = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not headers:\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title_line = 0\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        while (not headers[title_line].strip()) or title_line == len(headers):\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            title_line += 1\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if title_line == len(headers):\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None, None\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title = headers[title_line].strip()\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for h in headers[title_line + 1:]:\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('# '):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info.append({\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'next_headers': []\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if h.startswith('## '):\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if len(headers) == 0:\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                order += 1\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                headers_info[-1]['next_headers'].append({\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'title': h[2:].strip(),\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'play_order': order,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return title, headers_info\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "def make_ebook(source_dir, output_dir=None):\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    make ebook with the files in source_dir and put the ebook made in output_dir\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param source_dir:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param output_dir:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output_dir = output_dir or _default_output_dir\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # make a tmp dir in output_dir\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmp_dir = os.path.join(output_dir, str(uuid.uuid4()))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"mkdir -p {}\".format(tmp_dir))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # copy source files to tmp dir\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"cp -rf {}/* {}\".format(source_dir, tmp_dir))\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # parse toc.md file\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toc_file_name = os.path.join(tmp_dir, 'toc.md')\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(toc_file_name):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('not exists toc md file')\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    title, headers = parse_headers(toc_file_name)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not title:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise ValueError('invalid toc md file')\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # cover\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cover_file_name = os.path.join(tmp_dir, 'cover.jpg')\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(cover_file_name):\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cover = '%s/templates/cover.jpg' % os.path.dirname(os.path.realpath(__file__))\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        os.system('cp %s %s' % (cover, tmp_dir))\n",
                        "lineNumber": 133,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        shutil.copy(cover, tmp_dir)\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 47,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket",
              "name": "UsageOfUnencryptedSocket",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "UsageOfUnencryptedSocket",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/SmartBear/soapui/commit/98ce7aeaac98963795d4ebf22f673b64032fe572?diff=split#diff-c6679790ed47144c981b0f64cf5abe08d625880b9a6eb64cf9f6373a2ab84c83L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocket;\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "import javax.servlet.ServletException;\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Request;\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.jetty.Response;\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.mortbay.util.IO;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class Server extends org.mortbay.jetty.Server\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic void handle(final org.mortbay.jetty.HttpConnection connection) throws IOException, ServletException\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t{\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Request request = connection.getRequest();\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif (!request.getMethod().equals(\"CONNECT\"))\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t{\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tsuper.handle(connection);\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String uri = request.getUri().toString();\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal int c = uri.indexOf(':');\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String port = uri.substring(c + 1);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal String host = uri.substring(0, c);\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InetSocketAddress inetAddress = new InetSocketAddress(host, Integer.parseInt(port));\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket clientSocket = connection.getEndPoint().getTransport() instanceof Socket ? (Socket) connection\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t.getEndPoint().getTransport() : ((SocketChannel) connection.getEndPoint().getTransport()).socket();\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal InputStream in = clientSocket.getInputStream();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal OutputStream out = clientSocket.getOutputStream();\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Socket socket = new Socket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfinal SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket(inetAddress.getAddress(), inetAddress.getPort());\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfinal Response response = connection.getResponse();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.setStatus(200);\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "//\t\tresponse.setHeader(\"Connection\", \"close\");\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tresponse.flushBuffer();\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tIO.copyThread(socket.getInputStream(), out);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Gocnak/Botnak/commit/14a30fa3499ad9f41f50ac4b2afeeef1b5aae773?diff=split#diff-05d95d78e3001cfaa0cbd571fedb93732922c7c8990bf59d63a7ef2a6e6bfe01L-1",
                    "lines": [
                      {
                        "line": "import javax.net.ssl.SSLSocketFactory;\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "import java.io.*;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.Socket;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.concurrent.ArrayBlockingQueue;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Created by Nick on 9/7/2015.\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class PircBotConnection {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InputThread _inputThread = null;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private OutputThread _outputThread = null;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ArrayBlockingQueue<String> _outQueue;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private PircBot bot;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private ConnectionType type;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private String _server, name;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public OutputThread getOutputThread() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outputThread;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ArrayBlockingQueue<String> getOutQueue()\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _outQueue;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBot getBot() {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return bot;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public void setName(String name)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = name;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public String getName() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public ConnectionType getType() {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return type;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private InetAddress _inetAddress = null;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public enum ConnectionType {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        NORMAL(6667, \"irc.chat.twitch.tv\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int port;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String[] hosts;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ConnectionType(int port, String... hosts) {\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.port = port;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this.hosts = hosts;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public PircBotConnection(PircBot bot, ConnectionType type) {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.bot = bot;\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.type = type;\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.name = bot.getNick();\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this._outQueue = new ArrayBlockingQueue<>(500, true); // I don't know if people will use more than 500 msgs\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Returns whether or not the PircBot is currently connected to a server.\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * The result of this method should only act as a rough guide,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * as the result may not be valid by the time you act upon it.\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "     *\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * @return True if and only if the PircBot is currently connected to a server.\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean isConnected() {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return _inputThread != null && _inputThread.isConnected();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean connect() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (isConnected()) {\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return false;\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        _server = type.hosts[Utils.random(0, type.hosts.length)];\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Connect to the server.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Socket socket;\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream socketIn;\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        OutputStream socketOut;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socket = new Socket(_server, type.port);\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            socket = SSLSocketFactory.getDefault().createSocket(_server, type.port);\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "            bot.log(\"*** Trying to connect to \" + _server + \" on port \" + getPort());\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketIn = socket.getInputStream();\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            socketOut = socket.getOutputStream();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "XSS",
                  "Security",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/clafonta/Mockey/commit/020ba75aef7b10b1d40cc210cf9251912f72e31a?diff=split#diff-47753d0273d9aac8e8d34d07580830b58698ae2cd2b387a021977e9ecd1c638fL-1",
                    "lines": [
                      {
                        "line": "\t\t        resp.setContentType(\"application/json\");\n",
                        "lineNumber": 306,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\tPrintWriter out = resp.getWriter();\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tString msg = \"Service plan \" + servicePlan.getName() + \" saved\";\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t// HACK: For redirect IF JavaScript decides to (if type is not\n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t// JSON)\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tif (!\"json\".equalsIgnoreCase(req.getParameter(API_SETPLAN_PARAMETER_TYPE))) {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t\tUtil.saveSuccessMessage(msg, req);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t}\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\t// JSON response\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tJSONObject jsonObject = new JSONObject();\n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonObject.put(\"success\", msg);\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonObject.put(\"planid\", \"\" + savedServicePlan.getId());\n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonObject.put(\"planName\", \"\" + savedServicePlan.getName());\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tjsonResultObject.put(\"result\", jsonObject);\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tout.println(jsonResultObject.toString());\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ctron/package-drone/commit/5ef92a7bab0d6943239e12fc0eeca39f73b5e67a?diff=split#diff-89b983f4d57516b117f9117a66fb26cec32bb80e19f8490d9543c7ef45030899L-1",
                    "lines": [
                      {
                        "line": "response.setContentType ( \"text/plain\" );\n",
                        "lineNumber": 150,
                        "lineChange": "added"
                      },
                      {
                        "line": "response.getWriter ().format ( \"Channel %s not found\", channelId );\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oracle/opengrok/commit/3ea25b76059c8f4891b04032915f28b433b9d6bd?diff=split#diff-7999331a5167ce439062921b37d0bedc26d377e1c0d62f9ff14a1d8e875bd6b4L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            resp.setContentType(\"application/json\");\n",
                        "lineNumber": 155,
                        "lineChange": "added"
                      },
                      {
                        "line": "            resp.getWriter().write(result.toString());\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 24,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "java/TLS/test",
              "name": "TLS/test",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TLS",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/aws-amplify/aws-sdk-android/commit/b58973df44347c971023f8b87812f9278c1caab2?diff=split#diff-ad4be49511cb480e12b110fdedc423600f27dec409db515519acc55bfa1e9ed0L-1",
                    "lines": [
                      {
                        "line": "final SSLContext context = SSLContext.getInstance(\"TLSv1\");\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final SSLContext context = SSLContext.getInstance(\"TLSv1.2\");\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/e33ed6b6a91b53856521197f8bf2fc89ee25512a?diff=split#diff-080d3c608f037e44c81caac827efa48875f563dd5fefb634bb2b7e9e03b51e63L-1",
                    "lines": [
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1\");\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1.2\");\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/47edb369dea77bfae1cb8b9f82a9435edff8294d?diff=split#diff-080d3c608f037e44c81caac827efa48875f563dd5fefb634bb2b7e9e03b51e63L-1",
                    "lines": [
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1\");\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final SSLContext sslContext = SSLContext.getInstance(\"TLSv1.2\");\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "java/TooPermissiveHostnameVerifier/test",
              "name": "TooPermissiveHostnameVerifier/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveHostnameVerifier",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "python/UnsupportedLanguage",
              "name": "UnsupportedLanguage",
              "shortDescription": {
                "text": "Python 2 source code"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nThe Python 2 interpreter has been unsupported since January 2020 and does not receive security updates.\nThese source files appear to be in the Python 2 syntax, and therefore depend on unsupported 3rd party components for operation.\n\n## Best practices for prevention\n* If this code is still in use, port it to Python 3",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "UnsupportedLanguage",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-1104"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Ssrf",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470?diff=split#diff-66aa82c274f41b59e09661e4d60fbf9dcb3465c466c1af64ca9826876bbbcef4L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.OutputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.InetAddress;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.URI;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.net.UnknownHostException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Attributes;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.JarOutputStream;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.jar.Manifest;\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.GZIPInputStream;\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.collections.map.CaseInsensitiveMap;\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceAudience;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.classification.InterfaceStability;\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.conf.Configuration;\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsAction;\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.fs.permission.FsPermission;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.IOUtils;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.io.nativeio.NativeIO;\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.Shell.ShellCommandExecutor;\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.apache.hadoop.util.StringUtils;\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.Logger;\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "import org.slf4j.LoggerFactory;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": " * A collection of file-processing util methods\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceAudience.Public\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "@InterfaceStability.Evolving\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /* The error code is defined in winutils to indicate insufficient\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * privilege to create symbolic links. This value need to keep in\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * sync with the constant of the same name in:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \"src\\winutils\\common.h\"\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * */\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static final int SYMLINK_NO_PRIVILEGE = 2;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats) {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return null;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path[] ret = new Path[stats.length];\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < stats.length; ++i) {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "      ret[i] = stats[i].getPath();\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ret;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * convert an array of FileStatus to an array of Path.\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If stats if null, return path\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param stats\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          an array of FileStatus objects\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param path\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          default path to return in stats is null\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return an array of paths corresponding to the input\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Path[] stat2Paths(FileStatus[] stats, Path path) {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (stats == null)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new Path[]{path};\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stat2Paths(stats);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Register all files recursively to be deleted on exit.\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file File/directory to be deleted\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDeleteOnExit(final File file) {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file.deleteOnExit();\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (file.isDirectory()) {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] files = file.listFiles();\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File child : files) {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        fullyDeleteOnExit(child);\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir) {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDelete(dir, false);\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete a directory and all its contents.  If\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (1) If dir is symlink to a file, the symlink is deleted. The file pointed\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     to by the symlink is not deleted.\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (2) If dir is symlink to a directory, symlink is deleted. The directory\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     pointed to by symlink is not deleted.\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (3) If dir is a normal file, it is deleted.\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * (4) If dir is a normal directory, then dir and all its contents recursively\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *     are deleted.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir the file or directory to be deleted\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions true if permissions should be modified to delete a file.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return true on success false on failure.\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDelete(final File dir, boolean tryGrantPermissions) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // try to chmod +rwx the parent folder of the 'dir': \n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File parent = dir.getParentFile();\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(parent);\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteImpl(dir, false)) {\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // dir is (a) normal file, (b) symlink to a file, (c) empty directory or\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // (d) symlink to a directory\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle nonempty directory deletion\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fullyDeleteContents(dir, tryGrantPermissions)) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteImpl(dir, true);\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns the target of the given symlink. Returns the empty string if\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * the given path does not refer to a symlink or there is an error\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * accessing the symlink.\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param f File representing the symbolic link.\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The target of the symbolic link, empty string on error or if not\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *         a symlink.\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String readLink(File f) {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /* NB: Use readSymbolicLink in java.nio.file.Path once available. Could\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * use getCanonicalPath in File to get the target of the symlink but that\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * does not indicate if the given path refers to a symlink.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "     */\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return Shell.execCommand(\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Shell.getReadlinkCommand(f.toString())).trim();\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (IOException x) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return \"\";\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /*\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Pure-Java implementation of \"chmod +rwx f\".\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void grantPermissions(final File f) {\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setExecutable(f, true);\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setReadable(f, true);\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileUtil.setWritable(f, true);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean deleteImpl(final File f, final boolean doLog) {\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f == null) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"null file argument.\");\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean wasDeleted = f.delete();\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (wasDeleted) {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final boolean ex = f.exists();\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (doLog && ex) {\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "      LOG.warn(\"Failed to delete file or dir [\"\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          + f.getAbsolutePath() + \"]: it still exists.\");\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !ex;\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir) {\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fullyDeleteContents(dir, false);\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Delete the contents of a directory, not the directory itself.  If\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * we return false, the directory may be partially-deleted.\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * If dir is a symlink to a directory, all the contents of the actual\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * directory pointed to by dir will be deleted.\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param tryGrantPermissions if 'true', try grant +rwx permissions to this \n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * and all the underlying directories before trying to delete their contents.\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean fullyDeleteContents(final File dir, final boolean tryGrantPermissions) {\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (tryGrantPermissions) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // to be able to list the dir and delete files from it\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "      // we must grant the dir rwx permissions: \n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "      grantPermissions(dir);\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean deletionSucceeded = true;\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final File[] contents = dir.listFiles();\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (contents != null) {\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!deleteImpl(contents[i], true)) {// normal file or symlink to another file\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue; // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Either directory or symlink to another directory.\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Try deleting the directory as this might be a symlink\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "          boolean b = false;\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "          b = deleteImpl(contents[i], false);\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (b){\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //this was indeed a symlink or an empty directory\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue;\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // if not an empty directory or symlink let\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // fullydelete handle it.\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!fullyDelete(contents[i], tryGrantPermissions)) {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            deletionSucceeded = false;\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // continue deletion of other files/dirs under dir\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deletionSucceeded;\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete a directory.\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param fs {@link FileSystem} on which the path is present\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir directory to recursively delete \n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @deprecated Use {@link FileSystem#delete(Path, boolean)}\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void fullyDelete(FileSystem fs, Path dir) \n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fs.delete(dir, true);\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // If the destination is a subdirectory of the source, then\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // generate exception\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static void checkDependencies(FileSystem srcFS, \n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path src, \n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        FileSystem dstFS, \n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        Path dst)\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        throws IOException {\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcFS == dstFS) {\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (dstq.startsWith(srcq)) {\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (srcq.length() == dstq.length()) {\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to itself.\");\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new IOException(\"Cannot copy \" + src + \" to its subdirectory \" +\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                dst);\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, src, dstFS, dst, deleteSource, true, conf);\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path[] srcs, \n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource, \n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite, Configuration conf)\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             throws IOException {\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean gotException = false;\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    boolean returnVal = true;\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder exceptions = new StringBuilder();\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcs.length == 1)\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return copy(srcFS, srcs[0], dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Check if dest is directory\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!sdst.isDirectory()) \n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new IOException(\"copying multiple files, but last argument `\" +\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              dst + \"' is not a directory\");\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "          \"`\" + dst + \"': specified destination directory \" +\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "              \"does not exist\", e);\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Path src : srcs) {\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!copy(srcFS, src, dstFS, dst, deleteSource, overwrite, conf))\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "          returnVal = false;\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "        gotException = true;\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(e.getMessage());\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "        exceptions.append(\"\\n\");\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (gotException) {\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(exceptions.toString());\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return returnVal;\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst, \n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus fileStatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, fileStatus, dstFS, dst, deleteSource, overwrite, conf);\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy files between FileSystems. */\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean overwrite,\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, overwrite);\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checkDependencies(srcFS, src, dstFS, dst);\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i], dstFS,\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new Path(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, overwrite, conf);\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in=null;\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out = null;\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = srcFS.open(src);\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst, overwrite);\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf, true);\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(out);\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream(in);\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Deprecated\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy all files in a directory to one output file (merge). */\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copyMerge(FileSystem srcFS, Path srcDir, \n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  FileSystem dstFS, Path dstFile, \n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  boolean deleteSource,\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  Configuration conf, String addString) throws IOException {\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!srcFS.getFileStatus(srcDir).isDirectory())\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return false;\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "   \n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OutputStream out = dstFS.create(dstFile);\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(srcDir);\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Arrays.sort(contents);\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (contents[i].isFile()) {\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "          InputStream in = srcFS.open(contents[i].getPath());\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "            IOUtils.copyBytes(in, out, conf, false);\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (addString!=null)\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "              out.write(addString.getBytes(\"UTF-8\"));\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } finally {\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "            in.close();\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } \n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "      out.close();\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(srcDir, true);\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }  \n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy local files to a FileSystem. */\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(File src,\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             FileSystem dstFS, Path dst,\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             boolean deleteSource,\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "    dst = checkDest(src.getName(), dstFS, dst, false);\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (src.isDirectory()) {\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dstFS.mkdirs(dst)) {\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File contents[] = listFiles(src);\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(contents[i], dstFS, new Path(dst, contents[i].getName()),\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (src.isFile()) {\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = null;\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "      OutputStream out =null;\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in = new FileInputStream(src);\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "        out = dstFS.create(dst);\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.copyBytes(in, out, conf);\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } catch (IOException e) {\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( out );\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        IOUtils.closeStream( in );\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw e;\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(src.toString() + \n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            \": No such file or directory\");\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return FileUtil.fullyDelete(src);\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static boolean copy(FileSystem srcFS, Path src, \n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             File dst, boolean deleteSource,\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Configuration conf) throws IOException {\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus filestatus = srcFS.getFileStatus(src);\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return copy(srcFS, filestatus, dst, deleteSource, conf);\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /** Copy FileSystem files to local files. */\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static boolean copy(FileSystem srcFS, FileStatus srcStatus,\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              File dst, boolean deleteSource,\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Configuration conf) throws IOException {\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path src = srcStatus.getPath();\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (srcStatus.isDirectory()) {\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!dst.mkdirs()) {\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileStatus contents[] = srcFS.listStatus(src);\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (int i = 0; i < contents.length; i++) {\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        copy(srcFS, contents[i],\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "             new File(dst, contents[i].getPath().getName()),\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "             deleteSource, conf);\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream in = srcFS.open(src);\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (deleteSource) {\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return srcFS.delete(src, true);\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return true;\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static Path checkDest(String srcName, FileSystem dstFS, Path dst,\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "      boolean overwrite) throws IOException {\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "    FileStatus sdst;\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = dstFS.getFileStatus(dst);\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (FileNotFoundException e) {\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "      sdst = null;\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (null != sdst) {\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (sdst.isDirectory()) {\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (null == srcName) {\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "          throw new PathIsDirectoryException(dst.toString());\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return checkDest(null, dstFS, new Path(dst, srcName), overwrite);\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else if (!overwrite) {\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new PathExistsException(dst.toString(),\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \"Target \" + dst + \" already exists\");\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return dst;\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param filename The filename to convert\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(String filename) throws IOException {\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filename;\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "  \n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file) throws IOException {\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return makeShellPath(file, false);\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Convert a os-native filename to a path that works for the shell.\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param file The filename to convert\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param makeCanonicalPath \n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          Whether to make canonical path for the file passed\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The unix pathname\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException on windows, there can be problems with the subprocess\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String makeShellPath(File file, boolean makeCanonicalPath) \n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "  throws IOException {\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (makeCanonicalPath) {\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.getCanonicalPath());\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return makeShellPath(file.toString());\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Takes an input dir and returns the du on that local directory. Very basic\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * implementation.\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * \n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param dir\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "   *          The input dir to get the disk space of this local dir\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @return The total disk space of the input local directory\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static long getDU(File dir) {\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    long size = 0;\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.exists())\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return 0;\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!dir.isDirectory()) {\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return dir.length();\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File[] allFiles = dir.listFiles();\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(allFiles != null) {\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "         for (int i = 0; i < allFiles.length; i++) {\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "           boolean isSymLink;\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "           try {\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "           } catch(IOException ioe) {\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "             isSymLink = true;\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "           if(!isSymLink) {\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "             size += getDU(allFiles[i]);\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "           }\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "         }\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return size;\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Given a File input it will unzip the file in a the unzip directory\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * passed as the second parameter\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param inFile The zip file as input\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @param unzipDir The unzip directory where to unzip the zip file.\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * @throws IOException\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<? extends ZipEntry> entries;\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipFile zipFile = new ZipFile(inFile);\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String targetDirPath = unzipDir.getCanonicalPath() + File.separator;\n",
                        "lineNumber": 622,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "      entries = zipFile.entries();\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "      while (entries.hasMoreElements()) {\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!entry.isDirectory()) {\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 629,
                        "lineChange": "added"
                      },
                      {
                        "line": "          if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "            throw new IOException(\"expanding \" + entry.getName()\n",
                        "lineNumber": 631,
                        "lineChange": "added"
                      },
                      {
                        "line": "                + \" would create file outside of \" + unzipDir);\n",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "          InputStream in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File file = new File(unzipDir, entry.getName());\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!file.getParentFile().mkdirs()) {\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!file.getParentFile().isDirectory()) {\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throw new IOException(\"Mkdirs failed to create \" + \n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "                          file.getParentFile().toString());\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "OutputStream out = new FileOutputStream(file);\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mockingbot/react-native-zip-archive/commit/74da5ecb3c61e96374857e7aa77ff99948e34270?diff=split#diff-bd4e482df53115aae45520ce6a60abd8d76390dcd9ed817375e437b9c312a408L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.PrintWriter;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.StringWriter;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Enumeration;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipInputStream;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipOutputStream;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.exception.ZipException;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.model.FileHeader;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import net.lingala.zip4j.progress.ProgressMonitor;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class RNZipArchiveModule extends ReactContextBaseJavaModule {\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = RNZipArchiveModule.class.getSimpleName();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final int BUFFER_SIZE = 4096;\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String PROGRESS_EVENT_NAME = \"zipArchiveProgressEvent\";\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_FILENAME = \"filePath\";\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String EVENT_KEY_PROGRESS = \"progress\";\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public RNZipArchiveModule(ReactApplicationContext reactContext) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super(reactContext);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getName() {\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return \"RNZipArchive\";\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void isPasswordProtected(final String zipFilePath, final Promise promise) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "      net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.resolve(zipFile.isEncrypted());\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (ZipException ex) {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "      promise.reject(null, String.format(\"Unable to check for encryption due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipWithPassword(final String zipFilePath, final String destDirectory,\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final String password, final Promise promise) {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "          net.lingala.zip4j.core.ZipFile zipFile = new net.lingala.zip4j.core.ZipFile(zipFilePath);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (zipFile.isEncrypted()) {\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.setPassword(password);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "          } else {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "            promise.reject(null, String.format(\"Zip file: %s is not password protected\", zipFilePath));\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List fileHeaderList = zipFile.getFileHeaders();\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "          List extractedFileNames = new ArrayList<>();\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "          int totalFiles = fileHeaderList.size();\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "          for (int i = 0; i < totalFiles; i++) {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            FileHeader fileHeader = (FileHeader) fileHeaderList.get(i);\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zipFile.extractFile(fileHeader, destDirectory);\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fileHeader.isDirectory()) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "              extractedFileNames.add(fileHeader.getFileName());\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(i + 1, totalFiles, zipFilePath);\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(Arguments.fromList(extractedFileNames));\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (ZipException ex) {\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Failed to unzip file, due to: %s\", getStackTrace(ex)));\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzip(final String zipFilePath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Check the file exists\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileInputStream inputStream = null;\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "          inputStream = new FileInputStream(zipFilePath);\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "          new File(zipFilePath);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (FileNotFoundException | NullPointerException e) {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (inputStream != null) {\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "              inputStream.close();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ignored) {\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Couldn't open file \" + zipFilePath + \". \");\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // Find the total uncompressed size of every file in the zip, so we can\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // get an accurate progress measurement\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long totalUncompressedBytes = getUncompressedSize(zipFilePath);\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "          File destDir = new File(destDirectory);\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if (!destDir.exists()) {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "            //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destDir.mkdirs();\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // We use arrays here so we can update values\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "          // from inside the callback\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final long[] extractedBytes = {0};\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final int[] lastPercentage = {0};\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final ZipFile zipFile = new ZipFile(zipFilePath);\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "          final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "          Log.d(TAG, \"Zip has \" + zipFile.size() + \" entries\");\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "          while (entries.hasMoreElements()) {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final ZipEntry entry = entries.nextElement();\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (entry.isDirectory()) continue;\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            StreamUtil.ProgressCallback cb = new StreamUtil.ProgressCallback() {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "              @Override\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "              public void onCopyProgress(long bytesRead) {\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                extractedBytes[0] += bytesRead;\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int lastTime = lastPercentage[0];\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                int percentDone = (int) ((double) extractedBytes[0] * 100 / (double) totalUncompressedBytes);\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                // update at most once per percent.\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (percentDone > lastTime) {\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  lastPercentage[0] = percentDone;\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  updateProgress(extractedBytes[0], totalUncompressedBytes, zipFilePath);\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!fout.exists()) {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "              (new File(fout.getParent())).mkdirs();\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            InputStream in = null;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedOutputStream Bout = null;\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try {\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in = zipFile.getInputStream(entry);\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout = new BufferedOutputStream(new FileOutputStream(fout));\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "              StreamUtil.copy(in, Bout, cb);\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "              Bout.close();\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "              in.close();\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } catch (IOException ex) {\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (in != null) {\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  in.close();\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (Bout != null) {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  Bout.close();\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                } catch (Exception ignored) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "          zipFile.close();\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(1, 1, zipFilePath); // force 100%\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.resolve(destDirectory);\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (Exception ex) {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "          updateProgress(0, 1, zipFilePath); // force 0%\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, \"Failed to extract file \" + ex.getLocalizedMessage());\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }).start();\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a zip held in the assets directory.\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Note that the progress value isn't as accurate as when unzipping\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * from a file. When reading a zip from a stream, we can't\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * get accurate uncompressed sizes for files (ZipEntry#getCompressedSize() returns -1).\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * <p>\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Instead, we compare the number of bytes extracted to the size of the compressed zip file.\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * In most cases this means the progress 'stays on' 100% for a little bit (compressedSize < uncompressed size)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @ReactMethod\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void unzipAssets(final String assetsPath, final String destDirectory, final Promise promise) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Thread(new Runnable() {\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "      @Override\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "      public void run() {\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "        InputStream assetsInputStream;\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        final long size;\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "          assetsInputStream = getReactApplicationContext().getAssets().open(assetsPath);\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "          AssetFileDescriptor fileDescriptor = getReactApplicationContext().getAssets().openFd(assetsPath);\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "          size = fileDescriptor.getLength();\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } catch (IOException e) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "          promise.reject(null, String.format(\"Asset file `%s` could not be opened\", assetsPath));\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return;\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "          try {\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File destDir = new File(destDirectory);\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!destDir.exists()) {\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //noinspection ResultOfMethodCallIgnored\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "              destDir.mkdirs();\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipInputStream zipIn = new ZipInputStream(assetsInputStream);\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "            BufferedInputStream bin = new BufferedInputStream(zipIn);\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ZipEntry entry;\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final long[] extractedBytes = {0};\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final int[] lastPercentage = {0};\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "            updateProgress(0, 1, assetsPath); // force 0%\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "            File fout;\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while ((entry = zipIn.getNextEntry()) != null) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if (entry.isDirectory()) continue;\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "              fout = new File(destDirectory, entry.getName());\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String destDirCanonicalPath = (new File(destDirectory)).getCanonicalPath();\n",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "              String canonicalPath = fout.getCanonicalPath();\n",
                        "lineNumber": 255,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!canonicalPath.startsWith(destDirCanonicalPath)) {\n",
                        "lineNumber": 256,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new Exception(String.format(\"Found Zip Path Traversal Vulnerability with %s\", canonicalPath));\n",
                        "lineNumber": 257,
                        "lineChange": "added"
                      },
                      {
                        "line": "              }\n",
                        "lineNumber": 258,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "              if (!fout.exists()) {\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-7f1146763ff0eeee6320973b41ea444dd74b8bf7ee644cc135133047c1a430c6L-1",
                    "lines": [
                      {
                        "line": "import java.io.File;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileInputStream;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileNotFoundException;\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.FileOutputStream;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.InputStream;\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.Charset;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.ArrayList;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashSet;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.List;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Properties;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Set;\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipEntry;\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.zip.ZipFile;\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.Nullable;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.tools.JavaFileObject;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": " * Utilities for reading {@link com.google.devtools.j2objc.file.InputFile}s.\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": " *\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Tom Ball, Keith Stanger, Mike Thvedt, Tim Gao\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class FileUtil {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Set<String> tempDirs = new HashSet<>();\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> sourcePathEntries = new ArrayList<>();\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private List<String> classPathEntries = new ArrayList<>();\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private File outputDirectory = new File(\".\");\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private String fileEncoding = System.getProperty(\"file.encoding\", \"UTF-8\");\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private Charset charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setSourcePathEntries(List<String> sourcePathEntries) {\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.sourcePathEntries = sourcePathEntries;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getSourcePathEntries() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return sourcePathEntries;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void appendSourcePath(String entry) {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(entry);\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void insertSourcePath(int index, String entry) {\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sourcePathEntries.add(index, entry);\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public List<String> getClassPathEntries() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return classPathEntries;\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setOutputDirectory(File outputDirectory) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.outputDirectory = outputDirectory;\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File getOutputDirectory() {\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!outputDirectory.exists()) {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "      outputDirectory.mkdirs();\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return outputDirectory;\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void setFileEncoding(String fileEncoding) {\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.fileEncoding = fileEncoding;\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    charset = Charset.forName(fileEncoding);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String getFileEncoding() {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return fileEncoding;\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Charset getCharset() {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return charset;\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public void addTempDir(String tempDir) {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tempDirs.add(tempDir);\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public Set<String> getTempDirs() {\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tempDirs;\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(InputFile file) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = file.getBasename();\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getMainTypeName(JavaFileObject file) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = file.getName();\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String basename = path.substring(path.lastIndexOf('/') + 1);\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return removeFileSuffix(basename);\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static String removeFileSuffix(String basename) {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int end = basename.lastIndexOf(\".java\");\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (end == -1) {\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      end = basename.lastIndexOf(\".class\");\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return end != -1 ? basename.substring(0, end) : basename;\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static String getQualifiedMainTypeName(InputFile file, CompilationUnit unit) {\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String qualifiedName = getMainTypeName(file);\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PackageDeclaration packageDecl = unit.getPackage();\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (packageDecl != null) {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String packageName = packageDecl.getName().getFullyQualifiedName();\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      qualifiedName = packageName + \".\" + qualifiedName;\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return qualifiedName;\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the source path,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnSourcePath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, sourcePathEntries, \".java\");\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Find a {@link com.google.devtools.j2objc.file.InputFile} on the class path,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * either in a directory or a jar.\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Returns a file guaranteed to exist, or null.\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Nullable\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public InputFile findOnClassPath(String qualifiedName) throws IOException {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return findOnPaths(qualifiedName, classPathEntries, \".class\");\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputFile findOnPaths(\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String qualifiedName, List<String> paths, String extension) throws IOException {\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String sourceFileName = qualifiedName.replace('.', File.separatorChar) + extension;\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Zip/jar files always use forward slashes.\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String jarEntryName = qualifiedName.replace('.', '/') + extension;\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (String pathEntry : paths) {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "      File f = new File(pathEntry);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (f.isDirectory()) {\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        RegularInputFile regularFile = new RegularInputFile(\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pathEntry + File.separatorChar + sourceFileName, sourceFileName);\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (regularFile.exists()) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return regularFile;\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Assume it's a jar file\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        JarredInputFile jarFile = new JarredInputFile(pathEntry, jarEntryName);\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (jarFile.exists()) {\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "          return jarFile;\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public String readFile(InputFile file) throws IOException {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return CharStreams.toString(file.openReader(charset));\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static InputStream streamForFile(String filename) throws IOException {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File f = new File(filename);\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (f.exists()) {\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return new FileInputStream(f);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream stream = J2ObjC.class.getResourceAsStream(filename);\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (stream == null) {\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new FileNotFoundException(filename);\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return stream;\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Reads the given properties file.\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(String resourceName) throws IOException {\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return loadProperties(streamForFile(resourceName));\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static Properties loadProperties(InputStream in) throws IOException {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Properties p = new Properties();\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "      p.load(in);\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "      return p;\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } finally {\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "      in.close();\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static File createTempDir(String dirname) throws IOException {\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File tmpDirectory = File.createTempFile(dirname, \".tmp\");\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.delete();\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!tmpDirectory.mkdir()) {\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "      throw new IOException(\"Could not create tmp directory: \" + tmpDirectory.getPath());\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tmpDirectory.deleteOnExit();\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return tmpDirectory;\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Recursively delete specified directory.\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void deleteTempDir(File dir) {\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO(cpovirk): try Directories.deleteRecursively if a c.g.c.unix dep is OK\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (dir != null && dir.exists()) {\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "      for (File f : dir.listFiles()) {\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (f.isDirectory()) {\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "          deleteTempDir(f);\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "          f.delete();\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "      dir.delete();\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  /**\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "   * Extract a ZipEntry to the specified directory.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "   */\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File outputFile = new File(dir, entry.getName());\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File parentFile = outputFile.getParentFile();\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n",
                        "lineNumber": 245,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract file to \" + dir.getPath());\n",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)\n",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "        || (!parentFile.isDirectory() && !parentFile.mkdirs())) {\n",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());\n",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try (InputStream inputStream = zipFile.getInputStream(entry);\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 18,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/TimingAttack/test",
              "name": "TimingAttack/test",
              "shortDescription": {
                "text": "Observable Timing Discrepancy (Timing Attack)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nA timing attack is a form of side-channel attack, meaning it does not take advantage of the way the code is structured, but rather exploits external clues that let an attacker infer the program's state. In a timing attack, program state is inferred from the time it takes to execute a particular operation. For example, an app might use a lookup table of valid session IDs to speed up access.\nWhile this is convenient for validated users, an invalid session ID will take far longer to be rejected (since it's not in the lookup table), giving the attackers a valuable way to engineer a brute-force attack. All they need to do is test a large number of randomly generated session IDs in the hope of discovering a valid one. Once access is granted, through the session ID, the malicious actor may impersonate a legitimate user, executing actions or freely accessing secure data. Through brute force, such as a massive bot attack, this weakness can be successfully exploited to bypass even very strong encryption algorithms.\n\n## Best practices for prevention\n* Implement a constant-time algorithm to ensure that timing is identical regardless of input validity and returned outcome.\n* If a constant-time algorithm is impractical due to a desire to optimize performance, choose another technique such as blinding.\n* Promote an awareness among developers that encryption is not enough if your app is giving off clues to help attackers.\n* Timing attacks often depend on the production environment and are thus difficult to test during development; be sure to use a staging environment as close as possible to production.\n* Choose hardened, reliable libraries for encryption and authentication with side-channel attack protection strategies rather than implementing your own methods.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TimingAttack",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-208"
                ]
              }
            },
            {
              "id": "java/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Ssrf",
                  "Security",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Gepardec/Hogarama/commit/7b532d9240eb2e7a059539e419ea218c22a5b0f5?diff=split#diff-db19dfe0e7a0c625c6e48b0d94c04add219239f2f63cf6f2674dd962e92e8ff2L-1",
                    "lines": [
                      {
                        "line": "\tprivate static final char[] PASSWORD = \"hogajama@mongodb\".toCharArray();\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tprivate static final char[] PASSWORD = System.getProperty(\"MONGODB_PW\").toCharArray();\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tprivate static final int PORT = 27017;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String COLLECTION = \"habarama\";\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate static final String HOST = System.getProperty(\"mongo.host\", \"mongodb\");\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Produces \n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic Datastore datastore() {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoClient mongoClient = getClient();\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMorphia morphia = new Morphia();\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmorphia.mapPackage(\"com.gepardec.hogarama.domain\");\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tDatastore datastore = morphia.createDatastore(mongoClient, MongoDbProducer.HOGAJAMA_DB);\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdatastore.ensureIndexes();\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn datastore;\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Produces \n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic DBCollection collection() {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoClient mongoClient = getClient();\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tDB db = mongoClient.getDB(HOGAJAMA_DB);\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn db.getCollection(COLLECTION);\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate MongoClient getClient() {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tMongoCredential credential = MongoCredential.createCredential(USER, HOGAJAMA_DB, PASSWORD);\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/xfifix/SEO_REPO/commit/4807500fee6a392ed64f66bc4dfe38d103bdb64e?diff=split#diff-9873c5adc0806eb5d51fdefea3f0460c6fc28b67d21ce7380f6c9cd52770b250L-1",
                    "lines": [
                      {
                        "line": "\t\t//\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t//\t\t\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url=\"jdbc:postgresql://localhost/KEYWORDSDB\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString user=\"postgres\";\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString passwd=\"mogette\";\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// Instantiating the database\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tConnection con = null;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPreparedStatement pst = null;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// the csv file variables\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tResultSet rs = null;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcon = DriverManager.getConnection(url, user, passwd);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/xfifix/SEO_REPO/commit/4807500fee6a392ed64f66bc4dfe38d103bdb64e?diff=split#diff-a3dca6ec48a4147bea68835a9da60df6ca08a8bff0c47e1eff8ce86c6a1c601fL-1",
                    "lines": [
                      {
                        "line": "//\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\t\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url=\"jdbc:postgresql://localhost/KEYWORDSDB\";\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString user=\"postgres\";\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString passwd=\"mogette\";\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tString url = props.getProperty(\"db.url\");\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString user = props.getProperty(\"db.user\");\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tString passwd = props.getProperty(\"db.passwd\");\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// Instantiating the database\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tConnection con = null;\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tPreparedStatement pst = null;\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// the csv file variables\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tResultSet rs = null;\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttry {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcon = DriverManager.getConnection(url, user, passwd);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 65,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/Reflection/test",
              "name": "Reflection/test",
              "shortDescription": {
                "text": "Unsafe Reflection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nA number of modern programming languages have attempted to introduce efficiencies into the development process by introducing reflection, which allows code to dynamically examine or even modify code-including itself-as required based on runtime conditions. This creates great flexibility but must be leveraged correctly to avoid introducing risk. When this weakness exists, the user is able to transmit values to the server that are then used to select unintended classes or methods.\n\nThis could modify the control flow of the application leading to unpredictable behavior, including bypassing authentication and adding malicious behaviors. In Java, for example, unsafe reflection has typically been the primary way for attackers to bypass sandboxing security mechanisms and execute malicious code.\n\n## Best practices for prevention\n\n* Many developers suggest avoiding the use of reflection altogether.\n* Never trust user input. In this case, do not use user-supplied inputs for selecting or loading classes or code.\n* Because an attacker could supply such a broad range of parameters in a brute-force attempt to exploit this weakness, consider adopting an \"accept-known-good\" strategy: limiting input to an allowlist of acceptable classes or code where possible rather than attempting to sanitize input of all possible attack types.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Reflection",
                  "Security",
                  "InTest",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-470"
                ]
              }
            },
            {
              "id": "java/Reflection",
              "name": "Reflection",
              "shortDescription": {
                "text": "Unsafe Reflection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nA number of modern programming languages have attempted to introduce efficiencies into the development process by introducing reflection, which allows code to dynamically examine or even modify code-including itself-as required based on runtime conditions. This creates great flexibility but must be leveraged correctly to avoid introducing risk. When this weakness exists, the user is able to transmit values to the server that are then used to select unintended classes or methods.\n\nThis could modify the control flow of the application leading to unpredictable behavior, including bypassing authentication and adding malicious behaviors. In Java, for example, unsafe reflection has typically been the primary way for attackers to bypass sandboxing security mechanisms and execute malicious code.\n\n## Best practices for prevention\n\n* Many developers suggest avoiding the use of reflection altogether.\n* Never trust user input. In this case, do not use user-supplied inputs for selecting or loading classes or code.\n* Because an attacker could supply such a broad range of parameters in a brute-force attempt to exploit this weakness, consider adopting an \"accept-known-good\" strategy: limiting input to an allowlist of acceptable classes or code where possible rather than attempting to sanitize input of all possible attack types.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Reflection",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-470"
                ]
              }
            },
            {
              "id": "java/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-798"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 350,
                  "endLine": 350,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "092840de7636c1d4dfc2611aefa1aaf9ee344de9047c5136f681f4c7e2bd164f",
            "1": "3b542730.49766a9f.fc7d5400.90e8c462.390f960b.85d83993.ec290f27.54d46e25.3b542730.49766a9f.33fa5dbe.90e8c462.390f960b.85d83993.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 350,
                            "endLine": 350,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 350,
                            "endLine": 350,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "endLine": 351,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04bb3b020139b980e262ee09d4394d97a691cef15602bc01ceffdbdfb115ca32",
            "1": "3b542730.c6f63401.bb993ef0.e22980a8.32bd8b25.05f431a2.5ef2310d.54d46e25.3b542730.c6f63401.bb993ef0.e22980a8.32bd8b25.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 351,
                            "endLine": 351,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 351,
                            "endLine": 351,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf02f27f69197467c3f37276717981b424833b9edfbd569d54d25d656e63eb37",
            "1": "3b542730.49766a9f.fc7d5400.90e8c462.390f960b.85d83993.ec290f27.54d46e25.3b542730.49766a9f.33fa5dbe.90e8c462.390f960b.85d83993.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 384,
                            "endLine": 384,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 384,
                            "endLine": 384,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 385,
                  "endLine": 385,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37a2f1f21a0b0fe42086bcb2656b1842752e3b2786fc8cfd5b20444c45ccea2a",
            "1": "3b542730.c6f63401.fc7d5400.e22980a8.32bd8b25.05f431a2.5ef2310d.54d46e25.3b542730.c6f63401.33fa5dbe.e22980a8.32bd8b25.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 385,
                            "endLine": 385,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 385,
                            "endLine": 385,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 387,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7613e74cd6e9034ac3f1f1095dcf79e1d4f204358b666b3e547561c76d3c569d",
            "1": "ac4e7c8b.49766a9f.fc7d5400.90e8c462.390f960b.05f431a2.ec290f27.54d46e25.ac4e7c8b.49766a9f.33fa5dbe.90e8c462.390f960b.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 387,
                            "endLine": 387,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 387,
                            "endLine": 387,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 388,
                  "endLine": 388,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cedc538491b3be7fc7f42c9c6d0d3d4768762b301b841f1e419c8ad4d094e52",
            "1": "ac4e7c8b.c6f63401.bb993ef0.e22980a8.32bd8b25.05f431a2.978780b8.54d46e25.ac4e7c8b.c6f63401.bb993ef0.e22980a8.32bd8b25.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 388,
                            "endLine": 388,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 388,
                            "endLine": 388,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 414,
                  "endLine": 414,
                  "startColumn": 9,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "53a06b1f2c5787a443a1efc13c5a548c4783c7797b815dd4e94b4b08c1237920",
            "1": "3b542730.49766a9f.fc7d5400.90e8c462.390f960b.85d83993.ec290f27.54d46e25.3b542730.49766a9f.33fa5dbe.90e8c462.390f960b.85d83993.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "endLine": 415,
                  "startColumn": 9,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4e799e8396fcef31932715f258082dfc3a724fb2d2163694021b1fe4005b00cb",
            "1": "3b542730.7703ba66.bb993ef0.e22980a8.32bd8b25.05f431a2.8145d825.54d46e25.3b542730.7703ba66.bb993ef0.e22980a8.32bd8b25.7fda7c5e.8145d825.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 466,
                  "endLine": 466,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3d546becf4adeff30deaf75674b02e1b94ce74c41a6514da8b91e6dd2c2d2e4",
            "1": "ac4e7c8b.49766a9f.33fa5dbe.90e8c462.390f960b.7fda7c5e.ec290f27.54d46e25.ac4e7c8b.49766a9f.33fa5dbe.90e8c462.390f960b.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 466,
                            "endLine": 466,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 466,
                            "endLine": 466,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 467,
                  "endLine": 467,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7bbc68045c3c95604bab08c1c269916f92a7b32639ee947be5d003935b3b7ba",
            "1": "ac4e7c8b.c6f63401.bb993ef0.e22980a8.715a6f1b.7fda7c5e.978780b8.54d46e25.ac4e7c8b.c6f63401.bb993ef0.e22980a8.715a6f1b.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 467,
                            "endLine": 467,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 467,
                            "endLine": 467,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 563,
                  "endLine": 563,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b1098fec952bd3c1c599bd273cd84eec6899680aa0a900700f84d4de7d4960be",
            "1": "ac4e7c8b.49766a9f.33fa5dbe.90e8c462.390f960b.7fda7c5e.ec290f27.54d46e25.ac4e7c8b.49766a9f.33fa5dbe.90e8c462.390f960b.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 563,
                            "endLine": 563,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 563,
                            "endLine": 563,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 564,
                  "endLine": 564,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb136e8b7fc6e2ba51aa20b2ffe0d36f0c43d76060f1382673c8f1dbaf36e80e",
            "1": "ac4e7c8b.c6f63401.bb993ef0.e22980a8.715a6f1b.7fda7c5e.978780b8.54d46e25.ac4e7c8b.c6f63401.bb993ef0.e22980a8.715a6f1b.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 564,
                            "endLine": 564,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 564,
                            "endLine": 564,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 38,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "310b8635961a6449d5acfe7b54b75474058d321574ce03f4d4eca673c116e5db",
            "1": "19689298.49766a9f.5c8b6ef6.e558aab9.390f960b.85d83993.ec290f27.54d46e25.19689298.49766a9f.5c8b6ef6.e558aab9.390f960b.85d83993.9589bd2d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 38,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 38,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketModeDetectionTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "02aed0a544ba4458ee8eca2912b73d6f24ab42238da8966c6df677ebc98dad53",
            "1": "3cbfac07.49766a9f.8f415be7.e22980a8.390f960b.7fda7c5e.ec290f27.54d46e25.3cbfac07.49766a9f.8f415be7.e22980a8.390f960b.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketModeDetectionTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketModeDetectionTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/PortForwarder.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214,
                  "startColumn": 92,
                  "endColumn": 114
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d6b32e0c5f79f1325a8ffea5c1e22934f14ff9a64c07e5ad1f09454969cff04",
            "1": "83d62161.c6f63401.33fa5dbe.6c52ae28.2cb34737.7fda7c5e.bb7564b8.0f01a149.83d62161.c6f63401.33fa5dbe.b224e60b.2cb34737.7fda7c5e.bb7564b8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/PortForwarder.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 92,
                            "endColumn": 114
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/PortForwarder.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 92,
                            "endColumn": 114
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 698,
                  "endLine": 698,
                  "startColumn": 9,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a941c3b47ffad6bc8c95a4c95d00127d139e6f08bf23453a067ec9df0aa4babd",
            "1": "19689298.49766a9f.bb993ef0.44ab356c.e27b77c0.85d83993.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.44ab356c.e27b77c0.85d83993.acf36df5.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 698,
                            "endLine": 698,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 698,
                            "endLine": 698,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 42,
                  "endColumn": 62
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f6d422a4bb83af7d45738bd66eecbdde1c4f94eb8a5a05b934fe7b9a60795400",
            "1": "19689298.49766a9f.bb993ef0.e558aab9.390f960b.85d83993.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.e558aab9.390f960b.85d83993.acf36df5.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 42,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 42,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 353,
                  "endLine": 353,
                  "startColumn": 29,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "96ce6895529c7b536d48db8e2c09f84a591dcf2d9beda1d2135b1b4129bfecf8",
            "1": "c9217755.7703ba66.bb993ef0.9d18b1f2.9db9cbcf.117e971f.8145d825.0f01a149.c9217755.7703ba66.bb993ef0.6c52ae28.9db9cbcf.7fda7c5e.8145d825.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 353,
                            "endLine": 353,
                            "startColumn": 29,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 353,
                            "endLine": 353,
                            "startColumn": 29,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 390,
                  "startColumn": 29,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ee93983821354742aecc4b055932e23cd79a6f89c4181d80a15635ea3d080e5b",
            "1": "c9217755.7703ba66.bb993ef0.9d18b1f2.9db9cbcf.117e971f.8145d825.0f01a149.c9217755.7703ba66.bb993ef0.6c52ae28.9db9cbcf.7fda7c5e.8145d825.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 390,
                            "endLine": 390,
                            "startColumn": 29,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 390,
                            "endLine": 390,
                            "startColumn": 29,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 418,
                  "endLine": 418,
                  "startColumn": 29,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e72538e45bc7a7f419c2c7c253e13bfde4813d4a2fb92b81ecf5232f69ceb1fb",
            "1": "c9217755.7703ba66.bb993ef0.9d18b1f2.9db9cbcf.117e971f.8145d825.0f01a149.c9217755.7703ba66.bb993ef0.6c52ae28.9db9cbcf.7fda7c5e.8145d825.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 29,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 29,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 469,
                  "endLine": 469,
                  "startColumn": 29,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a5e81795941ba61f328ccacac88e604fa776414609f4c8ea5b78b9df524a1d44",
            "1": "c9217755.7703ba66.bb993ef0.9d18b1f2.715a6f1b.117e971f.8145d825.0f01a149.c9217755.7703ba66.bb993ef0.6c52ae28.715a6f1b.7fda7c5e.8145d825.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 469,
                            "endLine": 469,
                            "startColumn": 29,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 469,
                            "endLine": 469,
                            "startColumn": 29,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 566,
                  "endLine": 566,
                  "startColumn": 29,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7a6d58162d8c6bf222268172776243127d144cd04c07f86fe27fcce19c4c2d2",
            "1": "c9217755.7703ba66.bb993ef0.9d18b1f2.715a6f1b.117e971f.8145d825.0f01a149.c9217755.7703ba66.bb993ef0.6c52ae28.715a6f1b.7fda7c5e.8145d825.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 29,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 29,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "startColumn": 63,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "30bab630e95223f7640af03970d86b01a43c428f6fd9a8d81cce3eb063f992f5",
            "1": "ac4e7c8b.97acdc08.bb993ef0.6c52ae28.c41fd899.a5becf45.b8a46f6f.203bd690.19689298.cd590ade.bb993ef0.6c52ae28.c41fd899.85d83993.9589bd2d.308b3bb3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ServerCnxnTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/PortForwarder.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215,
                  "startColumn": 69,
                  "endColumn": 90
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92df6754434860c0ca548b02edbc94c1e1f460fc258c652a8a2671e85ad06d51",
            "1": "2b469796.97acdc08.bb993ef0.6c52ae28.2cb34737.04aef81a.bb7564b8.203bd690.bfd5653a.97acdc08.bb993ef0.b224e60b.2cb34737.7fda7c5e.bb7564b8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/PortForwarder.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 69,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/PortForwarder.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 69,
                            "endColumn": 90
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 481,
                  "endLine": 482,
                  "startColumn": 86,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fdfa2d549c6aa982c6c687eba696cf9675a8cfee58e029d96cca913046521bb4",
            "1": "ac4e7c8b.97acdc08.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.59032646.203bd690.ac4e7c8b.80147083.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.acf36df5.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 481,
                            "endLine": 482,
                            "startColumn": 86,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 481,
                            "endLine": 482,
                            "startColumn": 86,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 699,
                  "endLine": 699,
                  "startColumn": 70,
                  "endColumn": 86
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9ccf4d3f2866212d8a0041a3e51779605df447a5bea052e7d099a3818d19d404",
            "1": "ac4e7c8b.c6436c56.bb993ef0.6c52ae28.c41fd899.a5becf45.59032646.0f01a149.19689298.c6436c56.bb993ef0.6c52ae28.c41fd899.85d83993.acf36df5.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 699,
                            "endLine": 699,
                            "startColumn": 70,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 699,
                            "endLine": 699,
                            "startColumn": 70,
                            "endColumn": 86
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 32,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7c9e09242d6974d120ff9b00cf23ce1e9bc34f9b7f70fb9b031f1ec2a8189bfb",
            "1": "c725d9b2.86c9961c.bb993ef0.e22980a8.c41fd899.7fda7c5e.b8a46f6f.54d46e25.19689298.86c9961c.bb993ef0.e22980a8.c41fd899.85d83993.acf36df5.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SessionInvalidationTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 32,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[subprocess.check_output](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zk-merge-pr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 16,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "987d9100e3ad3ccad31d9f97233d58ad80878899c84e87e85dced985848e6f21",
            "1": "e06468b8.499f0e2b.c117cc9a.f6463326.a2d153c7.ba14daf2.a2237efa.f46ed94e.a74ed3f0.04ad2656.e25dd4d1.f6463326.182d481f.4b9b0275.a2237efa.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 1,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 47,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 46,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 13,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 40,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 16,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)",
              "[subprocess.check_output](26)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zk-merge-pr.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb1292fd63bb329af3ce664731e983cb0692a65a9a70acd224c2a81faee12726",
            "1": "a74ed3f0.499f0e2b.c117cc9a.72162c22.2b223ef7.d21bd15b.fd7664e3.6aac30d8.a74ed3f0.04ad2656.e25dd4d1.f6463326.182d481f.4b9b0275.ca637177.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 1,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 47,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 46,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 13,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 13,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 40,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 16,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 5,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 16,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 16,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 16,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 26,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 43,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 20,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 19,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 44,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 17,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 40,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zk-merge-pr.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 16,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117,
                  "startColumn": 38,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cbdee9dca3c8b2c67f47e437e703f355ba35a0fea962d0174ed0ea70ca05b42",
            "1": "19689298.49766a9f.bb993ef0.e558aab9.390f960b.7fda7c5e.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.e558aab9.390f960b.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 38,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 38,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 31,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "17771ff78169336a25949777000f7df8aa4dc1f3adea0198cdd2948b56d4db5c",
            "1": "19689298.49766a9f.bb993ef0.4a4055ae.e27b77c0.ba2b7f9a.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 31,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "417e10821f64c24607c4f9ff97d329aacb6dc47c5a2633d2df541cfe98b4dbd4",
            "1": "19689298.49766a9f.bb993ef0.4a4055ae.e27b77c0.ba2b7f9a.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117,
                  "startColumn": 31,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0cc3aaa4236cecf6b7fd2f6b102c858a2d983d0d8d35c0eb3fe3b506c470989d",
            "1": "19689298.49766a9f.bb993ef0.4a4055ae.e27b77c0.ba2b7f9a.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151,
                  "startColumn": 31,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4b7a10024cce3edca638d19b7ef76224b148e98d9069c608f6a67a7f3a3bff46",
            "1": "19689298.49766a9f.bb993ef0.4a4055ae.e27b77c0.ba2b7f9a.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187,
                  "startColumn": 31,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "47589db9ae3af070a4b41e936bcf1133f0c9448876ecbaa65c9e8484a6feaae2",
            "1": "19689298.49766a9f.bb993ef0.4a4055ae.e27b77c0.ba2b7f9a.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 31,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f751231da9ebf8663f35e7be8ce947e86a557f6cfdbaba7a8e77c1ce860107c1",
            "1": "19689298.49766a9f.bb993ef0.4a4055ae.e27b77c0.ba2b7f9a.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1341,
                  "endLine": 1341,
                  "startColumn": 17,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a12b5fbb428e8c0428cce833c13d2c3ca7c6c709c8e9fb718573b8326b549ef4",
            "1": "ac4e7c8b.49766a9f.fc7d5400.44ab356c.390f960b.ef8a902b.ec290f27.54d46e25.ac4e7c8b.be62888c.26f4ee91.44ab356c.9a5f6332.7fda7c5e.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1341,
                            "endLine": 1341,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1341,
                            "endLine": 1341,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1342,
                  "endLine": 1342,
                  "startColumn": 17,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "85f5c6fccc429a851f9ee6f25dee3e8d42240d08c7b5f7c2b9383f527ae731ba",
            "1": "ac4e7c8b.c6f63401.fc7d5400.e22980a8.56683ff4.ba2b7f9a.b8a46f6f.54d46e25.ac4e7c8b.be62888c.26f4ee91.73dc12b3.9a5f6332.7fda7c5e.b8a46f6f.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1342,
                            "endLine": 1342,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1342,
                            "endLine": 1342,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 63,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09e5407ef6ea273e5ecefebd52153bdd0cb792eebeeebe2fb6f97e51440d3eb2",
            "1": "af5086c5.c6f63401.bb993ef0.6c52ae28.56683ff4.199d82a5.b8a46f6f.0f01a149.af5086c5.c6f63401.bb993ef0.6c52ae28.56683ff4.7fda7c5e.b8a46f6f.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 30,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8ae1d964a2eac9ee7898df448c85423b79b86e3481feace73e5bacfdecf6bda4",
            "1": "19689298.1f519e92.bb993ef0.857e8281.e27b77c0.48eeb24b.6d74a0f2.54d46e25.19689298.1f519e92.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 30,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c475de4fde4e19e682e6b7017685a494d29686d0ad9b342a4ef20a5f17706f6f",
            "1": "19689298.1f519e92.bb993ef0.857e8281.e27b77c0.48eeb24b.6d74a0f2.54d46e25.19689298.1f519e92.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116,
                  "startColumn": 30,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21375bb76e4b12bb6956d7b8408b9f9f589bef50a2ab7d3683e14581fab294cd",
            "1": "19689298.1f519e92.bb993ef0.857e8281.e27b77c0.48eeb24b.6d74a0f2.54d46e25.19689298.1f519e92.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150,
                  "startColumn": 30,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6db295ab17c6615b207e03eec6e0bae57e2cae491656e4cbf30240bb9b98ba06",
            "1": "19689298.1f519e92.bb993ef0.857e8281.e27b77c0.48eeb24b.6d74a0f2.54d46e25.19689298.1f519e92.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186,
                  "startColumn": 30,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f2522760c247148de926b5ef8288dfd8a4ebb93ea1e061fe9c9981bfb7c69d5",
            "1": "19689298.1f519e92.bb993ef0.857e8281.e27b77c0.48eeb24b.6d74a0f2.54d46e25.19689298.1f519e92.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 186,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "startColumn": 30,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25cd3c71e3ec3e2172c582f8c3492695616ef308cfd4afbd54451522d64e78e0",
            "1": "19689298.1f519e92.bb993ef0.857e8281.e27b77c0.48eeb24b.6d74a0f2.54d46e25.19689298.1f519e92.bb993ef0.6c52ae28.e27b77c0.7fda7c5e.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1344,
                  "endLine": 1344,
                  "startColumn": 63,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a6a4aee1c3ff42aa8f454c0d0d699c9fa57863044b2f8f8366487e7f507bb430",
            "1": "af5086c5.97acdc08.bb993ef0.6c52ae28.56683ff4.199d82a5.b8a46f6f.203bd690.af5086c5.be62888c.bb993ef0.73dc12b3.9a5f6332.7fda7c5e.b8a46f6f.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1344,
                            "endLine": 1344,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1344,
                            "endLine": 1344,
                            "startColumn": 63,
                            "endColumn": 82
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 568,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[println](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 6,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5cd967e03df3dd459b502dfbffdd093211c1905b911aac0043a90cb92b3f12c9",
            "1": "e6fcc0e0.c5667b7a.1f12b8fa.820d87c0.a1491c54.9ff75657.16062bba.54d46e25.19689298.49766a9f.a224ef38.e22980a8.83192735.95df3f17.ce1d137b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 16,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 16,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 16,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 9,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 35,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 6,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 753,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4)",
              "[println](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3821dc50c36b068db7b0a7acab61581a0cbd1aafe2d59fed1337bed2f5ad7eae",
            "1": "19689298.b35ac487.41e14005.1078032b.d5deaf2a.2f4e1548.16062bba.54d46e25.19689298.b35ac487.41e14005.e22980a8.83192735.95df3f17.e55406a8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 20,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 42,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 753,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118,
                  "startColumn": 18,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1f79ff963a1cdffe409c9d813701f297709377ecc7cc72d7920062e119f9fc5e",
            "1": "189b966f.1cbd3ff4.33fa5dbe.e22980a8.178caa9c.7fda7c5e.f0bed3be.54d46e25.189b966f.1cbd3ff4.33fa5dbe.e22980a8.178caa9c.7fda7c5e.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 18,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveHostnameVerifier/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The verify method always returns true, which means that any hostname is accepted. Such behaviour is insecure.",
            "markdown": "The {0} method always returns {1}, which means that any hostname is accepted. Such behaviour is insecure.",
            "arguments": [
              "[verify](0)",
              "[true](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 28,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a98b55ea1eebe8da80db62848c6c88997a0a866751c5e3d8781bf43a1be98529",
            "1": "3577ba7a.528e35bc.df604cdb.e22980a8.0681ed2b.eacd09e2.f2a37899.9c4228d3.3577ba7a.528e35bc.df604cdb.e22980a8.0681ed2b.eacd09e2.f2a37899.9c4228d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 127,
                            "endLine": 127,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-monitoring/check_zookeeper.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 407,
                  "startColumn": 1,
                  "endColumn": 2
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2451194b70d9755eec1de03365eaf20f3fe567dfeacd82971481a85c3a9245dc",
            "1": "b1a8a79f.bada2f7b.e090e514.e9225a88.828d6b14.73cfdf26.22a8b49e.6aac30d8.b1a8a79f.bada2f7b.e090e514.e9225a88.828d6b14.73cfdf26.22a8b49e.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-monitoring/check_zookeeper.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 407,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-huebrowser/zkui/src/zkui/rest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 37,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa7dea66cb1161caa6f38efe3a554fb088bd04186dbb3bd7209127d8329810ad",
            "1": "13ae8cf7.bada2f7b.441958fb.139c59a8.df185686.ba14daf2.22a8b49e.001894fd.13ae8cf7.bada2f7b.441958fb.139c59a8.df185686.ba14daf2.22a8b49e.001894fd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-huebrowser/zkui/src/zkui/rest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 37,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/zkrest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 37,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "36f54bbb46b5d34421869a08c8481fc7ed2beb3ea8ea0e0c9d4fec8681f71f62",
            "1": "13ae8cf7.bada2f7b.441958fb.139c59a8.df185686.ba14daf2.22a8b49e.001894fd.13ae8cf7.bada2f7b.441958fb.139c59a8.df185686.ba14daf2.22a8b49e.001894fd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/zkrest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 37,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/demo_master_election.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 89,
                  "startColumn": 1,
                  "endColumn": 2
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c2a56ff3a20a1b47a710d27aff82d9e42daeb3443ea2d7949e43d5881ff5c0ef",
            "1": "b1a8a79f.9da28fa1.79e62dc9.08fb6340.828d6b14.a5d7f69f.22a8b49e.aaaeb5e6.b1a8a79f.9da28fa1.79e62dc9.08fb6340.828d6b14.a5d7f69f.22a8b49e.aaaeb5e6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/demo_master_election.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 89,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-huebrowser/zkui/src/zkui/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 21,
                  "startColumn": 1,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4fe63ddaf0df035413fbfd6a36ba31ae8836d33490cfa18c126409aea1ac20b7",
            "1": "8b2d4f32.a028dbef.79e62dc9.8f4d610b.c2f53157.37ff44c3.22a8b49e.1f68126d.8b2d4f32.a028dbef.79e62dc9.8f4d610b.c2f53157.37ff44c3.22a8b49e.1f68126d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-huebrowser/zkui/src/zkui/utils.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 21,
                            "startColumn": 1,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-monitoring/ganglia/zookeeper_ganglia.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 243,
                  "startColumn": 1,
                  "endColumn": 2
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ff209bce5ad14e9d79d680589a565f1ebe1474f470b5daf5b92b507930b0cd21",
            "1": "b1a8a79f.bada2f7b.80f3a077.08fb6340.828d6b14.b3a3466c.22a8b49e.aaaeb5e6.b1a8a79f.bada2f7b.80f3a077.08fb6340.828d6b14.b3a3466c.22a8b49e.aaaeb5e6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-monitoring/ganglia/zookeeper_ganglia.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 243,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/demo_queue.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 97,
                  "startColumn": 1,
                  "endColumn": 2
                }
              }
            }
          ],
          "fingerprints": {
            "0": "be410ebc48816c11e6cd115731cf7a43ec1c15bfb32b7d66518399c66a7ecae6",
            "1": "b1a8a79f.9da28fa1.79e62dc9.08fb6340.828d6b14.a5d7f69f.22a8b49e.baf4e289.b1a8a79f.9da28fa1.79e62dc9.08fb6340.828d6b14.a5d7f69f.22a8b49e.baf4e289"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/demo_queue.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 97,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/UnsupportedLanguage",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "markdown": "This source file appears to be in Python 2. The Python 2 interpreter has been unsupported without security updates since January 2020. Consider porting this code to Python 3.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/zk_dump_tree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 81,
                  "startColumn": 1,
                  "endColumn": 2
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad4bb1fb92d3216462277e18470001ee6aa54c599ec02bc13040ec9716273d49",
            "1": "13ae8cf7.e1ad3d81.d9e48e3e.08fb6340.828d6b14.a5d7f69f.22a8b49e.c0ec5178.13ae8cf7.e1ad3d81.d9e48e3e.08fb6340.828d6b14.a5d7f69f.22a8b49e.c0ec5178"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/python/zk_dump_tree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 81,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 159,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.RandomAccessFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[java.io.RandomAccessFile](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 340,
                  "endLine": 340,
                  "startColumn": 28,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "53aed8dbc4b810e33b546980347a3434efe7d215c499b2ae6d89986bea93332c",
            "1": "8df8fa68.8d55b20a.622565c7.6c52ae28.f6d438cc.0d476878.df7e59ba.203bd690.8df8fa68.f15a4282.622565c7.de031890.e27b77c0.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 340,
                            "endLine": 340,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 340,
                            "endLine": 340,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 262,
                            "endLine": 262,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 263,
                            "endLine": 263,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 7,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 57,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 30,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 13,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.RandomAccessFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.RandomAccessFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 300,
                  "startColumn": 33,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c30fafd1b379a133a92574fdbd9553ff84e11c49fede116407674a3e028c045",
            "1": "ac4e7c8b.336127bc.e721c9bc.6c52ae28.025462d2.117e971f.df7e59ba.203bd690.8df8fa68.dd05ec30.e721c9bc.de031890.6ad5fcca.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 65,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 65,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 60,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 56,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 30,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 13,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.RandomAccessFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[java.io.RandomAccessFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 360,
                  "endLine": 360,
                  "startColumn": 23,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "96a2050b29b6cf7f50e670e3edaf3af40fd56d89511aeedf4df6f748ea6f991b",
            "1": "8df8fa68.f79a2ca4.622565c7.6c52ae28.f6d438cc.0d476878.df7e59ba.203bd690.8df8fa68.f15a4282.88a112a7.a46ce53f.9e2061ec.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 360,
                            "endLine": 360,
                            "startColumn": 36,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 360,
                            "endLine": 360,
                            "startColumn": 36,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 297,
                            "endLine": 297,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 2,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 61,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 30,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 13,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16)",
              "[exists](17)",
              "[conditional expression](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 37,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bef5bbc1c0a577d694a185dd85e8667277ac52365cd35027121cd9bc183c1765",
            "1": "38f02aed.d41c3407.8e9e5577.6c52ae28.6ee441cb.0d476878.dafc127e.230abeec.8df8fa68.d41c3407.f6d52963.de031890.dd06b926.e4d7b7ac.35a7a1a6.fbe2f65c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 44,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 14,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 207,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 14,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 52,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 27,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 9,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 14,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 14,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 138,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[exists](6)",
              "[conditional expression](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203,
                  "startColumn": 14,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "815c53ae892e80f0d43d4fd4a361d3bd29190273f8998263c2c504ada9fbd7c6",
            "1": "19689298.d41c3407.33fa5dbe.9998adc9.dd06b926.7fda7c5e.dafc127e.54d46e25.8df8fa68.d41c3407.33fa5dbe.de031890.dd06b926.e4d7b7ac.35a7a1a6.fbe2f65c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 44,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 14,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 206,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[exists](8)",
              "[conditional expression](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 24,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf55ff5a214f9bc119f72afad8d455100df284a85b330717f2ad8c2531d0f5cc",
            "1": "ea2fad8d.1cbd3ff4.33fa5dbe.1243e009.025462d2.e4d7b7ac.d71ffafd.cfb7ebc4.ea2fad8d.dd05ec30.33fa5dbe.de031890.025462d2.e4d7b7ac.377b98a3.cfb7ebc4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 49,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 44,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 14,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 177,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into listFiles, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[listFiles](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138,
                  "startColumn": 23,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "18d6cf3e66804e0b1e854555453bfc3d6852a453f6dd97f6af789123481eb7dd",
            "1": "8df8fa68.8d55b20a.fbdd9032.ce5d8769.3effd772.24dcd476.9566b89f.6b655a0c.8df8fa68.f0df8c86.3e307cfd.de031890.3effd772.e4d7b7ac.35a7a1a6.fbe2f65c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 44,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 14,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 207,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 14,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 37,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 24,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 46,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into listFiles, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20)",
              "[listFiles](21)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145,
                  "startColumn": 28,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9e245ae7971dbc82bf07fcc739edf68cc34c77e5d5960e5629cc69bf650dbbb4",
            "1": "8df8fa68.8d55b20a.622565c7.6c52ae28.cdfcedcf.24dcd476.7b3397ea.ff2284f8.8df8fa68.f0df8c86.3e307cfd.de031890.3effd772.e4d7b7ac.35a7a1a6.fbe2f65c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 44,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 14,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 207,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 14,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 37,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 24,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 46,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 28,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 28,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into delete, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28)",
              "[delete](29)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "endLine": 160,
                  "startColumn": 18,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "53b71509d40a7b7581889de71f3388f90948f3f0bcdce271b5216b2547d4ea2b",
            "1": "daf8aa0f.c8c8034f.4d63df5a.9998adc9.dd06b926.1715970a.5cda9c65.cfafd018.e1d7cd7c.24877279.3e307cfd.de031890.3effd772.e4d7b7ac.35a7a1a6.fbe2f65c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 44,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 202,
                            "endLine": 202,
                            "startColumn": 14,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 207,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 14,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 178,
                            "endLine": 178,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 192,
                            "endLine": 192,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 30,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 37,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 24,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 37,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 46,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 23,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 16,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 26,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 23,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 154,
                            "endLine": 154,
                            "startColumn": 57,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 17,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 18,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 30,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11e5376ba785524e119f3fd54b0a61ce307c34264a9fb460e75255196c972a76",
            "1": "682e2f2f.ff76257e.e5aa700a.6c52ae28.f6d438cc.117e971f.55c6f621.6f114b23.8df8fa68.7f413d6f.622565c7.e22980a8.a7b964d9.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[java.io.FileInputStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 5,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb2975f38d79755cb11faad97111635cbdb47c02bb45af6cd8b00135b5f251f5",
            "1": "ac4e7c8b.13f1e0ea.fa8bb2d4.1243e009.025462d2.117e971f.df7e59ba.54d46e25.8df8fa68.7f413d6f.3f8b34b7.1243e009.025462d2.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 19,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 10,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 53,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 53,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 51,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 35,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 520,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3)",
              "[java.io.FileInputStream](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 59,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a05ee431680bffa943f71afa7e53da1cf4c01b0be1406c30d9be5c58f6d37e3f",
            "1": "19689298.83dbfe52.8e9e5577.6c52ae28.025462d2.b051b3b8.a2194949.54d46e25.8df8fa68.7f413d6f.639aba37.e22980a8.a7b964d9.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 16,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 75,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 59,
                            "endColumn": 74
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[java.io.FileInputStream](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 9,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "63ef47224c980e14a6a479aae8e8275920e35fe501ade485d348f01d841f01a9",
            "1": "d1214189.90af1968.33fa5dbe.1243e009.144ca4b3.7fda7c5e.d71ffafd.cfb7ebc4.ea2fad8d.dd05ec30.33fa5dbe.de031890.025462d2.e4d7b7ac.377b98a3.cfb7ebc4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 37,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 21,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 14,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 53,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 51,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 35,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[java.io.FileInputStream](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 30,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4108ba34136fdf2141e0dfb54053ec301cda79bea3cd5fee31455273893ad5be",
            "1": "682e2f2f.ff76257e.33fa5dbe.6c52ae28.f6d438cc.7fda7c5e.df7e59ba.203bd690.8df8fa68.d372e2ba.26474654.de031890.d31a8364.7fda7c5e.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 35,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 23,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 51,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 919,
                            "endLine": 919,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 525,
                            "endLine": 525,
                            "startColumn": 45,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 528,
                            "endLine": 528,
                            "startColumn": 66,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 528,
                            "endLine": 528,
                            "startColumn": 62,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 528,
                            "endLine": 528,
                            "startColumn": 46,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.BufferedOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[java.io.BufferedOutputStream](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 107,
                  "endColumn": 127
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a05ee431680bffa943f71afa7e53da1cf4c01b0be1406c30d9be5c58f6d37e3f",
            "1": "7f6844ea.886963c4.ee4da732.b46c4918.7fce110f.1e8aed3e.df7e59ba.47d0e674.8df8fa68.7f413d6f.639aba37.e22980a8.025462d2.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 16,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 132,
                            "endColumn": 148
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 128,
                            "endColumn": 160
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 107,
                            "endColumn": 127
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3)",
              "[java.io.FileOutputStream](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 132,
                  "endColumn": 148
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a05ee431680bffa943f71afa7e53da1cf4c01b0be1406c30d9be5c58f6d37e3f",
            "1": "19689298.83dbfe52.fa8bb2d4.b46c4918.025462d2.b051b3b8.cbd38614.54d46e25.8df8fa68.7f413d6f.639aba37.e22980a8.025462d2.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 16,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 149,
                            "endColumn": 159
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 132,
                            "endColumn": 148
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileReader, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45),(46),(47),(48),(49),(50),(51),(52),(53),(54),(55),(56),(57),(58),(59),(60),(61),(62),(63),(64),(65)",
              "[java.io.FileReader](66)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 13,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c1cf20d3234460473bd58e4e0e8eae47a28c2390c4f7dffd4c285df38abcf175",
            "1": "ac4e7c8b.8eb5de38.33fa5dbe.e22980a8.f1d9f854.7fda7c5e.df7e59ba.54d46e25.8df8fa68.d372e2ba.26474654.de031890.d31a8364.7fda7c5e.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 30,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 17,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 43,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 25,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 23,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 9,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 51,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 32,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 9,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 57,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 38,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 31,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 62,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 90,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 50,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2660,
                            "endLine": 2660,
                            "startColumn": 47,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2662,
                            "endLine": 2662,
                            "startColumn": 53,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2662,
                            "endLine": 2662,
                            "startColumn": 77,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2663,
                            "endLine": 2663,
                            "startColumn": 40,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2664,
                            "endLine": 2664,
                            "startColumn": 49,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2665,
                            "endLine": 2665,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2666,
                            "endLine": 2666,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2667,
                            "endLine": 2667,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2668,
                            "endLine": 2668,
                            "startColumn": 41,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2669,
                            "endLine": 2669,
                            "startColumn": 41,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2670,
                            "endLine": 2670,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2671,
                            "endLine": 2671,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2672,
                            "endLine": 2672,
                            "startColumn": 51,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2673,
                            "endLine": 2673,
                            "startColumn": 42,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2674,
                            "endLine": 2674,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2675,
                            "endLine": 2675,
                            "startColumn": 47,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2677,
                            "endLine": 2677,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2677,
                            "endLine": 2677,
                            "startColumn": 38,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1954,
                            "endLine": 1954,
                            "startColumn": 45,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1956,
                            "endLine": 1956,
                            "startColumn": 77,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1967,
                            "endLine": 1967,
                            "startColumn": 30,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1967,
                            "endLine": 1967,
                            "startColumn": 13,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1968,
                            "endLine": 1968,
                            "startColumn": 52,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1969,
                            "endLine": 1969,
                            "startColumn": 42,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1969,
                            "endLine": 1969,
                            "startColumn": 17,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1987,
                            "endLine": 1987,
                            "startColumn": 17,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1990,
                            "endLine": 1990,
                            "startColumn": 31,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 44,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2366,
                            "endLine": 2366,
                            "startColumn": 36,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 45,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1995,
                            "endLine": 1995,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 46,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1861,
                            "endLine": 1861,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 47,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1669,
                            "endLine": 1669,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 48,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1676,
                            "endLine": 1676,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 49,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 991,
                            "endLine": 991,
                            "startColumn": 24,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 50,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 993,
                            "endLine": 993,
                            "startColumn": 31,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 51,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1661,
                            "endLine": 1661,
                            "startColumn": 44,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 52,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1853,
                            "endLine": 1853,
                            "startColumn": 87,
                            "endColumn": 104
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 53,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1853,
                            "endLine": 1853,
                            "startColumn": 87,
                            "endColumn": 120
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 54,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 152,
                            "endColumn": 169
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 55,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 685,
                            "endLine": 685,
                            "startColumn": 85,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 56,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 638,
                            "endLine": 638,
                            "startColumn": 110,
                            "endColumn": 127
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 57,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 642,
                            "endLine": 642,
                            "startColumn": 59,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 58,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 46,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 59,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 60,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 61,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 62,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 63,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 64,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 33,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 65,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 33,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 66,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 570,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into listFiles, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[listFiles](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 18,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21348d2f0b8e91887dee8238ebec0d1c8023515ea340bab5c1f43bc1836a2019",
            "1": "8df8fa68.d18690d0.622565c7.9998adc9.dd06b926.24dcd476.ffed9759.a1df1a3b.8df8fa68.d18690d0.622565c7.9998adc9.dd06b926.e4d7b7ac.4b7d90fd.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 4,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 30,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 20,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 13,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 24,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 8,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 18,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 770,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into java.io.RandomAccessFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[java.io.RandomAccessFile](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/FileLoader.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 7,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d19ece324ad9e0baf6bfcb6a6d4560d613c42acb828a09e37d3eef7f539102fc",
            "1": "19689298.ff76257e.44f4c540.ede9cf8e.f6d438cc.cb216716.76a0da3b.b910c1bb.19689298.7ef9ab6e.33fa5dbe.f9bdd8eb.d31a8364.7fda7c5e.4b7d90fd.b910c1bb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 10,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 4,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 30,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 20,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 13,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/FileLoader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/FileLoader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 10,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/FileLoader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 27,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 38,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 45,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 72,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 68,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 30,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 13,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 770,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.net.Socket, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40)",
              "[java.net.Socket](41)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/IntegrityCheck.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176,
                  "startColumn": 46,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "859dfb49998bf3ea4a1f76cf5747062b9a605f3d810b18957a95cb8edc140a2e",
            "1": "d4f328f2.05120876.f3608129.6c52ae28.025462d2.117e971f.df7e59ba.203bd690.d4f328f2.dd05ec30.331825e5.de031890.025462d2.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/IntegrityCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 61,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/IntegrityCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 176,
                            "endLine": 176,
                            "startColumn": 61,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/IntegrityCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 20,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/IntegrityCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 40,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 707,
                            "endLine": 707,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 708,
                            "endLine": 708,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 721,
                            "endLine": 721,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 722,
                            "endLine": 722,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 725,
                            "endLine": 725,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 727,
                            "endLine": 727,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 730,
                            "endLine": 730,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 733,
                            "endLine": 733,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 497,
                            "endLine": 497,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 792,
                            "endLine": 792,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 798,
                            "endLine": 798,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 802,
                            "endLine": 802,
                            "startColumn": 39,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 59,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 43,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 370,
                            "endLine": 370,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1425,
                            "endLine": 1425,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1426,
                            "endLine": 1426,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1189,
                            "endLine": 1189,
                            "startColumn": 45,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 31,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.net.Socket, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36)",
              "[java.net.Socket](37)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b764ef78b5970214517c2b145c209ee0516c68bdbc9c025677d02da2ebd697ae",
            "1": "2d06e3d6.13f1e0ea.fa8bb2d4.1243e009.025462d2.117e971f.32f66297.545e9171.8df8fa68.7f413d6f.622565c7.1243e009.025462d2.af5c1272.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 43,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 27,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 9,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 189,
                            "endLine": 189,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 730,
                            "endLine": 730,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 95,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 59,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 43,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 9,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 567,
                            "endLine": 567,
                            "startColumn": 69,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 370,
                            "endLine": 370,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1425,
                            "endLine": 1425,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1426,
                            "endLine": 1426,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1189,
                            "endLine": 1189,
                            "startColumn": 45,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 31,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 206,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.net.Socket, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36)",
              "[java.net.Socket](37)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/TestHammer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c46a6fc77e4ed87c4064baf2233151ebeef96f29a3095402864243076c33c96",
            "1": "8df8fa68.8d55b20a.ea291b8f.58a2ef45.8fe30ed2.7fda7c5e.df7e59ba.ac56be65.8df8fa68.dd05ec30.ea291b8f.de031890.025462d2.7fda7c5e.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/TestHammer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 44,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/TestHammer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 44,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 721,
                            "endLine": 721,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 722,
                            "endLine": 722,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 725,
                            "endLine": 725,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 727,
                            "endLine": 727,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 730,
                            "endLine": 730,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 733,
                            "endLine": 733,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 497,
                            "endLine": 497,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 792,
                            "endLine": 792,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 798,
                            "endLine": 798,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 802,
                            "endLine": 802,
                            "startColumn": 39,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 59,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 43,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 370,
                            "endLine": 370,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1425,
                            "endLine": 1425,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1426,
                            "endLine": 1426,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1189,
                            "endLine": 1189,
                            "startColumn": 45,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 31,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.net.Socket, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38)",
              "[java.net.Socket](39)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SledgeHammer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 30,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "29c578a7074a3bc59f760ca8ca11efe81cb1071a190e12179320a41496f1b72b",
            "1": "682e2f2f.1cbd3ff4.ed6cd3ea.6c52ae28.025462d2.117e971f.acf36df5.203bd690.8df8fa68.77f6114b.622565c7.de031890.025462d2.ce109560.acf36df5.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SledgeHammer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SledgeHammer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 43,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SledgeHammer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 25,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/SledgeHammer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 40,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 721,
                            "endLine": 721,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 722,
                            "endLine": 722,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 725,
                            "endLine": 725,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 727,
                            "endLine": 727,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 730,
                            "endLine": 730,
                            "startColumn": 44,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/ClientBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 733,
                            "endLine": 733,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 497,
                            "endLine": 497,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 501,
                            "endLine": 501,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 792,
                            "endLine": 792,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 798,
                            "endLine": 798,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 802,
                            "endLine": 802,
                            "startColumn": 39,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 59,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 43,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 370,
                            "endLine": 370,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1425,
                            "endLine": 1425,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1426,
                            "endLine": 1426,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1189,
                            "endLine": 1189,
                            "startColumn": 45,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 31,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.net.Socket, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34)",
              "[java.net.Socket](35)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/audit/ZKAuditLoggerPerformance.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 28,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e29b215246ac0227bf0300cce3b047356393bf524fd4ca3806cd9419a3222664",
            "1": "19689298.ec757958.33fa5dbe.6c52ae28.025462d2.7fda7c5e.df7e59ba.54d46e25.8df8fa68.b22c2366.33fa5dbe.de031890.025462d2.7fda7c5e.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/audit/ZKAuditLoggerPerformance.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/audit/ZKAuditLoggerPerformance.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/audit/ZKAuditLoggerPerformance.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 16,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/audit/ZKAuditLoggerPerformance.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 38,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 730,
                            "endLine": 730,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 95,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 59,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 43,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 9,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 567,
                            "endLine": 567,
                            "startColumn": 69,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 370,
                            "endLine": 370,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1425,
                            "endLine": 1425,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1426,
                            "endLine": 1426,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1189,
                            "endLine": 1189,
                            "startColumn": 45,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 31,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 156,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[exists](5)",
              "[conditional expression](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 14,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf77c1e8bd8222ff9990240042e0a37f622ad016166e572838a3b7793c061fc0",
            "1": "19689298.c8c8034f.aa4517d0.9998adc9.dd06b926.24dcd476.c02ca30c.54d46e25.a0472648.dd05ec30.0e3e4590.de031890.dd06b926.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 14,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 93,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[exists](5)",
              "[conditional expression](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 14,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf0d0342604d7f36a831f714028fd1c65e3bf2743047418e7715f99c2a67d481",
            "1": "19689298.c8c8034f.44f4c540.9998adc9.dd06b926.24dcd476.6d63f75a.54d46e25.a0472648.dd05ec30.0e3e4590.de031890.dd06b926.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 14,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 98,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[exists](10)",
              "[conditional expression](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 37,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd66e5513ebac9eb0b1632d4b67bccf670be6853b7c73f60469f2bd83b515d07",
            "1": "642ddfa3.7a7ce3bc.176cd2b5.9998adc9.dd06b926.af106088.5a011d46.545e9171.a0472648.dd05ec30.0e3e4590.de031890.dd06b926.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 14,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 14,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 51,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 37,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 221,
                            "endLine": 221,
                            "startColumn": 9,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 14,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 14,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 13,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[exists](9)",
              "[conditional expression](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119,
                  "startColumn": 13,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "caa88a098d248f5188455acea439af0c0096868db18a17dd7b76ad9ec13de24a",
            "1": "37c63dd3.83dbfe52.d6936e5b.c46bf014.373e3270.e8d9e78e.df7e59ba.54d46e25.a0472648.dd05ec30.d6936e5b.de031890.025462d2.ce109560.377b98a3.2f2a0815"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 40,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 31,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 31,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 18,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 37,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 387,
                            "endLine": 387,
                            "startColumn": 46,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 13,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileInputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "startColumn": 43,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9ca763c438ad2252969f28eae7ced553360fcc8c1d2b3864941a39f0a2e693d8",
            "1": "19689298.83dbfe52.44f4c540.9998adc9.dd06b926.2f4e1548.55c6f621.6f114b23.a0472648.dd05ec30.0e3e4590.de031890.a7b964d9.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 25,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 14,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 59,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/auth/MiniKdc.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 43,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TimingAttack/test",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "An attacker can guess the secret value of getEncoded because it is compared using java.util.Arrays.equals, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "markdown": "An attacker can guess the secret value of {0} because it is compared using {1}, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "arguments": [
              "[getEncoded](0)",
              "[java.util.Arrays.equals](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 18,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3be2386ec2d8563ee827ffe6138172f4635a7668b428af150adf69206b834fa6",
            "1": "1d6fe040.c8c8034f.54350824.9998adc9.dd06b926.b051b3b8.7221b28e.1d874c72.1d6fe040.c8c8034f.54350824.9998adc9.dd06b926.7fda7c5e.7221b28e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 32,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TimingAttack/test",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "An attacker can guess the secret value of getEncoded because it is compared using java.util.Arrays.equals, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "markdown": "An attacker can guess the secret value of {0} because it is compared using {1}, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "arguments": [
              "[getEncoded](0)",
              "[java.util.Arrays.equals](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "startColumn": 18,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "deaec1120920174c94929131eb2b7fa10d741c86d2031c28f179141cc363ece0",
            "1": "1d6fe040.c8c8034f.54350824.9998adc9.dd06b926.b051b3b8.7221b28e.1d874c72.1d6fe040.c8c8034f.54350824.9998adc9.dd06b926.7fda7c5e.7221b28e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 32,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into java.net.Socket, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45)",
              "[java.net.Socket](46)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 14,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57030bd972f2e49f48cfb1ea044d7220ff59c236c1d6a80235ee7b9fb129c12f",
            "1": "2d06e3d6.1cbd3ff4.ea291b8f.e22980a8.8fe30ed2.7fda7c5e.5fa5ecf9.54d46e25.c9f51d48.7f413d6f.ea291b8f.9998adc9.20bd2258.7fda7c5e.0ac97cd8.97b91e3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 26,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 26,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 54,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 193,
                            "endLine": 193,
                            "startColumn": 58,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 195,
                            "endLine": 195,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 205,
                            "endLine": 205,
                            "startColumn": 12,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 206,
                            "endLine": 206,
                            "startColumn": 56,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 53,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 206,
                            "endLine": 206,
                            "startColumn": 21,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 25,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 215,
                            "endLine": 215,
                            "startColumn": 21,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 216,
                            "endLine": 216,
                            "startColumn": 31,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 216,
                            "endLine": 216,
                            "startColumn": 31,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 730,
                            "endLine": 730,
                            "startColumn": 9,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 95,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1134,
                            "endLine": 1134,
                            "startColumn": 59,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 43,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 39,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 9,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 567,
                            "endLine": 567,
                            "startColumn": 69,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 634,
                            "endLine": 634,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 644,
                            "endLine": 644,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 649,
                            "endLine": 649,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 660,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 669,
                            "endLine": 669,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 370,
                            "endLine": 370,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 398,
                            "endLine": 398,
                            "startColumn": 9,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 9,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1425,
                            "endLine": 1425,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1426,
                            "endLine": 1426,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1189,
                            "endLine": 1189,
                            "startColumn": 45,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1330,
                            "endLine": 1330,
                            "startColumn": 31,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 44,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 45,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 35,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 46,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1337,
                            "endLine": 1337,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in here.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[here](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 44,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aba35132edfa5be3cc341209609f4b228a370ac6119566b4358b2cc2a09ce991",
            "1": "4d9dffb9.dd05ec30.622565c7.de031890.8b2d3351.ce109560.1148c131.3d402e85.4d9dffb9.7913d4d2.075f7928.383ea08e.ade640d7.987d5477.6a222d4e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumSSLTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 44,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all Certificate Authorities are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all Certificate Authorities are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309,
                  "startColumn": 34,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1668401c0e42fca91c824041b243c831cef798a96e51645483bc041f6e9d86b",
            "1": "8df8fa68.82e1e00c.71d4de8c.de031890.f0e1baa5.ce109560.5b1ccecb.1d874c72.8df8fa68.82e1e00c.71d4de8c.de031890.f0e1baa5.ce109560.5b1ccecb.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/test/X509AuthTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 310,
                            "endLine": 310,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all Certificate Authorities are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all Certificate Authorities are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 57,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ca4fbe151e006a2e163cda4f3da1cab25859aa6aef30df85bd9bfbaa707032cc",
            "1": "8df8fa68.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.f1ccdb3e.d9e01f64.8df8fa68.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.f1ccdb3e.d9e01f64"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 25,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6c63c6ac05ef191fea3b5d5ccb99bc67ca5975ad379d24059e1962c1d71943bf",
            "1": "8df8fa68.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64.8df8fa68.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 25,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce9358ab99615501c99db711dd43a63623476c88f11b95b810dd75b0ec9bbeeb",
            "1": "8df8fa68.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64.8df8fa68.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 205,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Reflection/test",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.lang.Class.forName, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22)",
              "[java.lang.Class.forName](23)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "680f651cceafe77631ade78258546ce39ddbb51855039a415c7b056bacd918a2",
            "1": "682e2f2f.ff76257e.1b9a1d8e.1243e009.025462d2.117e971f.df7e59ba.203bd690.8df8fa68.7f413d6f.622565c7.1243e009.025462d2.af5c1272.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 9,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 32,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 9,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 190,
                            "endLine": 190,
                            "startColumn": 15,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 33,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 33,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 33,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 246,
                            "startColumn": 24,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 32,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 249,
                            "endLine": 249,
                            "startColumn": 25,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 47,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 28,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 262,
                            "endLine": 262,
                            "startColumn": 38,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 25,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 52,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 38,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Reflection",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.lang.Class.forName, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used for Reflection. This may result in an Unsafe Reflection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[java.lang.Class.forName](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 26,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "284015ac788c56636440539cc8bb4fb663cf26d1f4ac11cd5585c4b55810524f",
            "1": "bbbd7c96.1cbd3ff4.5fbb9eba.acdec820.49520b64.9feb6e0b.b192288b.62e84f6e.e1d7cd7c.bc22c35e.1f78ea81.de031890.49520b64.aaf342fd.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 13,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 40,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 26,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 302,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/NoHardcodedCredentials/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code.",
            "markdown": "Do not hardcode credentials in code.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AuthUtilTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 23,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d87d9d2202b8b6505689cb000eb4b8dc4328a21e17438fede155e3f1637bca7f",
            "1": "19689298.83dbfe52.498edbfc.d97bcab7.0bf67f0b.4e1269f6.f0e0ed1a.54d46e25.19689298.5e9faa36.498edbfc.64bd9e30.0bf67f0b.4e1269f6.85fbc829.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AuthUtilTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 152,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 3,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 56,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 36,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 921,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 21,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Java",
            "files": 1,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 8,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

[
    {
      "number": 55,
      "created_at": "2024-08-14T06:20:02Z",
      "updated_at": "2024-08-14T06:20:04Z",
      "url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/55",
      "html_url": "https://github.com/Be-Secure/RomRaider/security/code-scanning/55",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "java/concatenated-command-line",
        "severity": "error",
        "description": "Building a command line with string concatenation",
        "name": "java/concatenated-command-line",
        "tags": ["external/cwe/cwe-078","external/cwe/cwe-088","security"],
        "full_description": "Using concatenated strings in a command line is vulnerable to malicious insertion of special characters in the strings.",
        "help": "# Building a command line with string concatenation\nCode that builds a command line by concatenating strings that have been entered by a user allows the user to execute malicious code.\n\n\n## Recommendation\nExecute external commands using an array of strings rather than a single string. By using an array, many possible vulnerabilities in the formatting of the string are avoided.\n\n\n## Example\nIn the following example, `latlonCoords` contains a string that has been entered by a user but not validated by the program. This allows the user to, for example, append an ampersand (&amp;) followed by the command for a malicious program to the end of the string. The ampersand instructs Windows to execute another program. In the block marked 'BAD', `latlonCoords` is passed to `exec` as part of a concatenated string, which allows more than one command to be executed. However, in the block marked 'GOOD', `latlonCoords` is passed as part of an array, which means that `exec` treats it only as an argument.\n\n\n```java\nclass Test {\n    public static void main(String[] args) {\n        // BAD: user input might include special characters such as ampersands\n        {\n            String latlonCoords = args[1];\n            Runtime rt = Runtime.getRuntime();\n            Process exec = rt.exec(\"cmd.exe /C latlon2utm.exe \" + latlonCoords);\n        }\n\n        // GOOD: use an array of arguments instead of executing a string\n        {\n            String latlonCoords = args[1];\n            Runtime rt = Runtime.getRuntime();\n            Process exec = rt.exec(new String[] {\n                    \"c:\\\\path\\to\\latlon2utm.exe\",\n                    latlonCoords });\n        }\n    }\n}\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* SEI CERT Oracle Coding Standard for Java: [IDS07-J. Sanitize untrusted data passed to the Runtime.exec() method](https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec()+method).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.18.1"
      },
      "most_recent_instance": {
        "ref": "refs/heads/1.0.0-DEC01-2023",
        "analysis_key": ".github/workflows/codeql.yml:analyze",
        "environment": "{\"build-mode\":\"none\",\"language\":\"java-kotlin\"}",
        "category": "/language:java-kotlin",
        "state": "open",
        "commit_sha": "75f4da3f25eb41a6db08692cbc5ddc4e3f8bd19c",
        "message": {
          "text": "Command line is built with string concatenation."
        },
        "location": {
          "path": "src/main/java/com/romraider/net/BrowserControl.java",
          "start_line": 62,
          "end_line": 62,
          "start_column": 51,
          "end_column": 54
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/55/instances"
    },
    {
      "number": 54,
      "created_at": "2024-08-14T06:20:02Z",
      "updated_at": "2024-08-14T06:20:04Z",
      "url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/54",
      "html_url": "https://github.com/Be-Secure/RomRaider/security/code-scanning/54",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "java/concatenated-command-line",
        "severity": "error",
        "description": "Building a command line with string concatenation",
        "name": "java/concatenated-command-line",
        "tags": ["external/cwe/cwe-078","external/cwe/cwe-088","security"],
        "full_description": "Using concatenated strings in a command line is vulnerable to malicious insertion of special characters in the strings.",
        "help": "# Building a command line with string concatenation\nCode that builds a command line by concatenating strings that have been entered by a user allows the user to execute malicious code.\n\n\n## Recommendation\nExecute external commands using an array of strings rather than a single string. By using an array, many possible vulnerabilities in the formatting of the string are avoided.\n\n\n## Example\nIn the following example, `latlonCoords` contains a string that has been entered by a user but not validated by the program. This allows the user to, for example, append an ampersand (&amp;) followed by the command for a malicious program to the end of the string. The ampersand instructs Windows to execute another program. In the block marked 'BAD', `latlonCoords` is passed to `exec` as part of a concatenated string, which allows more than one command to be executed. However, in the block marked 'GOOD', `latlonCoords` is passed as part of an array, which means that `exec` treats it only as an argument.\n\n\n```java\nclass Test {\n    public static void main(String[] args) {\n        // BAD: user input might include special characters such as ampersands\n        {\n            String latlonCoords = args[1];\n            Runtime rt = Runtime.getRuntime();\n            Process exec = rt.exec(\"cmd.exe /C latlon2utm.exe \" + latlonCoords);\n        }\n\n        // GOOD: use an array of arguments instead of executing a string\n        {\n            String latlonCoords = args[1];\n            Runtime rt = Runtime.getRuntime();\n            Process exec = rt.exec(new String[] {\n                    \"c:\\\\path\\to\\latlon2utm.exe\",\n                    latlonCoords });\n        }\n    }\n}\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* SEI CERT Oracle Coding Standard for Java: [IDS07-J. Sanitize untrusted data passed to the Runtime.exec() method](https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec()+method).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.18.1"
      },
      "most_recent_instance": {
        "ref": "refs/heads/1.0.0-DEC01-2023",
        "analysis_key": ".github/workflows/codeql.yml:analyze",
        "environment": "{\"build-mode\":\"none\",\"language\":\"java-kotlin\"}",
        "category": "/language:java-kotlin",
        "state": "open",
        "commit_sha": "75f4da3f25eb41a6db08692cbc5ddc4e3f8bd19c",
        "message": {
          "text": "Command line is built with string concatenation."
        },
        "location": {
          "path": "src/main/java/com/romraider/net/BrowserControl.java",
          "start_line": 57,
          "end_line": 57,
          "start_column": 55,
          "end_column": 58
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/54/instances"
    },
    {
      "number": 53,
      "created_at": "2024-08-14T06:20:02Z",
      "updated_at": "2024-08-14T06:20:04Z",
      "url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/53",
      "html_url": "https://github.com/Be-Secure/RomRaider/security/code-scanning/53",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "java/concatenated-command-line",
        "severity": "error",
        "description": "Building a command line with string concatenation",
        "name": "java/concatenated-command-line",
        "tags": ["external/cwe/cwe-078","external/cwe/cwe-088","security"],
        "full_description": "Using concatenated strings in a command line is vulnerable to malicious insertion of special characters in the strings.",
        "help": "# Building a command line with string concatenation\nCode that builds a command line by concatenating strings that have been entered by a user allows the user to execute malicious code.\n\n\n## Recommendation\nExecute external commands using an array of strings rather than a single string. By using an array, many possible vulnerabilities in the formatting of the string are avoided.\n\n\n## Example\nIn the following example, `latlonCoords` contains a string that has been entered by a user but not validated by the program. This allows the user to, for example, append an ampersand (&amp;) followed by the command for a malicious program to the end of the string. The ampersand instructs Windows to execute another program. In the block marked 'BAD', `latlonCoords` is passed to `exec` as part of a concatenated string, which allows more than one command to be executed. However, in the block marked 'GOOD', `latlonCoords` is passed as part of an array, which means that `exec` treats it only as an argument.\n\n\n```java\nclass Test {\n    public static void main(String[] args) {\n        // BAD: user input might include special characters such as ampersands\n        {\n            String latlonCoords = args[1];\n            Runtime rt = Runtime.getRuntime();\n            Process exec = rt.exec(\"cmd.exe /C latlon2utm.exe \" + latlonCoords);\n        }\n\n        // GOOD: use an array of arguments instead of executing a string\n        {\n            String latlonCoords = args[1];\n            Runtime rt = Runtime.getRuntime();\n            Process exec = rt.exec(new String[] {\n                    \"c:\\\\path\\to\\latlon2utm.exe\",\n                    latlonCoords });\n        }\n    }\n}\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* SEI CERT Oracle Coding Standard for Java: [IDS07-J. Sanitize untrusted data passed to the Runtime.exec() method](https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec()+method).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.18.1"
      },
      "most_recent_instance": {
        "ref": "refs/heads/1.0.0-DEC01-2023",
        "analysis_key": ".github/workflows/codeql.yml:analyze",
        "environment": "{\"build-mode\":\"none\",\"language\":\"java-kotlin\"}",
        "category": "/language:java-kotlin",
        "state": "open",
        "commit_sha": "75f4da3f25eb41a6db08692cbc5ddc4e3f8bd19c",
        "message": {
          "text": "Command line is built with string concatenation."
        },
        "location": {
          "path": "src/main/java/com/romraider/net/BrowserControl.java",
          "start_line": 54,
          "end_line": 54,
          "start_column": 43,
          "end_column": 46
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/53/instances"
    },
    {
      "number": 52,
      "created_at": "2024-08-14T06:20:02Z",
      "updated_at": "2024-08-14T06:20:04Z",
      "url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/52",
      "html_url": "https://github.com/Be-Secure/RomRaider/security/code-scanning/52",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "java/weak-cryptographic-algorithm",
        "severity": "warning",
        "description": "Use of a broken or risky cryptographic algorithm",
        "name": "java/weak-cryptographic-algorithm",
        "tags": ["external/cwe/cwe-327","external/cwe/cwe-328","security"],
        "full_description": "Using broken or weak cryptographic algorithms can allow an attacker to compromise security.",
        "help": "# Use of a broken or risky cryptographic algorithm\nUsing broken or weak cryptographic algorithms can leave data vulnerable to being decrypted.\n\nMany cryptographic algorithms provided by cryptography libraries are known to be weak, or flawed. Using such an algorithm means that an attacker may be able to easily decrypt the encrypted data.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic algorithm. Use at least AES-128 or RSA-2048. Do not use the ECB encryption mode since it is vulnerable to replay and other attacks.\n\n\n## Example\nThe following code shows an example of using a java `Cipher` to encrypt some data. When creating a `Cipher` instance, you must specify the encryption algorithm to use. The first example uses DES, which is an older algorithm that is now considered weak. The second example uses AES, which is a strong modern algorithm.\n\n\n```java\n// BAD: DES is a weak algorithm \nCipher des = Cipher.getInstance(\"DES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\nbyte[] encrypted = cipher.doFinal(input.getBytes(\"UTF-8\"));\n\n// ...\n\n// GOOD: AES is a strong algorithm\nCipher aes = Cipher.getInstance(\"AES\");\n\n// ...\n\n```\n\n## References\n* NIST, FIPS 140 Annex a: [ Approved Security Functions](http://csrc.nist.gov/publications/fips/fips140-2/fips1402annexa.pdf).\n* NIST, SP 800-131A: [ Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.18.1"
      },
      "most_recent_instance": {
        "ref": "refs/heads/1.0.0-DEC01-2023",
        "analysis_key": ".github/workflows/codeql.yml:analyze",
        "environment": "{\"build-mode\":\"none\",\"language\":\"java-kotlin\"}",
        "category": "/language:java-kotlin",
        "state": "open",
        "commit_sha": "75f4da3f25eb41a6db08692cbc5ddc4e3f8bd19c",
        "message": {
          "text": "Cryptographic algorithm MD5 is weak and should not be used."
        },
        "location": {
          "path": "src/main/java/com/romraider/util/MD5Checksum.java",
          "start_line": 35,
          "end_line": 35,
          "start_column": 24,
          "end_column": 56
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/52/instances"
    },
    {
      "number": 51,
      "created_at": "2024-08-14T06:20:02Z",
      "updated_at": "2024-08-14T06:20:04Z",
      "url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/51",
      "html_url": "https://github.com/Be-Secure/RomRaider/security/code-scanning/51",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "java/implicit-cast-in-compound-assignment",
        "severity": "warning",
        "description": "Implicit narrowing conversion in compound assignment",
        "name": "java/implicit-cast-in-compound-assignment",
        "tags": ["external/cwe/cwe-190","external/cwe/cwe-192","external/cwe/cwe-197","external/cwe/cwe-681","reliability","security"],
        "full_description": "Compound assignment statements (for example 'intvar += longvar') that implicitly cast a value of a wider type to a narrower type may result in information loss and numeric errors such as overflows.",
        "help": "# Implicit narrowing conversion in compound assignment\nCompound assignment statements of the form `x += y` or `x *= y` perform an implicit narrowing conversion if the type of `x` is narrower than the type of `y`. For example, `x += y` is equivalent to `x = (T)(x + y)`, where `T` is the type of `x`. This can result in information loss and numeric errors such as overflows.\n\n\n## Recommendation\nEnsure that the type of the left-hand side of the compound assignment statement is at least as wide as the type of the right-hand side.\n\n\n## Example\nIf `x` is of type `short` and `y` is of type `int`, the expression `x + y` is of type `int`. However, the expression `x += y` is equivalent to `x = (short) (x + y)`. The expression `x + y` is cast to the type of the left-hand side of the assignment: `short`, possibly leading to information loss.\n\nTo avoid implicitly narrowing the type of `x + y`, change the type of `x` to `int`. Then the types of `x` and `x + y` are both `int` and there is no need for an implicit cast.\n\n\n## References\n* J. Bloch and N. Gafter, *Java Puzzlers: Traps, Pitfalls, and Corner Cases*, Puzzle 9. Addison-Wesley, 2005.\n* Java Language Specification: [Compound Assignment Operators](https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-15.26.2), [Narrowing Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se11/html/jls-5.html#jls-5.1.3).\n* SEI CERT Oracle Coding Standard for Java: [NUM00-J. Detect or prevent integer overflow](https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow).\n* Common Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html).\n* Common Weakness Enumeration: [CWE-192](https://cwe.mitre.org/data/definitions/192.html).\n* Common Weakness Enumeration: [CWE-197](https://cwe.mitre.org/data/definitions/197.html).\n* Common Weakness Enumeration: [CWE-681](https://cwe.mitre.org/data/definitions/681.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.18.1"
      },
      "most_recent_instance": {
        "ref": "refs/heads/1.0.0-DEC01-2023",
        "analysis_key": ".github/workflows/codeql.yml:analyze",
        "environment": "{\"build-mode\":\"none\",\"language\":\"java-kotlin\"}",
        "category": "/language:java-kotlin",
        "state": "open",
        "commit_sha": "75f4da3f25eb41a6db08692cbc5ddc4e3f8bd19c",
        "message": {
          "text": "Implicit cast of source type long to narrower destination type short."
        },
        "location": {
          "path": "src/main/java/com/romraider/maps/checksum/ChecksumMOTRONICSINGLE.java",
          "start_line": 89,
          "end_line": 89,
          "start_column": 10,
          "end_column": 76
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Be-Secure/RomRaider/code-scanning/alerts/51/instances"
    }
  ]
  
{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/TooSmallKeySize/test",
              "name": "TooSmallKeySize/test",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooSmallKeySize",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/SpectoLabs/hoverfly/commit/eb81c2fae1a221c84cab117ddf49fccebd5fbe5a?diff=split#diff-965a187cf83f11b849592d8aa529233b5582250934cf18cc1f180146d3cce8c9L-1",
                    "lines": [
                      {
                        "line": "if certpriv, err = rsa.GenerateKey(&csprng, 1024); err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if certpriv, err = rsa.GenerateKey(&csprng, 2048); err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dexidp/dex/commit/ebbea78a2eb0f89104ccedf54a7752f601b72fd5?diff=split#diff-6444da6f08283a8a297591982046312b72dcdf1237bd6eab4f1c4a8651b1ccdfL-1",
                    "lines": [
                      {
                        "line": "pk, err := rsa.GenerateKey(rand.Reader, 1024)\n",
                        "lineNumber": 137,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pk, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 137,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/projectdiscovery/proxify/commit/7689d033356ca4f261abbfb1f0204125b17777b7?diff=split#diff-5a0126469133e77b4feb1e4a339dac1fe9e6dc503e3e16db0f3e9d796fde3e62L-1",
                    "lines": [
                      {
                        "line": "certpriv, err := rsa.GenerateKey(rand.Reader, 1024)\n",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "certpriv, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 3,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "go/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bytedance/Elkeid/commit/b070a02bf892b9e386d413041f09bd02d6e4468c?diff=split#diff-a74e9f02d2ff047da859c6d9072f60c804374279234946d0df77c91b6258e4b7L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCOilhIX0gfW5ETYUoz\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Ws6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/Bsv+mrMKKWXFCb+yE\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAopO34ebd/hwCtyWEt/\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChgdSjpKo1UC2B8Jngf\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+wwW12Ja43ttna1LGf\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABAoIBAC2ftMIK4PWk44Zd\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aakO/LEsf6ssC7p43rwG4CFAlBYuuAWwqQyFuqvXP4OeIIgtrLF0F10L+cnqOWmj\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0sG8sXBkzx9zOUOJ70LB6C4FgtxioBE67vs+fMF4Na999nwSb+WdfNzrONW8PoBF\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9PNMs2pck3AdxZLfI54BIYzr3jtzVDJ0Rf2GwgEXA9XqJIeRSjNZj6vcIlpQ2NeP\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "r3/zCDhfaVHnO1f89rTRWPRYxlx32eAU4s+WX6HA3OsWm2ec9i+J3k9qiuDnDZtU\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SfOox0nHsrszO1H3aJRiE2GClyOrHbnKXDtKo/m39sF03J8SnWyY/odcqN3TLI0x\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IV9iTuECgYEA4jCxhkloP6OWoF9UbtC5PCzmW9MJDGh4+Lthxi51FBSHW0N2TvsA\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EW2M0aQ3qrlyUuLLLsKgJ7qRHUaVkV7Im8j8GHa1H4AXI0ZLlImsgOmpxaeeDVFu\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "xDtjDZtFWp+RWPNVeabS1sMFh3/+FX2xco7siHSYO0FckeuLHK8O+jECgYEA0RBE\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Q5kicAbBIlg3KY/D9VOov8/eaVLqTURbzansBYeN1gTYvyPA0bKygW2KbOb8Htvq\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "goCz01RUKHc3D6E4o1zauialorwZBKs/4nivU/HKAQ2nQS5z1tALlRk4kdacapYH\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7iFPxvSpz31ksc7FaRjilWE479kSn21pbhYhOw8CgYBkfTWhb2N9QnRc831Tbi+d\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aGU/TlaqyI9WEgmyPlmNfkFUbnhVRnYVSBJT4R1KH/GGmXOjZpw4ik6GLyGr3+xI\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Kda2F6cIQ6QD6+sQJsoYy7a9NWamjBMl4yxykxUQ2et9FT5YOaFaAHKobFi5u4nm\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "V1EGnqYzTSqPOZIoQC3rQQKBgQC/a2t1kXLsq+KOdcMcNNwxdgYeik+UlCyfzqVX\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6+uFLJZ7jTh/2lakKkAzLX7/M4dJIgbYssr0BlSAMJejofRf75b9toEWPa+SjNIT\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pHi0HcDdsgigL840s4zHWa5oKd5R4Uklii6ndkE9EAzwmOg70GM2byxYv6LDgsRz\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3aNTlQKBgE/64EGwbQ/MnuGwEDaWV1BsdjzZjKL9yr2udpfR8vEyJZR7y3CQha9w\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "u+CsLYjkGEDnGX7d/N5KeeAWD7esLMfFEHRmYKsXKmicBvyzMIciVATWuo4z1LH5\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "HEW5L05P4qYNwZEt/0gUukrYfWyTm+Q435aPB/d12GDn28ZjUAJe\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDxTCCAq2gAwIBAgIJAMfNY7aa7VezMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAYTAkdCMQ4wDAYDVQQHDAVDaGluYTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNV\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAMME2hpZHMtc3ZyQGdpdGh1Yi5jb20wHhcNMjEwMzExMDgwNTE5WhcNMzEwMzA5\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MDgwNTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoM\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CGhpZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkq\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCO\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ilhIX0gfW5ETYUozWs6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/B\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sv+mrMKKWXFCb+yE4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAop\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "O34ebd/hwCtyWEt/fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChg\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dSjpKo1UC2B8JngfT/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+w\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "wW12Ja43ttna1LGfGQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABo4Gl\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIGiMGgGA1UdIwRhMF+hUqRQME4xCzAJBgNVBAYTAkdCMQ4wDAYDVQQHDAVDaGlu\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNVBAMME2hpZHMtc3ZyQGdpdGh1Yi5j\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b22CCQC3DBG9MtGPzDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAeBgNVHREEFzAV\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ghNoaWRzX3N2ci5naXRodWIuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCiMeOHraB8\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3yvoGVetHJPCKlFnThsxoS1fZtl3RT2blDVJeXb3m3EVJJRw+RAeQ2dAg9BIDXDI\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6k3ZBveewxLSu6EggKn8RKzprek/nPhawOU+qiEbwWENSQFj/5FY2sPE+RXjlBwe\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "/lbmRbcmJsLtMIqzMkhFHx/mEliIVwC8B/J3trrhGcLRuvB6sXM79nqkjGYhVyIN\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y0x1DbB/I8ifmx3L+rCW5iaNp0pHHpjUtrU5yxcb5OtfRuYVp5RjvzETU9XbTWKU\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5jGwhvZ3QEy568CeDEYUyofANREfnYohQHS6NcZ8D5Iqxx4OxovoLygcfE4MYVZq\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2L9cH5F0OWIs\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tCaCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDGjCCAgICCQC3DBG9MtGPzDANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJH\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhpZHMtc3ZyMRwwGgYDVQQDDBNo\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aWRzLXN2ckBnaXRodWIuY29tMCAXDTIxMDMxMTA4MDUxOVoYDzIxMjEwMjE1MDgw\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhp\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkqhkiG\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0YUgwaI9gyZxpl03mh4hv6T0/WaB3E7GeK5e\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "w4eS5VO6I9b+8DDYJAHqhxraQAt/F9TBwVW1Oljo8YNuyjaCpSlRjQnqHiLSA1Tq\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "P7YAMoZq3MnfmE882QR9/aJ4JL+c4fHg8GauilR/1TaZMj3sEsRenqFk5bFW+fbm\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VYmWR0/Oeu3sNJ7mG8WgrWeFF3uUz+L98RXmeLbGGVDqObTogOPXz0rZsVkzGVYs\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeBnBOdVvqdbs4FUsVgw/BYy2XrBDdSNnfxjXD7tp+F+IRtyx4kN8wEsQ5aJTpC+\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "U9QzFJBglyjjepCqfqdSjW4J5Dzdv2KsFDza/lvHtE8U4NOoVQIDAQABMA0GCSqG\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SIb3DQEBCwUAA4IBAQBxUVzWjaDY05Vk27xWooXoQIcTrc5/+ly7UPnoF2sk1tc6\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nP4VpNAFNk46MP9PhGLa6qIqFEQXhWB99AyGliSb8o2Lv/+kvm4y7ch7v5W/Ae0X\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UIMCO6IBMU8QP3niuaJSTcEmu7B1zIj03lLlbZFboLns/2U46ZnmWtyxxBcxfM/O\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RtQeJpfIffQZunx9ftuvEix54mOncrYow9dPAFkcDxgcbRtgKN7ESksL8YherCuI\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pZCj0XpwSglYjDby0p2nuANUucj6m8DSqDVIzbNcAvycbYe07kc1PiUpi1vcGhI+\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uAVEAPxTCl1poB75onPUNTb6NigCpGA5Ip1zBnUq\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import _ \"embed\"\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.key\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientKey []byte\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.crt\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientCert []byte\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed ca.crt\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "var CaCert []byte\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ChrisRx/dungeonfs/commit/34ea225ad07c50f262756fd1d3eb821962e29347?diff=split#diff-92e2cbc286c92525f3cfcd6ea1c84f711f4f65379d23431b01ac18bccc174f4eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tTroll = `\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                       _-------------------_\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     _            _   /                     \\\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    | \\  __--__  / |  |  Roar! I'm a troll! | \n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |  \\/      \\/  |  \\                     /\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\__  \\    / __ /   -_  ________________-\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     /   O    -   \\     / /\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |      oo      |    /\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\ -- ______ -- /  \n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     (_  |\\||/|  _)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "       --______--\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "`\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tKey = []byte(`-----BEGIN PRIVATE KEY-----\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMjSi/S67mqFDGP0\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+MRBkidG6zenktXMPMcwXCN1WQjHAo4Gcp9GqjH+IVTgBSO7tdz9VxxKAJgSFXqv\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kWj95QjoT6OTjVk0UXH4t9PV7OU2jn/xnA8pqhg4sxVzbVq9LSB55CsqNpX5IpUu\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9cUUgiq9rzDBmh4bg1X9fUHufAxbAgMBAAECgYAfARKGeA2y+FOPYxS9B/qOgc5y\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "yzZKN7vybK7s8oMKbd8hGjG8EWbZTQjMV8GzYJmVQq+eOHabA7+5Lz3d3cTsMu5I\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DSCKGers7AHHQAYQv0P14CxBp5PFY5qewMYB/FITcD/Z25YXlg3ZjwCB3XrQwLnN\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QB83C1r6lcFi2fdioQJBAPP/Wy39L+Vda7thcRPcQpb4FmpwU+v+Rzpxov5KRq9G\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "38u3BVd0GdSwQWLVDMmvSLy70doGgxJ5p54YPScxCfkCQQDSs31+ftL34+lSXtrx\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5utBZc34q3UcCOa3twoHTzxGeM4BiYvAcVa+PjdWRaNXz71UBs2GQWWihApZoGk9\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2X3zAkEAllFwI/ICauTV9Re/6UNeBtIKRUK0gQQjb58Ikm7CA0O/pio38TvGmiCH\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "99JXUX1aa2OukgpG/7/RAvXd3uI4SQJAdHJ2nP6CojX3sWpzHtY8lrwpBZHc+02A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FXC3vipwaZJCaF8YOZdqFWJVOvzptZI+VL4dwGFMRnErNzWMdH5LOQJABytqQ8eF\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "qM/JedHdd4l6ADmUA3A3JxF6eQwYUEd7V51f1dKHB7El2nCLPD1lLgWNewYLg5a6\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "eVH4jECLO2OH8Q==\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END PRIVATE KEY----- `)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type ResourceType int\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tFileResource ResourceType = iota\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tDirResource\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ginuerzh/gost/commit/9ef10b90a9367083c0018cb0185ef7e968867f0b?diff=split#diff-366e46a40f6f60b4f7614eb0976bb51820364bf5ca6ccc4787eb49d7bdbef3e6L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/ginuerzh/gosocks5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/shadowsocks/shadowsocks-go/shadowsocks\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"net\"\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t//\"strconv\"\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/tls\"\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIC5jCCAdCgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bzAeFw0xNDAzMTcwNjIwNTFaFw0xNTAzMTcwNjIwNTFaMBIxEDAOBgNVBAoTB0Fj\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bWUgQ28wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDccNO1xmd4lWSf\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "d/0/QS3E93cYIWHw831i/IKxigdRD/XMZonLdEHywW6lOiXazaP8e6CqPGSmnl0x\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5k/3dvGCMj2JCVxM6+z7NpL+AiwvXmvkj/TOciCgwqssCwYS2CiVwjfazRjx1ZUJ\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VDC5qiyRsfktQ2fVHrpnJGVSRagmiQgwGWBilVG9B8QvRtpQKN/GQGq17oIQm8aK\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kOdPt93g93ojMIg7YJpgDgOirvVz/hDn7YD4ryrtPos9CMafFkJprymKpRHyvz7P\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8a3+OkuPjFjPnwOHQ5u1U3+8vC44vfb1ExWzDLoT8Xp8Gndx39k0f7MVOol3GnYu\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MN/dvNUdAgMBAAGjSzBJMA4GA1UdDwEB/wQEAwIAoDATBgNVHSUEDDAKBggrBgEF\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BQcDATAMBgNVHRMBAf8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDALBgkqhkiG\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQUDggEBAIG8CJqvTIgJnNOK+i5/IUc/3yF/mSCWuG8qP+Fmo2t6T0PVOtc0\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8wiWH5iWtCAhjn0MRY9l/hIjWm6gUZGHCGuEgsOPpJDYGoNLjH9Xwokm4y3LFNRK\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UBrrrDbKRNibApBHCapPf6gC5sXcjOwx7P2/kiHDgY7YH47jfcRhtAPNsM4gjsEO\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RmwENY+hRUFHIRfQTyalqND+x6PWhRo3K6hpHs4DQEYPq4P2kFPqUqSBymH+Ny5/\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BcQ3wdMNmC6Bm/oiL1QV0M+/InOsAgQk/EDd0kmoU1ZT2lYHQduGmP099bOlHNpS\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uqO3vXF3q8SPPr/A9TqSs7BKkBQbe0+cdsA=\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEA3HDTtcZneJVkn3f9P0EtxPd3GCFh8PN9YvyCsYoHUQ/1zGaJ\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y3RB8sFupTol2s2j/Hugqjxkpp5dMeZP93bxgjI9iQlcTOvs+zaS/gIsL15r5I/0\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "znIgoMKrLAsGEtgolcI32s0Y8dWVCVQwuaoskbH5LUNn1R66ZyRlUkWoJokIMBlg\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YpVRvQfEL0baUCjfxkBqte6CEJvGipDnT7fd4Pd6IzCIO2CaYA4Doq71c/4Q5+2A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+K8q7T6LPQjGnxZCaa8piqUR8r8+z/Gt/jpLj4xYz58Dh0ObtVN/vLwuOL329RMV\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "swy6E/F6fBp3cd/ZNH+zFTqJdxp2LjDf3bzVHQIDAQABAoIBAHal26147nQ+pHwY\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jxwers3XDCjWvup7g79lfcqlKi79UiUEA6KYHm7UogMYewt7p4nb2KwH+XycvDiB\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aAUf5flXpTs+6IkWauUDiLZi4PlV7uiEexUq5FjirlL0U/6MjbudX4bK4WQ4uxDc\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WaV07Kw2iJFOOHLDKT0en9JaX5jtJNc4ZnE9efFoQ5jfypPWtRw65G1rULEg6nvc\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GDh+1ce+4foCkpLRC9c24xAwJONZG6x3UqrSS9qfAsb73nWRQrTfUcO3nhoN8VvL\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kL9skn1+S06NyUN0KoEtyRBp+RcpXSsBWAo6qZmo/WqhB/gjzWrxVwn20+yJSm35\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZsMc6QECgYEA8GS+Mp9xfB2szWHz6YTOO1Uu4lHM1ccZMwS1G+dL0KO3uGAiPdvp\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "woVot6v6w88t7onXsLo5pgz7SYug0CpkF3K/MRd1Ar4lH7PK7IBQ6rFr9ppVxDbx\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AEWRswUoPbKCr7W6HU8LbQHDavsDlEIwc6+DiwnL4BzlKjb7RpgQEz0CgYEA6sB5\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uHvx3Y5FDcGk1n73leQSAcq14l3ZLNpjrs8msoREDil/j5WmuSN58/7PGMiMgHEi\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "1vLm3H796JmvGr9OBvspOjHyk07ui2/We/j9Hoxm1VWhyi8HkLNDj70HKalTTFMz\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RHO4O+0xCva+h9mKZrRMVktXr2jjdFn/0MYIZ2ECgYAIIsC1IeRLWQ3CHbCNlKsO\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IwHlMvOFwKk/qsceXKOaOhA7szU1dr3gkXdL0Aw6mEZrrkqYdpUA46uVf54/rU+Z\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "445I8QxKvXiwK/uQKX+TkdGflPWWIG3jnnch4ejMvb/ihnn4B/bRB6A/fKNQXzUY\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "lTYUfI5j1VaEKTwz1W2l2QKBgByFCcSp+jZqhGUpc3dDsZyaOr3Q/Mvlju7uEVI5\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hIAHpaT60a6GBd1UPAqymEJwivFHzW3D0NxU6VAK68UaHMaoWNfjHY9b9YsnKS2i\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kE3XzN56Ks+/avHfdYPO+UHMenw5V28nh+hv5pdoZrlmanQTz3pkaOC8o3WNQZEB\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nh/BAoGBAMY5z2f1pmMhrvtPDSlEVjgjELbaInxFaxPLR4Pdyzn83gtIIU14+R8X\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2LPs6PPwrNjWnIgrUSVXncIFL3pa45B+Mx1pYCpOAB1+nCZjIBQmpeo4Y0dwA/XH\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "85EthKPvoszm+OPbyI16OcePV5ocX7lupRYuAo0pek7bomhmHWHz\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func selectMethod(methods ...uint8) uint8 {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor _, method := range methods {\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif _, ok := Methods[method]; ok {\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn method\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn gosocks5.MethodNoAuth\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func methodSelected(method uint8, conn net.Conn) (net.Conn, error) {\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch method {\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodTLS:\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar cert tls.Certificate\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar err error\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif len(CertFile) == 0 || len(KeyFile) == 0 {\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.X509KeyPair([]byte(rawCert), []byte(rawKey))\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.LoadX509KeyPair(CertFile, KeyFile)\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tlog.Println(err)\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = tls.Server(conn, &tls.Config{Certificates: []tls.Certificate{cert}})\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodAES128, MethodAES192, MethodAES256,\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tMethodDES, MethodBF, MethodCAST5, MethodRC4MD5, MethodRC4, MethodTable:\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcipher, err := shadowsocks.NewCipher(Methods[method], Password)\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = shadowsocks.NewConn(conn, cipher)\n",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase gosocks5.MethodNoAcceptable:\n",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn nil, gosocks5.ErrBadMethod\n",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type Server interface {\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ListenAndServe() error\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                    "lines": [
                      {
                        "line": "from flask import abort, request, Response, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.json import jsonify\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "import requests\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from shutil import copyfileobj\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tempfile import NamedTemporaryFile\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "from xspf import Xspf\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..app import app, music\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "from ..id3 import MP3\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "JSON_TYPE = 'application/json'\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Mapping: Google : Mutagen EasyID3\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "METADATA_FIELDS = {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'artist': 'artist',\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'title': 'title',\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'album': 'album',\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'albumArtist': 'albumartistsort',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'composer': 'composer',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'trackNumber': 'tracknumber',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'discNumber': 'discnumber',\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'genre': 'genre',\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'year': 'date',\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'durationMillis': 'length',\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "def mp3ify(resp):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.mimetype = 'audio/mpeg'\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return resp\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "def send_song(filename):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return mp3ify(send_file(filename))\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :type playlist: dict\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :rtype: str\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date=create_iso, location=p_url)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for track in playlist['tracks']:\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'track' not in track:\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            continue\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tmd = track['track']\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        metadata = {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'location': url,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'title': tmd['title'],\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'creator': tmd['artist'],\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'album': tmd['album'],\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'trackNum': str(tmd['trackNumber']),\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            'duration': tmd['durationMillis'],\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        album_art = tmd.get('albumArtRef', [])\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if album_art:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "            metadata['image'] = album_art[0]['url']\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xspf.add_track(metadata)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return xspf.toXml()\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/songs/<song_id>')\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_song(song_id):\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                        "lineNumber": 98,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                    "lines": [
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "from app import web, CobraTaskInfo, db\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/', methods=['GET'])\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/index', methods=['GET'])\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def homepage():\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In homepage Route')\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('index.html')\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/blank')\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "def blank():\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In blank Route')\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return render_template('blank.html')\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "@web.route('/add', methods=['POST'])\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "def add():\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.debug('In add Route')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if user upload a file, so we set the scan type to file scan\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan type and level\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_type = request.form['scan_type']\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    level = request.form['level']\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check scan way and version\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scan_way = request.form['scan_way']\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    old_version = request.form['old_version']\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new_version = request.form['new_version']\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not scan_way or not scan_way.isdigit():\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if scan_way == '2':\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not old_version or not new_version:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    elif scan_way == '1':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        old_version = None\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_version = None\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # check if there is a file or gitlab url\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if len(request.files) == 0:\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # no files, should check username and password\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 1\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = request.form['url']\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        username = request.form['username']\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        password = request.form['password']\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not url or not username or not password:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # insert into db\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 scan_way, old_version, new_version)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.add(new_task)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.session.commit()\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # there is a file, check file format and uncompress it.\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        task_type = 2\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src = request.files['file']\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filepath = 'uploads/' + filename\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        upload_src.save(filepath)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # rather than \"application/x-rar\"\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # check file type via mime type\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            os.remove(filepath)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/RunWithDebugTrue",
              "name": "RunWithDebugTrue",
              "shortDescription": {
                "text": "Debug Mode Enabled"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen debugging, it may be necessary to report detailed information to a developer. However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "RunWithDebugTrue",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/datacenter/acitoolkit/commit/f0f9b2cd94b8692c3c15eee3954781f0e0bb0587?diff=split#diff-49a9b8eb9a3986d165fea2b6e1d0c47801ca6fef3700465221e43dde511863c7L-1",
                    "lines": [
                      {
                        "line": "app.run(debug=True, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.run(debug=False, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/datacenter/acitoolkit/commit/f3c3590232b31c72844d53f2fe38fc64a90d9292?diff=split#diff-23e8fe36cdf117b5eb6afcc2e981d0d11ae76ed05a43eea8c19e9495ea334120L-1",
                    "lines": [
                      {
                        "line": "app.run(debug=True, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.run(debug=False, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/simonw/resize-proxy/commit/eb07550872c3d8886fe67751171b18f7cc621cc3?diff=split#diff-b10564ab7d2c520cdd0243874879fb0a782862c3c902ab535faabe57d5a505e1L-1",
                    "lines": [
                      {
                        "line": "run_wsgi_app(webapp.WSGIApplication([\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (r'/w/(\\d+)/', WidthHandler),\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (r'/s/(\\d+)/', SquareHandler),\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "], debug=True))\n",
                        "lineNumber": 121,
                        "lineChange": "removed"
                      },
                      {
                        "line": "], debug=False))\n",
                        "lineNumber": 121,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-489"
                ]
              }
            },
            {
              "id": "go/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bytedance/Elkeid/commit/b070a02bf892b9e386d413041f09bd02d6e4468c?diff=split#diff-a74e9f02d2ff047da859c6d9072f60c804374279234946d0df77c91b6258e4b7L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCOilhIX0gfW5ETYUoz\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Ws6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/Bsv+mrMKKWXFCb+yE\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAopO34ebd/hwCtyWEt/\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChgdSjpKo1UC2B8Jngf\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+wwW12Ja43ttna1LGf\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABAoIBAC2ftMIK4PWk44Zd\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aakO/LEsf6ssC7p43rwG4CFAlBYuuAWwqQyFuqvXP4OeIIgtrLF0F10L+cnqOWmj\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0sG8sXBkzx9zOUOJ70LB6C4FgtxioBE67vs+fMF4Na999nwSb+WdfNzrONW8PoBF\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9PNMs2pck3AdxZLfI54BIYzr3jtzVDJ0Rf2GwgEXA9XqJIeRSjNZj6vcIlpQ2NeP\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "r3/zCDhfaVHnO1f89rTRWPRYxlx32eAU4s+WX6HA3OsWm2ec9i+J3k9qiuDnDZtU\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SfOox0nHsrszO1H3aJRiE2GClyOrHbnKXDtKo/m39sF03J8SnWyY/odcqN3TLI0x\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IV9iTuECgYEA4jCxhkloP6OWoF9UbtC5PCzmW9MJDGh4+Lthxi51FBSHW0N2TvsA\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EW2M0aQ3qrlyUuLLLsKgJ7qRHUaVkV7Im8j8GHa1H4AXI0ZLlImsgOmpxaeeDVFu\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "xDtjDZtFWp+RWPNVeabS1sMFh3/+FX2xco7siHSYO0FckeuLHK8O+jECgYEA0RBE\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Q5kicAbBIlg3KY/D9VOov8/eaVLqTURbzansBYeN1gTYvyPA0bKygW2KbOb8Htvq\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "goCz01RUKHc3D6E4o1zauialorwZBKs/4nivU/HKAQ2nQS5z1tALlRk4kdacapYH\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7iFPxvSpz31ksc7FaRjilWE479kSn21pbhYhOw8CgYBkfTWhb2N9QnRc831Tbi+d\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aGU/TlaqyI9WEgmyPlmNfkFUbnhVRnYVSBJT4R1KH/GGmXOjZpw4ik6GLyGr3+xI\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Kda2F6cIQ6QD6+sQJsoYy7a9NWamjBMl4yxykxUQ2et9FT5YOaFaAHKobFi5u4nm\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "V1EGnqYzTSqPOZIoQC3rQQKBgQC/a2t1kXLsq+KOdcMcNNwxdgYeik+UlCyfzqVX\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6+uFLJZ7jTh/2lakKkAzLX7/M4dJIgbYssr0BlSAMJejofRf75b9toEWPa+SjNIT\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pHi0HcDdsgigL840s4zHWa5oKd5R4Uklii6ndkE9EAzwmOg70GM2byxYv6LDgsRz\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3aNTlQKBgE/64EGwbQ/MnuGwEDaWV1BsdjzZjKL9yr2udpfR8vEyJZR7y3CQha9w\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "u+CsLYjkGEDnGX7d/N5KeeAWD7esLMfFEHRmYKsXKmicBvyzMIciVATWuo4z1LH5\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "HEW5L05P4qYNwZEt/0gUukrYfWyTm+Q435aPB/d12GDn28ZjUAJe\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tClientCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDxTCCAq2gAwIBAgIJAMfNY7aa7VezMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAYTAkdCMQ4wDAYDVQQHDAVDaGluYTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNV\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BAMME2hpZHMtc3ZyQGdpdGh1Yi5jb20wHhcNMjEwMzExMDgwNTE5WhcNMzEwMzA5\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MDgwNTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoM\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CGhpZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkq\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuLggSmOGW6mKi3kQwXYWfeA5j92yAgCO\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ilhIX0gfW5ETYUozWs6gzT90vtHuzEWZubK9c7WGGFLsj58HGBPqAKLzpweGA4/B\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sv+mrMKKWXFCb+yE4by46QET8C3lLZP7Yf8vZ4sPDivwMWnu+JvamR9Lh0ErXAop\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "O34ebd/hwCtyWEt/fLxOhro1dHD0Jc/bBOmOIQLa6J9PbmhVs6IebIVRL8W8bChg\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "dSjpKo1UC2B8JngfT/efpgh4xrIdW6ziqy14uc29VuYaCEDywxP3cCFfGfMPan+w\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "wW12Ja43ttna1LGfGQMNoZsishmCEx9MHtcvLJ0XuLaOhTeDK9rz3wIDAQABo4Gl\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIGiMGgGA1UdIwRhMF+hUqRQME4xCzAJBgNVBAYTAkdCMQ4wDAYDVQQHDAVDaGlu\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YTERMA8GA1UECgwIaGlkcy1zdnIxHDAaBgNVBAMME2hpZHMtc3ZyQGdpdGh1Yi5j\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b22CCQC3DBG9MtGPzDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAeBgNVHREEFzAV\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ghNoaWRzX3N2ci5naXRodWIuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCiMeOHraB8\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "3yvoGVetHJPCKlFnThsxoS1fZtl3RT2blDVJeXb3m3EVJJRw+RAeQ2dAg9BIDXDI\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6k3ZBveewxLSu6EggKn8RKzprek/nPhawOU+qiEbwWENSQFj/5FY2sPE+RXjlBwe\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "/lbmRbcmJsLtMIqzMkhFHx/mEliIVwC8B/J3trrhGcLRuvB6sXM79nqkjGYhVyIN\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y0x1DbB/I8ifmx3L+rCW5iaNp0pHHpjUtrU5yxcb5OtfRuYVp5RjvzETU9XbTWKU\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5jGwhvZ3QEy568CeDEYUyofANREfnYohQHS6NcZ8D5Iqxx4OxovoLygcfE4MYVZq\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2L9cH5F0OWIs\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tCaCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIDGjCCAgICCQC3DBG9MtGPzDANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJH\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhpZHMtc3ZyMRwwGgYDVQQDDBNo\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aWRzLXN2ckBnaXRodWIuY29tMCAXDTIxMDMxMTA4MDUxOVoYDzIxMjEwMjE1MDgw\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NTE5WjBOMQswCQYDVQQGEwJHQjEOMAwGA1UEBwwFQ2hpbmExETAPBgNVBAoMCGhp\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZHMtc3ZyMRwwGgYDVQQDDBNoaWRzLXN2ckBnaXRodWIuY29tMIIBIjANBgkqhkiG\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0YUgwaI9gyZxpl03mh4hv6T0/WaB3E7GeK5e\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "w4eS5VO6I9b+8DDYJAHqhxraQAt/F9TBwVW1Oljo8YNuyjaCpSlRjQnqHiLSA1Tq\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "P7YAMoZq3MnfmE882QR9/aJ4JL+c4fHg8GauilR/1TaZMj3sEsRenqFk5bFW+fbm\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VYmWR0/Oeu3sNJ7mG8WgrWeFF3uUz+L98RXmeLbGGVDqObTogOPXz0rZsVkzGVYs\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeBnBOdVvqdbs4FUsVgw/BYy2XrBDdSNnfxjXD7tp+F+IRtyx4kN8wEsQ5aJTpC+\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "U9QzFJBglyjjepCqfqdSjW4J5Dzdv2KsFDza/lvHtE8U4NOoVQIDAQABMA0GCSqG\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SIb3DQEBCwUAA4IBAQBxUVzWjaDY05Vk27xWooXoQIcTrc5/+ly7UPnoF2sk1tc6\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nP4VpNAFNk46MP9PhGLa6qIqFEQXhWB99AyGliSb8o2Lv/+kvm4y7ch7v5W/Ae0X\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UIMCO6IBMU8QP3niuaJSTcEmu7B1zIj03lLlbZFboLns/2U46ZnmWtyxxBcxfM/O\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RtQeJpfIffQZunx9ftuvEix54mOncrYow9dPAFkcDxgcbRtgKN7ESksL8YherCuI\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pZCj0XpwSglYjDby0p2nuANUucj6m8DSqDVIzbNcAvycbYe07kc1PiUpi1vcGhI+\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uAVEAPxTCl1poB75onPUNTb6NigCpGA5Ip1zBnUq\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import _ \"embed\"\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.key\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientKey []byte\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed client.crt\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "var ClientCert []byte\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "//go:embed ca.crt\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "var CaCert []byte\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ChrisRx/dungeonfs/commit/34ea225ad07c50f262756fd1d3eb821962e29347?diff=split#diff-92e2cbc286c92525f3cfcd6ea1c84f711f4f65379d23431b01ac18bccc174f4eL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tTroll = `\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                       _-------------------_\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     _            _   /                     \\\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    | \\  __--__  / |  |  Roar! I'm a troll! | \n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |  \\/      \\/  |  \\                     /\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\__  \\    / __ /   -_  ________________-\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     /   O    -   \\     / /\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    |      oo      |    /\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \\ -- ______ -- /  \n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "     (_  |\\||/|  _)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "       --______--\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "`\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tKey = []byte(`-----BEGIN PRIVATE KEY-----\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMjSi/S67mqFDGP0\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+MRBkidG6zenktXMPMcwXCN1WQjHAo4Gcp9GqjH+IVTgBSO7tdz9VxxKAJgSFXqv\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kWj95QjoT6OTjVk0UXH4t9PV7OU2jn/xnA8pqhg4sxVzbVq9LSB55CsqNpX5IpUu\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9cUUgiq9rzDBmh4bg1X9fUHufAxbAgMBAAECgYAfARKGeA2y+FOPYxS9B/qOgc5y\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "yzZKN7vybK7s8oMKbd8hGjG8EWbZTQjMV8GzYJmVQq+eOHabA7+5Lz3d3cTsMu5I\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DSCKGers7AHHQAYQv0P14CxBp5PFY5qewMYB/FITcD/Z25YXlg3ZjwCB3XrQwLnN\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "QB83C1r6lcFi2fdioQJBAPP/Wy39L+Vda7thcRPcQpb4FmpwU+v+Rzpxov5KRq9G\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "38u3BVd0GdSwQWLVDMmvSLy70doGgxJ5p54YPScxCfkCQQDSs31+ftL34+lSXtrx\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5utBZc34q3UcCOa3twoHTzxGeM4BiYvAcVa+PjdWRaNXz71UBs2GQWWihApZoGk9\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2X3zAkEAllFwI/ICauTV9Re/6UNeBtIKRUK0gQQjb58Ikm7CA0O/pio38TvGmiCH\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "99JXUX1aa2OukgpG/7/RAvXd3uI4SQJAdHJ2nP6CojX3sWpzHtY8lrwpBZHc+02A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FXC3vipwaZJCaF8YOZdqFWJVOvzptZI+VL4dwGFMRnErNzWMdH5LOQJABytqQ8eF\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "qM/JedHdd4l6ADmUA3A3JxF6eQwYUEd7V51f1dKHB7El2nCLPD1lLgWNewYLg5a6\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "eVH4jECLO2OH8Q==\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END PRIVATE KEY----- `)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type ResourceType int\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tFileResource ResourceType = iota\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tDirResource\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ginuerzh/gost/commit/9ef10b90a9367083c0018cb0185ef7e968867f0b?diff=split#diff-366e46a40f6f60b4f7614eb0976bb51820364bf5ca6ccc4787eb49d7bdbef3e6L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import (\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/ginuerzh/gosocks5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"github.com/shadowsocks/shadowsocks-go/shadowsocks\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"net\"\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t//\"strconv\"\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/tls\"\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawCert = `-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIC5jCCAdCgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bzAeFw0xNDAzMTcwNjIwNTFaFw0xNTAzMTcwNjIwNTFaMBIxEDAOBgNVBAoTB0Fj\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bWUgQ28wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDccNO1xmd4lWSf\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "d/0/QS3E93cYIWHw831i/IKxigdRD/XMZonLdEHywW6lOiXazaP8e6CqPGSmnl0x\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5k/3dvGCMj2JCVxM6+z7NpL+AiwvXmvkj/TOciCgwqssCwYS2CiVwjfazRjx1ZUJ\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "VDC5qiyRsfktQ2fVHrpnJGVSRagmiQgwGWBilVG9B8QvRtpQKN/GQGq17oIQm8aK\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kOdPt93g93ojMIg7YJpgDgOirvVz/hDn7YD4ryrtPos9CMafFkJprymKpRHyvz7P\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8a3+OkuPjFjPnwOHQ5u1U3+8vC44vfb1ExWzDLoT8Xp8Gndx39k0f7MVOol3GnYu\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MN/dvNUdAgMBAAGjSzBJMA4GA1UdDwEB/wQEAwIAoDATBgNVHSUEDDAKBggrBgEF\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BQcDATAMBgNVHRMBAf8EAjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDALBgkqhkiG\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "9w0BAQUDggEBAIG8CJqvTIgJnNOK+i5/IUc/3yF/mSCWuG8qP+Fmo2t6T0PVOtc0\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "8wiWH5iWtCAhjn0MRY9l/hIjWm6gUZGHCGuEgsOPpJDYGoNLjH9Xwokm4y3LFNRK\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "UBrrrDbKRNibApBHCapPf6gC5sXcjOwx7P2/kiHDgY7YH47jfcRhtAPNsM4gjsEO\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RmwENY+hRUFHIRfQTyalqND+x6PWhRo3K6hpHs4DQEYPq4P2kFPqUqSBymH+Ny5/\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BcQ3wdMNmC6Bm/oiL1QV0M+/InOsAgQk/EDd0kmoU1ZT2lYHQduGmP099bOlHNpS\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uqO3vXF3q8SPPr/A9TqSs7BKkBQbe0+cdsA=\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trawKey = `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIEowIBAAKCAQEA3HDTtcZneJVkn3f9P0EtxPd3GCFh8PN9YvyCsYoHUQ/1zGaJ\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "y3RB8sFupTol2s2j/Hugqjxkpp5dMeZP93bxgjI9iQlcTOvs+zaS/gIsL15r5I/0\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "znIgoMKrLAsGEtgolcI32s0Y8dWVCVQwuaoskbH5LUNn1R66ZyRlUkWoJokIMBlg\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "YpVRvQfEL0baUCjfxkBqte6CEJvGipDnT7fd4Pd6IzCIO2CaYA4Doq71c/4Q5+2A\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "+K8q7T6LPQjGnxZCaa8piqUR8r8+z/Gt/jpLj4xYz58Dh0ObtVN/vLwuOL329RMV\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "swy6E/F6fBp3cd/ZNH+zFTqJdxp2LjDf3bzVHQIDAQABAoIBAHal26147nQ+pHwY\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jxwers3XDCjWvup7g79lfcqlKi79UiUEA6KYHm7UogMYewt7p4nb2KwH+XycvDiB\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "aAUf5flXpTs+6IkWauUDiLZi4PlV7uiEexUq5FjirlL0U/6MjbudX4bK4WQ4uxDc\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WaV07Kw2iJFOOHLDKT0en9JaX5jtJNc4ZnE9efFoQ5jfypPWtRw65G1rULEg6nvc\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GDh+1ce+4foCkpLRC9c24xAwJONZG6x3UqrSS9qfAsb73nWRQrTfUcO3nhoN8VvL\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kL9skn1+S06NyUN0KoEtyRBp+RcpXSsBWAo6qZmo/WqhB/gjzWrxVwn20+yJSm35\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ZsMc6QECgYEA8GS+Mp9xfB2szWHz6YTOO1Uu4lHM1ccZMwS1G+dL0KO3uGAiPdvp\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "woVot6v6w88t7onXsLo5pgz7SYug0CpkF3K/MRd1Ar4lH7PK7IBQ6rFr9ppVxDbx\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AEWRswUoPbKCr7W6HU8LbQHDavsDlEIwc6+DiwnL4BzlKjb7RpgQEz0CgYEA6sB5\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "uHvx3Y5FDcGk1n73leQSAcq14l3ZLNpjrs8msoREDil/j5WmuSN58/7PGMiMgHEi\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "1vLm3H796JmvGr9OBvspOjHyk07ui2/We/j9Hoxm1VWhyi8HkLNDj70HKalTTFMz\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "RHO4O+0xCva+h9mKZrRMVktXr2jjdFn/0MYIZ2ECgYAIIsC1IeRLWQ3CHbCNlKsO\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IwHlMvOFwKk/qsceXKOaOhA7szU1dr3gkXdL0Aw6mEZrrkqYdpUA46uVf54/rU+Z\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "445I8QxKvXiwK/uQKX+TkdGflPWWIG3jnnch4ejMvb/ihnn4B/bRB6A/fKNQXzUY\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "lTYUfI5j1VaEKTwz1W2l2QKBgByFCcSp+jZqhGUpc3dDsZyaOr3Q/Mvlju7uEVI5\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hIAHpaT60a6GBd1UPAqymEJwivFHzW3D0NxU6VAK68UaHMaoWNfjHY9b9YsnKS2i\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "kE3XzN56Ks+/avHfdYPO+UHMenw5V28nh+hv5pdoZrlmanQTz3pkaOC8o3WNQZEB\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "nh/BAoGBAMY5z2f1pmMhrvtPDSlEVjgjELbaInxFaxPLR4Pdyzn83gtIIU14+R8X\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "2LPs6PPwrNjWnIgrUSVXncIFL3pa45B+Mx1pYCpOAB1+nCZjIBQmpeo4Y0dwA/XH\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "85EthKPvoszm+OPbyI16OcePV5ocX7lupRYuAo0pek7bomhmHWHz\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func selectMethod(methods ...uint8) uint8 {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor _, method := range methods {\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif _, ok := Methods[method]; ok {\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn method\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn gosocks5.MethodNoAuth\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func methodSelected(method uint8, conn net.Conn) (net.Conn, error) {\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch method {\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodTLS:\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar cert tls.Certificate\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvar err error\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif len(CertFile) == 0 || len(KeyFile) == 0 {\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.X509KeyPair([]byte(rawCert), []byte(rawKey))\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tcert, err = tls.LoadX509KeyPair(CertFile, KeyFile)\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tlog.Println(err)\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = tls.Server(conn, &tls.Config{Certificates: []tls.Certificate{cert}})\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase MethodAES128, MethodAES192, MethodAES256,\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tMethodDES, MethodBF, MethodCAST5, MethodRC4MD5, MethodRC4, MethodTable:\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcipher, err := shadowsocks.NewCipher(Methods[method], Password)\n",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tconn = shadowsocks.NewConn(conn, cipher)\n",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase gosocks5.MethodNoAcceptable:\n",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn nil, gosocks5.ErrBadMethod\n",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "type Server interface {\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ListenAndServe() error\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "Ssrf",
                  "Security",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "python/OR",
              "name": "OR",
              "shortDescription": {
                "text": "Open Redirect"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nAn open redirect attack takes place when a web application redirects the user to an unauthorized and untrusted site. In general, URL redirection refers to the ability of a website or application to redirect users to another site. This is often a benign and useful feature. For example, if a resource has moved to a new location, URL redirection can transfer the user to that location rather than displaying an error message.\nHowever, this ability can be exploited through social engineering, tricking the user into believing they are accessing one site when, in reality, they are being redirected to a dangerous site, such as a phishing site. Once there, the user may be further tricked into entering credentials or personally identifiable information (PII), believing they are still within the original, trusted domain. Attackers can then use these credentials to gain unauthorized access or leverage the user's PII for sale or ransom.\n\n## Best practices for prevention\n* When developing a site or web app, consider implementing a disclaimer page to remind users that they are leaving a secure site.\n* Adopt a zero-trust approach in which all input is treated with suspicion.\n* Validate all input against deny-lists to ensure it does not contain code to redirect the user. This method is good but inherently incomplete.\n* Be aware of all sources of untrusted input being sent to the server that could be used to redirect the user, such as cookies, URL components, filenames, query results, request headers, and more.\n* In particular, be aware of potential API calls that could send input indirectly to redirect the user.\n* To protect end users, use a firewall to block known malicious sites, train users to recognize basic signs of a phishing attack, and ensure that all network endpoints are patched with the most current updates.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "OR",
                  "Security",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/inveniosoftware/invenio/commit/20edecca740c36a80b65678fce66c5d453281dd0?diff=split#diff-a435900ae3a37c2eccbd13c640c6802a13ca9c983c1ed743588001f1cb878fa0L-1",
                    "lines": [
                      {
                        "line": "def get_session_next_url(remote_app):\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return session.get(\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"%s_%s\" % (token_session_key(remote_app), \"next_url\")\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "def set_session_next_url(remote_app, url):\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "    session[\"%s_%s\" % (token_session_key(remote_app), \"next_url\")] = \\\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        url\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "def token_session_key(remote_app):\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Generate a session key used to store the token for a remote app.\"\"\"\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return '%s_%s' % (cfg['OAUTHCLIENT_SESSION_KEY_PREFIX'], remote_app)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "def response_token_setter(remote, resp):\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Extract token from response and set it for the user.\"\"\"\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if resp is None:\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise OAuthRejectedRequestError(\"User rejected request.\", remote, resp)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if 'access_token' in resp:\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return oauth2_token_setter(remote, resp)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif 'oauth_token' in resp and 'oauth_token_secret' in resp:\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return oauth1_token_setter(remote, resp)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif 'error' in resp:\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Only OAuth2 specifies how to send error messages\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise OAuthClientError(\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "                'Authorization with remote service failed.', remote, resp,\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    raise OAuthResponseError(\"Bad OAuth authorized request\", remote, resp)\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "def oauth1_token_setter(remote, resp, token_type='', extra_data=None):\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Set an OAuth1 token.\"\"\"\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return token_setter(\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        remote,\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp['oauth_token'],\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        secret=resp['oauth_token_secret'],\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        extra_data=extra_data,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        token_type=token_type,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "def oauth2_token_setter(remote, resp, token_type='', extra_data=None):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Set an OAuth2 token.\"\"\"\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return token_setter(\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        remote,\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp['access_token'],\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        secret='',\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        token_type=token_type,\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        extra_data=extra_data,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "def token_setter(remote, token, secret='', token_type='', extra_data=None):\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Set token for user.\"\"\"\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session[token_session_key(remote.name)] = (token, secret)\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Save token if used is authenticated\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if current_user.is_authenticated():\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        uid = current_user.get_id()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cid = remote.consumer_key\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Check for already existing token\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        t = RemoteToken.get(uid, cid, token_type=token_type)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if t:\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "            t.update_token(token, secret)\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            t = RemoteToken.create(\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "                uid, cid, token, secret,\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "                token_type=token_type, extra_data=extra_data\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return t\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return None\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "def token_getter(remote, token=''):\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Retrieve OAuth access token.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Ued by flask-oauthlib to get the access token when making requests.\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    :param token: Type of token to get. Data passed from ``oauth.request()`` to\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "         identify which token to retrieve.\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session_key = token_session_key(remote.name)\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if session_key not in session and current_user.is_authenticated():\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Fetch key from token store if user is authenticated, and the key\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # isn't already cached in the session.\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        remote_token = RemoteToken.get(\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "            current_user.get_id(),\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "            remote.consumer_key,\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            token_type=token,\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        )\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if remote_token is None:\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Store token and secret in session\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        session[session_key] = remote_token.token()\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return session.get(session_key, None)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "def token_delete(remote, token=''):\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Remove OAuth access tokens from session.\"\"\"\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session_key = token_session_key(remote.name)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return session.pop(session_key, None)\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Error handling decorators\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "def oauth_error_handler(f):\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Decorator to handle exceptions.\"\"\"\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @wraps(f)\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def inner(*args, **kwargs):\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # OAuthErrors should not happen, so they are not caught here. Hence\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # they will result in a 500 Internal Server Error which is what we\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # are interested in.\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return f(*args, **kwargs)\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except OAuthClientError as e:\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            current_app.logger.warning(e.message, exc_info=True)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return oauth2_handle_error(\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "                e.remote, e.response, e.code, e.uri, e.description\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except OAuthRejectedRequestError:\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            flash(\"You rejected the authentication request.\")\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect('/')\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return inner\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Handlers\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "#\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "@oauth_error_handler\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "def authorized_default_handler(resp, remote, *args, **kwargs):\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Store access token in session.\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Default authorized handler.\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    response_token_setter(remote, resp)\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return redirect('/')\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "@oauth_error_handler\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "def authorized_signup_handler(resp, remote, *args, **kwargs):\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Handle sign-in/up functionality.\"\"\"\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Remove any previously stored auto register session key\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "    session.pop(token_session_key(remote.name) + '_autoregister', None)\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Store token in session\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # ----------------------\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Set token in session - token object only returned if\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # current_user.is_autenticated().\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "    token = response_token_setter(remote, resp)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "    handlers = signup_handlers[remote.name]\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Sign-in/up user\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # ---------------\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not current_user.is_authenticated():\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        account_info = handlers['info'](resp)\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "        user = oauth_get_user(\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            remote.consumer_key,\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "            account_info=account_info,\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "            access_token=token_getter(remote)[0],\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        )\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if user is None:\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Auto sign-up if user not found\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "            user = oauth_register(account_info)\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if user is None:\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # Auto sign-up requires extra information\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "                session[\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    token_session_key(remote.name) + '_autoregister'] = True\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "                session[token_session_key(remote.name) +\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        \"_account_info\"] = account_info\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return redirect(url_for(\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    \".signup\",\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    remote_app=remote.name,\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    next=request.args.get('next', '/')\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ))\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Authenticate user\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not oauth_authenticate(remote.consumer_key, user,\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  require_existing_link=False,\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  remember=cfg['OAUTHCLIENT_REMOTE_APPS']\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                  [remote.name].get('remember', False)):\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return current_app.login_manager.unauthorized()\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Link account\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # ------------\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Need to store token in database instead of only the session when\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # called first time.\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        token = response_token_setter(remote, resp)\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Setup account\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # -------------\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not token.remote_account.extra_data and \\\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "       remote.name in signup_handlers:\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "        handlers['setup'](token)\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Redirect to next\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if request.args.get('next', None):\n",
                        "lineNumber": 238,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return redirect(request.args.get('next'))\n",
                        "lineNumber": 239,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    next_url = get_session_next_url(remote.name)\n",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if next_url:\n",
                        "lineNumber": 249,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return redirect(next_url)\n",
                        "lineNumber": 250,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/flask-admin/flask-admin/commit/4ec6473a720fc01a35ee4314cd41540f842fbf09?diff=split#diff-81459308eab181f696582f7b64e36fb5616b7106eeeae2d2284535d632106789L-1",
                    "lines": [
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit, get_redirect_target\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.ext.admin.tools import rec_getattr\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._backwards import ObsoleteAttr\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._compat import iteritems, as_unicode\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .helpers import prettify_name, get_mdict_item_or_list\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .ajax import AjaxModelLoader\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from collections import OrderedDict\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Bare-bones OrderedDict implementation for Python2.6 compatibility\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    class OrderedDict(dict):\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __init__(self, *args, **kwargs):\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__init__(self, *args, **kwargs)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys = []\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __setitem__(self, key, value):\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys.append(key)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__setitem__(self, key, value)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __iter__(self):\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return (k for k in self.ordered_keys)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def iteritems(self):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return ((k, self[k]) for k in self.ordered_keys)\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def items(self):\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return list(self.iteritems())\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "class BaseModelView(BaseView, ActionsMixin):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base model view.\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This view does not make any assumptions on how models are stored or managed, but expects the following:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. The provided model is an object\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. The model contains properties\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Each model contains an attribute which uniquely identifies it (i.e. a primary key for a database model)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "            4. It is possible to retrieve a list of sorted models with pagination applied from a data source\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "            5. You can get one model by its identifier from the data source\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Essentially, if you want to support a new data store, all you have to do is:\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. Derive from the `BaseModelView` class\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. Implement various data-related methods (`get_list`, `get_one`, `create_model`, etc)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Implement automatic form generation from the model representation (`scaffold_form`)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Permissions\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_create = True\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model creation allowed\"\"\"\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_edit = True\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model editing allowed\"\"\"\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_delete = True\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model deletion allowed\"\"\"\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Templates\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    list_template = 'admin/model/list.html'\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default list view template\"\"\"\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    edit_template = 'admin/model/edit.html'\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default edit template\"\"\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_template = 'admin/model/create.html'\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default create template\"\"\"\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Customizations\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_list = ObsoleteAttr('column_list', 'list_columns', None)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the list view.\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_list = ('name', 'last_name', 'email')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_exclude_list = ObsoleteAttr('column_exclude_list',\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       'excluded_list_columns', None)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded list column names.\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_exclude_list = ('last_name', 'email')\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_formatters = ObsoleteAttr('column_formatters', 'list_formatters', dict())\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of list view column formatters.\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, if you want to show price multiplied by\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        two, you can do something like this::\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=lambda v, c, m, p: m.price*2)\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        or using Jinja2 `macro` in template::\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model.template import macro\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=macro('render_price'))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # in template\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% macro render_price(model, column) %}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {{ model.price * 2 }}\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% endmacro %}\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The Callback function has the prototype::\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def formatter(view, context, model, name):\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `context` is instance of jinja2.runtime.Context\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `model` is model instance\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `name` is property name\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_type_formatters = ObsoleteAttr('column_type_formatters', 'list_type_formatters', None)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of value type formatters to be used in the list view.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        By default, two types are formatted:\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "        1. ``None`` will be displayed as an empty string\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        2. ``bool`` will be displayed as a checkmark if it is ``True``\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you don't like the default behavior and don't want any type formatters\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        applied, just override this property with an empty dictionary::\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = dict()\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to display `NULL` instead of an empty string, you can do\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        something like this::\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model import typefmt\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS.update({\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    type(None): typefmt.null_formatter\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = MY_DEFAULT_FORMATTERS\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Type formatters have lower priority than list column formatters.\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The callback function has following prototype::\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def type_formatter(view, value):\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `value` value to format\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_labels = ObsoleteAttr('column_labels', 'rename_columns', None)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and value is string to display.\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_labels = dict(name='Name', last_name='Last Name')\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_descriptions = None\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        value is description for `list view` column or add/edit form field.\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_descriptions = dict(\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    full_name='First and Last name'\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_sortable_list = ObsoleteAttr('column_sortable_list',\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        'sortable_columns',\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        None)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the sortable columns for the list view.\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', 'last_name')\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to explicitly specify field/column to be used while\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sorting, you can use a tuple::\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', 'user.username'))\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        When using SQLAlchemy models, model attributes can be used instead\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of strings::\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', User.username))\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_default_sort = None\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default sort column if no sorting is applied.\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = 'user'\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can use tuple to control ascending descending order. In following example, items\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        will be sorted in descending order::\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = ('user', True)\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_searchable_list = ObsoleteAttr('column_searchable_list',\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'searchable_columns',\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          None)\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        A collection of the searchable columns. It is assumed that only\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        text-only fields are searchable, but it is up to the model\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "        implementation to decide.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_searchable_list = ('name', 'email')\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_choices = None\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Map choices to columns in list view\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_choices = {\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'my_column': [\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        ('db_value', 'display_value'),\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ]\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_filters = None\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the column filters.\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Can contain either field names or instances of :class:`~flask.ext.admin.model.filters.BaseFilter` classes.\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_filters = ('user', 'email')\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    named_filter_urls = False\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set to True to use human-readable names for filters in URL parameters.\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        False by default so as to be robust across translations.\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Changing this parameter will break any existing URLs.\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Override unique_filter_label() if you want to change the default format\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of filter urls. This parameter only controls the default method.\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_display_pk = ObsoleteAttr('column_display_pk',\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     'list_display_pk',\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     False)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Controls if the primary key should be displayed in the list view.\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form = None\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Form class. Override if you want to use custom form for your model.\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Will completely disable form scaffolding functionality.\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyForm(Form):\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                name = TextField('Name')\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form = MyForm\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_base_class = BaseForm\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base form class. Will be used by form scaffolding function when creating model form.\n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Useful if you want to have custom contructor or override some fields.\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyBaseForm(Form):\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "                def do_something(self):\n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    pass\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_base_class = MyBaseForm\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_args = None\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form field arguments. Refer to WTForms documentation for\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "        list of possible options.\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_args = dict(\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    name=dict(label='First Name', validators=[required()])\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_columns = None\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the form. If set to `None` will\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "        get them from the model.\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email')\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_excluded_columns = ObsoleteAttr('form_excluded_columns',\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         'excluded_form_columns',\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         None)\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded form field names.\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_excluded_columns = ('last_name', 'email')\n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_overrides = None\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form column overrides.\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_overrides = dict(name=wtf.FileField)\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_widget_args = None\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form widget rendering arguments.\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use this to customize how widget is rendered without using custom template.\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_widget_args = {\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'description': {\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'rows': 10,\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'style': 'color: black'\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_extra_fields = None\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of additional fields.\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can control order of form fields using ``form_columns`` property. For example::\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email', 'password', 'secret')\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "        In this case, password field will be put between email and secret fields that are autogenerated.\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_ajax_refs = None\n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use AJAX for foreign key model loading.\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Should contain dictionary, where key is field name and value is either a dictionary which\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "        configures AJAX lookups or backend-specific `AjaxModelLoader` class instance.\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, it can look like::\n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': {\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'fields': ('first_name', 'last_name', 'email')\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'page_size': 10\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Or with SQLAlchemy backend like this::\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': QueryAjaxModelLoader('user', db.session, User, fields=['email'], page_size=10)\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you need custom loading functionality, you can implement your custom loading behavior\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in your `AjaxModelLoader` class.\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_rules = None\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List of rendering rules for model creation form.\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This property changed default form rendering behavior and makes possible to rearrange order\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of rendered fields, add some text between fields, group them, etc. If not set, will use\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "        default Flask-Admin form rendering logic.\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Here's simple example which illustrates how to use::\n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.form import rules\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(ModelView):\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_rules = [\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # Define field set with header text and four fields\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.FieldSet(('first_name', 'last_name', 'email', 'phone'), 'User'),\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ... and it is just shortcut for:\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Header('User'),\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('first_name'),\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('last_name'),\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ...\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to create custom rule blocks:\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    MyBlock('Hello World'),\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to call macros from current context\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Macro('my_macro', foobar='baz')\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ]\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_edit_rules = None\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the edit form. Override `form_rules` if present.\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_create_rules = None\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the create form. Override `form_rules` if present.\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Actions\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    action_disallowed_list = ObsoleteAttr('action_disallowed_list',\n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'disallowed_actions',\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          [])\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set of disallowed action names. For example, if you want to disable\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "        mass model deletion, do something like this:\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "                action_disallowed_list = ['delete']\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various settings\n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "    page_size = 20\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default page size for pagination.\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, model,\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 name=None, category=None, endpoint=None, url=None):\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Constructor.\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model class\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name. If not provided, will use the model class name\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param category:\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View category\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param endpoint:\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base endpoint. If not provided, will use the model name + 'view'.\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "                For example if model name was 'User', endpoint will be\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "                'userview'\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param url:\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base URL. If not provided, will use endpoint as a URL.\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param debug:\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Enable debugging mode. Won't catch exceptions on model\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "                save failures.\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If name not provided, it is model name\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if name is None:\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "            name = '%s' % self._prettify_class_name(model.__name__)\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If endpoint not provided, it is model name + 'view'\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if endpoint is None:\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "            endpoint = ('%sview' % model.__name__).lower()\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        super(BaseModelView, self).__init__(name, category, endpoint, url)\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.model = model\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.init_actions()\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Scaffolding\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._refresh_cache()\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Caching\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _refresh_cache(self):\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Refresh various cached variables.\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # List view\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._list_columns = self.get_list_columns()\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._sortable_columns = self.get_sortable_columns()\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Labels\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels is None:\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_labels = {}\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Forms\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._form_ajax_refs = self._process_ajax_references()\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_widget_args is None:\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.form_widget_args = {}\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._create_form_class = self.get_create_form()\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._edit_form_class = self.get_edit_form()\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Search\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._search_supported = self.init_search()\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Choices\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_choices:\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._column_choices_map = dict([\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "                (column, dict(choices))\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "                for column, choices in self.column_choices.items()\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ])\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_choices = self._column_choices_map = dict()\n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Filters\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._filters = self.get_filters()\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Type formatters\n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_type_formatters is None:\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_type_formatters = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_descriptions is None:\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_descriptions = dict()\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self._filters:\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = OrderedDict()\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in self._filters:\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.name not in self._flattened_filters_by_group:\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    self._flattened_filters_by_group[flt.name] = []\n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group = self._flattened_filters_by_group[flt.name]\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group.append({'name': flt.name,\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'label': self.unique_filter_label(flt),\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'operation': flt.operation(),\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'options': flt.get_options(self) or None,\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'data_type': flt.data_type})\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = None\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Form rendering rules\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_create_rules:\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = rules.RuleSet(self, self.form_create_rules)\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = None\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_edit_rules:\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = rules.RuleSet(self, self.form_edit_rules)\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = None\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_rules:\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "            form_rules = rules.RuleSet(self, self.form_rules)\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_create_rules:\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_create_rules = form_rules\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_edit_rules:\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_edit_rules = form_rules\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Primary key\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_pk_value(self, model):\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return PK value from a model object.\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # List view\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_list_columns(self):\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return list of the model field names. Must be implemented in\n",
                        "lineNumber": 622,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is list of tuples with field name and\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "            display text. For example::\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ['name', 'first_name', 'last_name']\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 629,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_list_columns method')\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 631,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_column_name(self, field):\n",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a human-readable column name.\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param field:\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model field name.\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels and field in self.column_labels:\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.column_labels[field]\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._prettify_name(field)\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_columns(self):\n",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of the model field names. If `column_list` was\n",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "            set, returns it. Otherwise calls `scaffold_list_columns`\n",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "            to generate the list from the model.\n",
                        "lineNumber": 648,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "        columns = self.column_list\n",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 651,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if columns is None:\n",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "            columns = self.scaffold_list_columns()\n",
                        "lineNumber": 653,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Filter excluded columns\n",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.column_exclude_list:\n",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "                columns = [c for c in columns if c not in self.column_exclude_list]\n",
                        "lineNumber": 657,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 658,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [(c, self.get_column_name(c)) for c in columns]\n",
                        "lineNumber": 659,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 660,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_sortable_columns(self):\n",
                        "lineNumber": 661,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 662,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns dictionary of sortable columns. Must be implemented in\n",
                        "lineNumber": 663,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 664,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 665,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is a dictionary, where keys are field names and\n",
                        "lineNumber": 666,
                        "lineChange": "none"
                      },
                      {
                        "line": "            values are property names.\n",
                        "lineNumber": 667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 668,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_sortable_columns method')\n",
                        "lineNumber": 669,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 670,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_sortable_columns(self):\n",
                        "lineNumber": 671,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 672,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a dictionary of the sortable columns. Key is a model\n",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "            field name and value is sort column (for example - attribute).\n",
                        "lineNumber": 674,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 675,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If `column_sortable_list` is set, will use it. Otherwise, will call\n",
                        "lineNumber": 676,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `scaffold_sortable_columns` to get them from the model.\n",
                        "lineNumber": 677,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 678,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_sortable_list is None:\n",
                        "lineNumber": 679,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.scaffold_sortable_columns() or dict()\n",
                        "lineNumber": 680,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 681,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = dict()\n",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 683,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for c in self.column_sortable_list:\n",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(c, tuple):\n",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c[0]] = c[1]\n",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c] = c\n",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return result\n",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def init_search(self):\n",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Initialize search. If data provider does not support search,\n",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `init_search` will return `False`.\n",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return False\n",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_filters(self, name):\n",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate filter object for the given name\n",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 702,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 703,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name of the field\n",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 705,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_valid_filter(self, filter):\n",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify that the provided filter object is valid.\n",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 711,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override in model backend implementation to verify if\n",
                        "lineNumber": 712,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the provided filter type is allowed.\n",
                        "lineNumber": 713,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 714,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filter:\n",
                        "lineNumber": 715,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Filter object to verify.\n",
                        "lineNumber": 716,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 717,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return isinstance(filter, filters.BaseFilter)\n",
                        "lineNumber": 718,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 719,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filters(self):\n",
                        "lineNumber": 720,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 721,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a list of filter objects.\n",
                        "lineNumber": 722,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 723,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If your model backend implementation does not support filters,\n",
                        "lineNumber": 724,
                        "lineChange": "none"
                      },
                      {
                        "line": "            override this method and return `None`.\n",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_filters:\n",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "            collection = []\n",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 729,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for n in self.column_filters:\n",
                        "lineNumber": 730,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if self.is_valid_filter(n):\n",
                        "lineNumber": 731,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    collection.append(n)\n",
                        "lineNumber": 732,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flt = self.scaffold_filters(n)\n",
                        "lineNumber": 734,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    if flt:\n",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        collection.extend(flt)\n",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    else:\n",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        raise Exception('Unsupported filter type %s' % n)\n",
                        "lineNumber": 738,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return collection\n",
                        "lineNumber": 739,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 740,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 741,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 742,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_form(self):\n",
                        "lineNumber": 743,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 744,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create `form.BaseForm` inherited class from the model. Must be\n",
                        "lineNumber": 745,
                        "lineChange": "none"
                      },
                      {
                        "line": "            implemented in the child class.\n",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_form method')\n",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_form(self):\n",
                        "lineNumber": 750,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 751,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get form class.\n",
                        "lineNumber": 752,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 753,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If ``self.form`` is set, will return it and will call\n",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ``self.scaffold_form`` otherwise.\n",
                        "lineNumber": 755,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form is not None:\n",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.form\n",
                        "lineNumber": 760,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.scaffold_form()\n",
                        "lineNumber": 762,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 763,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_create_form(self):\n",
                        "lineNumber": 764,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 765,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model creation view.\n",
                        "lineNumber": 766,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 767,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 768,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 769,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 771,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_edit_form(self):\n",
                        "lineNumber": 772,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model editing view.\n",
                        "lineNumber": 774,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 775,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 776,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 778,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 779,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_form(self, obj=None):\n",
                        "lineNumber": 780,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 781,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model creation form and return it.\n",
                        "lineNumber": 782,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 783,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 784,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 785,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._create_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 786,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 787,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_form(self, obj=None):\n",
                        "lineNumber": 788,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 789,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model editing form and return it.\n",
                        "lineNumber": 790,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 792,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 793,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._edit_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 794,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 795,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Helpers\n",
                        "lineNumber": 796,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_sortable(self, name):\n",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 798,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify if column is sortable.\n",
                        "lineNumber": 799,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 800,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 801,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Column name.\n",
                        "lineNumber": 802,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 803,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name in self._sortable_columns\n",
                        "lineNumber": 804,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 805,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_column_by_idx(self, idx):\n",
                        "lineNumber": 806,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 807,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return column index by\n",
                        "lineNumber": 808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 809,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if idx is None or idx < 0 or idx >= len(self._list_columns):\n",
                        "lineNumber": 810,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._list_columns[idx]\n",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_default_order(self):\n",
                        "lineNumber": 815,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 816,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return default sort order\n",
                        "lineNumber": 817,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 818,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_default_sort:\n",
                        "lineNumber": 819,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if isinstance(self.column_default_sort, tuple):\n",
                        "lineNumber": 820,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort\n",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else:\n",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort, False\n",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 825,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 826,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Database-related API\n",
                        "lineNumber": 827,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list(self, page, sort_field, sort_desc, search, filters):\n",
                        "lineNumber": 828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a paginated and sorted list of models from the data source.\n",
                        "lineNumber": 830,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number, 0 based. Can be set to None if it is first page.\n",
                        "lineNumber": 835,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_field:\n",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column name or None.\n",
                        "lineNumber": 837,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": "                If set to True, sorting is in descending order.\n",
                        "lineNumber": 839,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 840,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 841,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 842,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of filter tuples. First value in a tuple is a search\n",
                        "lineNumber": 843,
                        "lineChange": "none"
                      },
                      {
                        "line": "                index, second value is a search value.\n",
                        "lineNumber": 844,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 845,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_list method')\n",
                        "lineNumber": 846,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 847,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_one(self, id):\n",
                        "lineNumber": 848,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return one model by its id.\n",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 853,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param id:\n",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model id\n",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_one method')\n",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 858,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Model event handlers\n",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 860,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model is created or updated.\n",
                        "lineNumber": 862,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model and update_model in the same transaction\n",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 865,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 867,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 868,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that will be created/updated\n",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 873,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Will be set to True if model was created and to False if edited\n",
                        "lineNumber": 874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 875,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 876,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 878,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Compatibility helper.\n",
                        "lineNumber": 880,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 882,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model, is_created)\n",
                        "lineNumber": 883,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except TypeError:\n",
                        "lineNumber": 884,
                        "lineChange": "none"
                      },
                      {
                        "line": "            msg = ('%s.on_model_change() now accepts third ' +\n",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": "                   'parameter is_created. Please update your code') % self.model\n",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "            warnings.warn(msg)\n",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model)\n",
                        "lineNumber": 889,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 890,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def after_model_change(self, form, model, is_created):\n",
                        "lineNumber": 891,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 892,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model was created or updated and\n",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "            committed to the database.\n",
                        "lineNumber": 894,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model after successful database commit.\n",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 899,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 901,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that was created/updated\n",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": "                True if model was created, False if model was updated\n",
                        "lineNumber": 905,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 907,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 908,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_delete(self, model):\n",
                        "lineNumber": 909,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions before a model is deleted.\n",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from delete_model in the same transaction\n",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 914,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 915,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default do nothing.\n",
                        "lineNumber": 916,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 917,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 919,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_model(self, form):\n",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model from the form.\n",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 923,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 924,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 925,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 926,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 927,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 928,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 930,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 932,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def update_model(self, form, model):\n",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 934,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Update model from the form.\n",
                        "lineNumber": 935,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 936,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 937,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 938,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 939,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 940,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 941,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 942,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 943,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 944,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_model(self, model):\n",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 949,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model.\n",
                        "lineNumber": 950,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 951,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 952,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 953,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 954,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 955,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 956,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 957,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 958,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 959,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 960,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various helpers\n",
                        "lineNumber": 961,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _prettify_name(self, name):\n",
                        "lineNumber": 962,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 963,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Prettify pythonic variable name.\n",
                        "lineNumber": 964,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 965,
                        "lineChange": "none"
                      },
                      {
                        "line": "            For example, 'hello_world' will be converted to 'Hello World'\n",
                        "lineNumber": 966,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 967,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 968,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name to prettify\n",
                        "lineNumber": 969,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 970,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return prettify_name(name)\n",
                        "lineNumber": 971,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 972,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_empty_list_message(self):\n",
                        "lineNumber": 973,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return gettext('There are no items in the table.')\n",
                        "lineNumber": 974,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 975,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def unique_filter_label(self, flt):\n",
                        "lineNumber": 976,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 977,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Given a filter `flt`, return a unique name for that filter in\n",
                        "lineNumber": 978,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this view.\n",
                        "lineNumber": 979,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 980,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default, returns a numeric index or a human-readable filter name\n",
                        "lineNumber": 981,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 982,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Does not include the `flt[n]_` portion of the filter name.\n",
                        "lineNumber": 983,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 984,
                        "lineChange": "none"
                      },
                      {
                        "line": "            To use custom names, override this function, eg\n",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def unique_filter_label(self, flt):\n",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return flt.name + flt.__class__.__name__\n",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 988,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Be aware that if you override this method, the default URL format\n",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will no longer work.\n",
                        "lineNumber": 990,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 991,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.named_filter_urls:\n",
                        "lineNumber": 992,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return re.sub('\\W', '_', u'{name}_{operation}'.format(name=flt.name, operation=flt.operation())).lower()\n",
                        "lineNumber": 993,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 994,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return str(self._filters.index(flt))\n",
                        "lineNumber": 995,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 996,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filter_args(self):\n",
                        "lineNumber": 997,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 998,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Retrieve and parse filter parameters from the request URL.\n",
                        "lineNumber": 999,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1000,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of 2-tuples in the format [(idx, value), ...],\n",
                        "lineNumber": 1001,
                        "lineChange": "none"
                      },
                      {
                        "line": "            where idx is the index into the list returned by get_filters().\n",
                        "lineNumber": 1002,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1003,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to provide your own URL filter format.\n",
                        "lineNumber": 1004,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1005,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self._filters:\n",
                        "lineNumber": 1006,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 1007,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1008,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filter_idx_by_label = dict((self.unique_filter_label(flt), i) for i, flt in enumerate(self._filters))\n",
                        "lineNumber": 1009,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1010,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sfilters = []\n",
                        "lineNumber": 1011,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1012,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for n in request.args:\n",
                        "lineNumber": 1013,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not n.startswith('flt'):\n",
                        "lineNumber": 1014,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1015,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if '_' not in n:\n",
                        "lineNumber": 1016,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1017,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1018,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos, filter_label = n[3:].split('_', 1)\n",
                        "lineNumber": 1019,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1020,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # If pos not specified, just add incrementally to the list.\n",
                        "lineNumber": 1021,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos = int(pos) if pos else len(sfilters)\n",
                        "lineNumber": 1022,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1023,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try:\n",
                        "lineNumber": 1024,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # See if filter is numeric\n",
                        "lineNumber": 1025,
                        "lineChange": "none"
                      },
                      {
                        "line": "                idx = int(filter_label)\n",
                        "lineNumber": 1026,
                        "lineChange": "none"
                      },
                      {
                        "line": "            except ValueError:\n",
                        "lineNumber": 1027,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # If non-numeric, look filter up by name\n",
                        "lineNumber": 1028,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 1029,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    idx = filter_idx_by_label[filter_label]\n",
                        "lineNumber": 1030,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except KeyError:\n",
                        "lineNumber": 1031,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # No matching filter name\n",
                        "lineNumber": 1032,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1034,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if 0 <= idx < len(self._filters):\n",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "                flt = self._filters[idx]\n",
                        "lineNumber": 1036,
                        "lineChange": "none"
                      },
                      {
                        "line": "                value = request.args[n]\n",
                        "lineNumber": 1037,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.validate(value):\n",
                        "lineNumber": 1038,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    sfilters.append((pos, (idx, flt.clean(value))))\n",
                        "lineNumber": 1039,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1040,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [v[1] for v in sorted(sfilters, key=lambda n: n[0])]\n",
                        "lineNumber": 1041,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1042,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_listing_args(self):\n",
                        "lineNumber": 1043,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1044,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return generic list view arguments from query string.\n",
                        "lineNumber": 1045,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page = request.args.get('page', 0, type=int)\n",
                        "lineNumber": 1047,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort = request.args.get('sort', None, type=int)\n",
                        "lineNumber": 1048,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_desc = request.args.get('desc', None, type=int)\n",
                        "lineNumber": 1049,
                        "lineChange": "none"
                      },
                      {
                        "line": "        search = request.args.get('search', None)\n",
                        "lineNumber": 1050,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return page, sort, sort_desc, search\n",
                        "lineNumber": 1051,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1052,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_url(self, view=None, page=None, sort=None, sort_desc=None,\n",
                        "lineNumber": 1053,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 search=None, filters=None):\n",
                        "lineNumber": 1054,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1055,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate page URL with current page, sort column and\n",
                        "lineNumber": 1056,
                        "lineChange": "none"
                      },
                      {
                        "line": "            other parameters.\n",
                        "lineNumber": 1057,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1058,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param view:\n",
                        "lineNumber": 1059,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name\n",
                        "lineNumber": 1060,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 1061,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number\n",
                        "lineNumber": 1062,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort:\n",
                        "lineNumber": 1063,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column index\n",
                        "lineNumber": 1064,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 1065,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Use descending sorting order\n",
                        "lineNumber": 1066,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 1067,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 1068,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 1069,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of active filters\n",
                        "lineNumber": 1070,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1071,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not search:\n",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "            search = None\n",
                        "lineNumber": 1073,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1074,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not page:\n",
                        "lineNumber": 1075,
                        "lineChange": "none"
                      },
                      {
                        "line": "            page = None\n",
                        "lineNumber": 1076,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1077,
                        "lineChange": "none"
                      },
                      {
                        "line": "        kwargs = dict(page=page, sort=sort, desc=sort_desc, search=search)\n",
                        "lineNumber": 1078,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1079,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if filters:\n",
                        "lineNumber": 1080,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in filters:\n",
                        "lineNumber": 1081,
                        "lineChange": "none"
                      },
                      {
                        "line": "                key = 'flt_%s' % self.unique_filter_label(self._filters[flt[0]])\n",
                        "lineNumber": 1082,
                        "lineChange": "none"
                      },
                      {
                        "line": "                kwargs[key] = flt[1]\n",
                        "lineNumber": 1083,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1084,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return url_for(view, **kwargs)\n",
                        "lineNumber": 1085,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1086,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_action_allowed(self, name):\n",
                        "lineNumber": 1087,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1088,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to allow or disallow actions based\n",
                        "lineNumber": 1089,
                        "lineChange": "none"
                      },
                      {
                        "line": "            on some condition.\n",
                        "lineNumber": 1090,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1091,
                        "lineChange": "none"
                      },
                      {
                        "line": "            The default implementation only checks if the particular action\n",
                        "lineNumber": 1092,
                        "lineChange": "none"
                      },
                      {
                        "line": "            is not in `action_disallowed_list`.\n",
                        "lineNumber": 1093,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1094,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name not in self.action_disallowed_list\n",
                        "lineNumber": 1095,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1096,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_field_value(self, model, name):\n",
                        "lineNumber": 1097,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1098,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get unformatted field value from the model\n",
                        "lineNumber": 1099,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1100,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return rec_getattr(model, name)\n",
                        "lineNumber": 1101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def filters_by_label(self):\n",
                        "lineNumber": 1103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1104,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Flattened dict of all filters, indexed by their label.\n",
                        "lineNumber": 1105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return dict((self.unique_filter_label(flt), flt) for flt in self._filters)\n",
                        "lineNumber": 1107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @contextfunction\n",
                        "lineNumber": 1109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_value(self, context, model, name):\n",
                        "lineNumber": 1110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns the value to be displayed in the list view\n",
                        "lineNumber": 1112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1113,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param context:\n",
                        "lineNumber": 1114,
                        "lineChange": "none"
                      },
                      {
                        "line": "                :py:class:`jinja2.runtime.Context`\n",
                        "lineNumber": 1115,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 1116,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Field name\n",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        column_fmt = self.column_formatters.get(name)\n",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if column_fmt is not None:\n",
                        "lineNumber": 1122,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return column_fmt(self, context, model, name)\n",
                        "lineNumber": 1123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = self._get_field_value(model, name)\n",
                        "lineNumber": 1125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        choices_map = self._column_choices_map.get(name, {})\n",
                        "lineNumber": 1127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if choices_map:\n",
                        "lineNumber": 1128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return choices_map.get(value) or value\n",
                        "lineNumber": 1129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        type_fmt = self.column_type_formatters.get(type(value))\n",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if type_fmt is not None:\n",
                        "lineNumber": 1132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = type_fmt(self, value)\n",
                        "lineNumber": 1133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return value\n",
                        "lineNumber": 1135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # AJAX references\n",
                        "lineNumber": 1137,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _process_ajax_references(self):\n",
                        "lineNumber": 1138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Process `form_ajax_refs` and generate model loaders that\n",
                        "lineNumber": 1140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will be used by the `ajax_lookup` view.\n",
                        "lineNumber": 1141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = {}\n",
                        "lineNumber": 1143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_ajax_refs:\n",
                        "lineNumber": 1145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for name, options in iteritems(self.form_ajax_refs):\n",
                        "lineNumber": 1146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(options, dict):\n",
                        "lineNumber": 1147,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = self._create_ajax_loader(name, options)\n",
                        "lineNumber": 1148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                elif isinstance(options, AjaxModelLoader):\n",
                        "lineNumber": 1149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = options\n",
                        "lineNumber": 1150,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    raise ValueError('%s.form_ajax_refs can not handle %s types' % (self, type(options)))\n",
                        "lineNumber": 1152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result\n",
                        "lineNumber": 1154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _create_ajax_loader(self, name, options):\n",
                        "lineNumber": 1156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Model backend will override this to implement AJAX model loading.\n",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Views\n",
                        "lineNumber": 1162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/')\n",
                        "lineNumber": 1163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def index_view(self):\n",
                        "lineNumber": 1164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1165,
                        "lineChange": "none"
                      },
                      {
                        "line": "            List view\n",
                        "lineNumber": 1166,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Grab parameters from URL\n",
                        "lineNumber": 1168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page, sort_idx, sort_desc, search = self._get_listing_args()\n",
                        "lineNumber": 1169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filters = self.get_filter_args()\n",
                        "lineNumber": 1170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Map column index to column name\n",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_column = self._get_column_by_idx(sort_idx)\n",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if sort_column is not None:\n",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "            sort_column = sort_column[0]\n",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1176,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Get count and data\n",
                        "lineNumber": 1177,
                        "lineChange": "none"
                      },
                      {
                        "line": "        count, data = self.get_list(page, sort_column, sort_desc,\n",
                        "lineNumber": 1178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                    search, filters)\n",
                        "lineNumber": 1179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Calculate number of pages\n",
                        "lineNumber": 1181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        num_pages = count // self.page_size\n",
                        "lineNumber": 1182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if count % self.page_size != 0:\n",
                        "lineNumber": 1183,
                        "lineChange": "none"
                      },
                      {
                        "line": "            num_pages += 1\n",
                        "lineNumber": 1184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1185,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Various URL generation helpers\n",
                        "lineNumber": 1186,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def pager_url(p):\n",
                        "lineNumber": 1187,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Do not add page number if it is first page\n",
                        "lineNumber": 1188,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if p == 0:\n",
                        "lineNumber": 1189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                p = None\n",
                        "lineNumber": 1190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', p, sort_idx, sort_desc,\n",
                        "lineNumber": 1192,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1194,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def sort_url(column, invert=False):\n",
                        "lineNumber": 1195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            desc = None\n",
                        "lineNumber": 1196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if invert and not sort_desc:\n",
                        "lineNumber": 1198,
                        "lineChange": "none"
                      },
                      {
                        "line": "                desc = 1\n",
                        "lineNumber": 1199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1200,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', page, column, desc,\n",
                        "lineNumber": 1201,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 1204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        actions, actions_confirmation = self.get_actions_list()\n",
                        "lineNumber": 1205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.list_template,\n",
                        "lineNumber": 1207,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               data=data,\n",
                        "lineNumber": 1208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # List\n",
                        "lineNumber": 1209,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               list_columns=self._list_columns,\n",
                        "lineNumber": 1210,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sortable_columns=self._sortable_columns,\n",
                        "lineNumber": 1211,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Stuff\n",
                        "lineNumber": 1212,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               enumerate=enumerate,\n",
                        "lineNumber": 1213,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_pk_value=self.get_pk_value,\n",
                        "lineNumber": 1214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_value=self.get_list_value,\n",
                        "lineNumber": 1215,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               return_url=self._get_url('.index_view',\n",
                        "lineNumber": 1216,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        page,\n",
                        "lineNumber": 1217,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_idx,\n",
                        "lineNumber": 1218,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_desc,\n",
                        "lineNumber": 1219,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        search,\n",
                        "lineNumber": 1220,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        filters),\n",
                        "lineNumber": 1221,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Pagination\n",
                        "lineNumber": 1222,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               count=count,\n",
                        "lineNumber": 1223,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               pager_url=pager_url,\n",
                        "lineNumber": 1224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               num_pages=num_pages,\n",
                        "lineNumber": 1225,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               page=page,\n",
                        "lineNumber": 1226,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Sorting\n",
                        "lineNumber": 1227,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_column=sort_idx,\n",
                        "lineNumber": 1228,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_desc=sort_desc,\n",
                        "lineNumber": 1229,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_url=sort_url,\n",
                        "lineNumber": 1230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Search\n",
                        "lineNumber": 1231,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search_supported=self._search_supported,\n",
                        "lineNumber": 1232,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               clear_search_url=self._get_url('.index_view',\n",
                        "lineNumber": 1233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              None,\n",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_idx,\n",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_desc),\n",
                        "lineNumber": 1236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search=search,\n",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Filters\n",
                        "lineNumber": 1238,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filters=self._filters,\n",
                        "lineNumber": 1239,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filter_groups=self._flattened_filters_by_group,\n",
                        "lineNumber": 1240,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               active_filters=filters,\n",
                        "lineNumber": 1241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1242,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Actions\n",
                        "lineNumber": 1243,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions=actions,\n",
                        "lineNumber": 1244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions_confirmation=actions_confirmation)\n",
                        "lineNumber": 1245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/new/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_view(self):\n",
                        "lineNumber": 1248,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model view\n",
                        "lineNumber": 1250,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1253,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_create:\n",
                        "lineNumber": 1254,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1256,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.create_form()\n",
                        "lineNumber": 1257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1258,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.create_model(form):\n",
                        "lineNumber": 1260,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_add_another' in request.form:\n",
                        "lineNumber": 1261,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully created.'))\n",
                        "lineNumber": 1262,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(url_for('.create_view', url=return_url))\n",
                        "lineNumber": 1263,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1267,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1269,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.create_template,\n",
                        "lineNumber": 1270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1271,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1272,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/edit/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1275,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_view(self):\n",
                        "lineNumber": 1276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1277,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Edit model view\n",
                        "lineNumber": 1278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_edit:\n",
                        "lineNumber": 1282,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1284,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1285,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1286,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1288,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = self.get_one(id)\n",
                        "lineNumber": 1289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1290,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if model is None:\n",
                        "lineNumber": 1291,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.edit_form(obj=model)\n",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.update_model(form, model):\n",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_continue_editing' in request.form:\n",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully saved.'))\n",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(request.url)\n",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1302,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1304,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1306,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.edit_template,\n",
                        "lineNumber": 1307,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           model=model,\n",
                        "lineNumber": 1308,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/delete/', methods=('POST',))\n",
                        "lineNumber": 1313,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_view(self):\n",
                        "lineNumber": 1314,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1315,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model view. Only POST method is allowed.\n",
                        "lineNumber": 1316,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1317,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_url = get_redirect_target() or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1319,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # TODO: Use post\n",
                        "lineNumber": 1320,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_delete:\n",
                        "lineNumber": 1321,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1323,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1326,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1327,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = self.get_one(id)\n",
                        "lineNumber": 1328,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1329,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if model:\n",
                        "lineNumber": 1330,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.delete_model(model)\n",
                        "lineNumber": 1331,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1332,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return redirect(return_url)\n",
                        "lineNumber": 1333,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/flask-admin/flask-admin/commit/4ec6473a720fc01a35ee4314cd41540f842fbf09?diff=split#diff-81459308eab181f696582f7b64e36fb5616b7106eeeae2d2284535d632106789L-1",
                    "lines": [
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit, get_redirect_target\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "from flask.ext.admin.tools import rec_getattr\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._backwards import ObsoleteAttr\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "from flask.ext.admin._compat import iteritems, as_unicode\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .helpers import prettify_name, get_mdict_item_or_list\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "from .ajax import AjaxModelLoader\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from collections import OrderedDict\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Bare-bones OrderedDict implementation for Python2.6 compatibility\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    class OrderedDict(dict):\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __init__(self, *args, **kwargs):\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__init__(self, *args, **kwargs)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys = []\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __setitem__(self, key, value):\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.ordered_keys.append(key)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            dict.__setitem__(self, key, value)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def __iter__(self):\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return (k for k in self.ordered_keys)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def iteritems(self):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return ((k, self[k]) for k in self.ordered_keys)\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def items(self):\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return list(self.iteritems())\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "class BaseModelView(BaseView, ActionsMixin):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base model view.\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This view does not make any assumptions on how models are stored or managed, but expects the following:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. The provided model is an object\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. The model contains properties\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Each model contains an attribute which uniquely identifies it (i.e. a primary key for a database model)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "            4. It is possible to retrieve a list of sorted models with pagination applied from a data source\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "            5. You can get one model by its identifier from the data source\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Essentially, if you want to support a new data store, all you have to do is:\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            1. Derive from the `BaseModelView` class\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            2. Implement various data-related methods (`get_list`, `get_one`, `create_model`, etc)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            3. Implement automatic form generation from the model representation (`scaffold_form`)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Permissions\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_create = True\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model creation allowed\"\"\"\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_edit = True\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model editing allowed\"\"\"\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    can_delete = True\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Is model deletion allowed\"\"\"\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Templates\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    list_template = 'admin/model/list.html'\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default list view template\"\"\"\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    edit_template = 'admin/model/edit.html'\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default edit template\"\"\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    create_template = 'admin/model/create.html'\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Default create template\"\"\"\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Customizations\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_list = ObsoleteAttr('column_list', 'list_columns', None)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the list view.\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_list = ('name', 'last_name', 'email')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_exclude_list = ObsoleteAttr('column_exclude_list',\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       'excluded_list_columns', None)\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded list column names.\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_exclude_list = ('last_name', 'email')\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_formatters = ObsoleteAttr('column_formatters', 'list_formatters', dict())\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of list view column formatters.\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, if you want to show price multiplied by\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        two, you can do something like this::\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=lambda v, c, m, p: m.price*2)\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        or using Jinja2 `macro` in template::\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model.template import macro\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_formatters = dict(price=macro('render_price'))\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # in template\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% macro render_price(model, column) %}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {{ model.price * 2 }}\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {% endmacro %}\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The Callback function has the prototype::\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def formatter(view, context, model, name):\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `context` is instance of jinja2.runtime.Context\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `model` is model instance\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `name` is property name\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_type_formatters = ObsoleteAttr('column_type_formatters', 'list_type_formatters', None)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of value type formatters to be used in the list view.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        By default, two types are formatted:\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "        1. ``None`` will be displayed as an empty string\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        2. ``bool`` will be displayed as a checkmark if it is ``True``\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you don't like the default behavior and don't want any type formatters\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        applied, just override this property with an empty dictionary::\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = dict()\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to display `NULL` instead of an empty string, you can do\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        something like this::\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.model import typefmt\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "            MY_DEFAULT_FORMATTERS.update({\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    type(None): typefmt.null_formatter\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                })\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_type_formatters = MY_DEFAULT_FORMATTERS\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Type formatters have lower priority than list column formatters.\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        The callback function has following prototype::\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def type_formatter(view, value):\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `view` is current administrative view\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # `value` value to format\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "                pass\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_labels = ObsoleteAttr('column_labels', 'rename_columns', None)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and value is string to display.\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_labels = dict(name='Name', last_name='Last Name')\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_descriptions = None\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary where key is column name and\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        value is description for `list view` column or add/edit form field.\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_descriptions = dict(\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    full_name='First and Last name'\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_sortable_list = ObsoleteAttr('column_sortable_list',\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        'sortable_columns',\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                        None)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the sortable columns for the list view.\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If set to `None`, will get them from the model.\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', 'last_name')\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you want to explicitly specify field/column to be used while\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sorting, you can use a tuple::\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', 'user.username'))\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        When using SQLAlchemy models, model attributes can be used instead\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of strings::\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_sortable_list = ('name', ('user', User.username))\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_default_sort = None\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default sort column if no sorting is applied.\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = 'user'\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can use tuple to control ascending descending order. In following example, items\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        will be sorted in descending order::\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_default_sort = ('user', True)\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_searchable_list = ObsoleteAttr('column_searchable_list',\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'searchable_columns',\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          None)\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        A collection of the searchable columns. It is assumed that only\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        text-only fields are searchable, but it is up to the model\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "        implementation to decide.\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_searchable_list = ('name', 'email')\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_choices = None\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Map choices to columns in list view\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_choices = {\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'my_column': [\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        ('db_value', 'display_value'),\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ]\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_filters = None\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the column filters.\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Can contain either field names or instances of :class:`~flask.ext.admin.model.filters.BaseFilter` classes.\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                column_filters = ('user', 'email')\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    named_filter_urls = False\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set to True to use human-readable names for filters in URL parameters.\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        False by default so as to be robust across translations.\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Changing this parameter will break any existing URLs.\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Override unique_filter_label() if you want to change the default format\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of filter urls. This parameter only controls the default method.\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "    column_display_pk = ObsoleteAttr('column_display_pk',\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     'list_display_pk',\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     False)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Controls if the primary key should be displayed in the list view.\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form = None\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Form class. Override if you want to use custom form for your model.\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Will completely disable form scaffolding functionality.\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyForm(Form):\n",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                name = TextField('Name')\n",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 303,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form = MyForm\n",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_base_class = BaseForm\n",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Base form class. Will be used by form scaffolding function when creating model form.\n",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Useful if you want to have custom contructor or override some fields.\n",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 313,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyBaseForm(Form):\n",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "                def do_something(self):\n",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    pass\n",
                        "lineNumber": 317,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 319,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_base_class = MyBaseForm\n",
                        "lineNumber": 320,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_args = None\n",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form field arguments. Refer to WTForms documentation for\n",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "        list of possible options.\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 329,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 331,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_args = dict(\n",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    name=dict(label='First Name', validators=[required()])\n",
                        "lineNumber": 333,
                        "lineChange": "none"
                      },
                      {
                        "line": "                )\n",
                        "lineNumber": 334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_columns = None\n",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of the model field names for the form. If set to `None` will\n",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "        get them from the model.\n",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email')\n",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_excluded_columns = ObsoleteAttr('form_excluded_columns',\n",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         'excluded_form_columns',\n",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         None)\n",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Collection of excluded form field names.\n",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example::\n",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_excluded_columns = ('last_name', 'email')\n",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_overrides = None\n",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form column overrides.\n",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 365,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 366,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_overrides = dict(name=wtf.FileField)\n",
                        "lineNumber": 367,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 368,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 369,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_widget_args = None\n",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of form widget rendering arguments.\n",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use this to customize how widget is rendered without using custom template.\n",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_widget_args = {\n",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'description': {\n",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'rows': 10,\n",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'style': 'color: black'\n",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_extra_fields = None\n",
                        "lineNumber": 386,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 387,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Dictionary of additional fields.\n",
                        "lineNumber": 388,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 389,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Example::\n",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "        You can control order of form fields using ``form_columns`` property. For example::\n",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 398,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 399,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_columns = ('name', 'email', 'password', 'secret')\n",
                        "lineNumber": 400,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 401,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_extra_fields = {\n",
                        "lineNumber": 402,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    password: PasswordField('Password')\n",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 404,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 405,
                        "lineChange": "none"
                      },
                      {
                        "line": "        In this case, password field will be put between email and secret fields that are autogenerated.\n",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_ajax_refs = None\n",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 410,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Use AJAX for foreign key model loading.\n",
                        "lineNumber": 411,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 412,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Should contain dictionary, where key is field name and value is either a dictionary which\n",
                        "lineNumber": 413,
                        "lineChange": "none"
                      },
                      {
                        "line": "        configures AJAX lookups or backend-specific `AjaxModelLoader` class instance.\n",
                        "lineNumber": 414,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "        For example, it can look like::\n",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': {\n",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'fields': ('first_name', 'last_name', 'email')\n",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        'page_size': 10\n",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Or with SQLAlchemy backend like this::\n",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_ajax_refs = {\n",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    'user': QueryAjaxModelLoader('user', db.session, User, fields=['email'], page_size=10)\n",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "        If you need custom loading functionality, you can implement your custom loading behavior\n",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "        in your `AjaxModelLoader` class.\n",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 435,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_rules = None\n",
                        "lineNumber": 437,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 438,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List of rendering rules for model creation form.\n",
                        "lineNumber": 439,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 440,
                        "lineChange": "none"
                      },
                      {
                        "line": "        This property changed default form rendering behavior and makes possible to rearrange order\n",
                        "lineNumber": 441,
                        "lineChange": "none"
                      },
                      {
                        "line": "        of rendered fields, add some text between fields, group them, etc. If not set, will use\n",
                        "lineNumber": 442,
                        "lineChange": "none"
                      },
                      {
                        "line": "        default Flask-Admin form rendering logic.\n",
                        "lineNumber": 443,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 444,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Here's simple example which illustrates how to use::\n",
                        "lineNumber": 445,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 446,
                        "lineChange": "none"
                      },
                      {
                        "line": "            from flask.ext.admin.form import rules\n",
                        "lineNumber": 447,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 448,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(ModelView):\n",
                        "lineNumber": 449,
                        "lineChange": "none"
                      },
                      {
                        "line": "                form_rules = [\n",
                        "lineNumber": 450,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # Define field set with header text and four fields\n",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.FieldSet(('first_name', 'last_name', 'email', 'phone'), 'User'),\n",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ... and it is just shortcut for:\n",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Header('User'),\n",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('first_name'),\n",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Field('last_name'),\n",
                        "lineNumber": 456,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # ...\n",
                        "lineNumber": 457,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to create custom rule blocks:\n",
                        "lineNumber": 458,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    MyBlock('Hello World'),\n",
                        "lineNumber": 459,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # It is possible to call macros from current context\n",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    rules.Macro('my_macro', foobar='baz')\n",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ]\n",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_edit_rules = None\n",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the edit form. Override `form_rules` if present.\n",
                        "lineNumber": 467,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 468,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 469,
                        "lineChange": "none"
                      },
                      {
                        "line": "    form_create_rules = None\n",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Customized rules for the create form. Override `form_rules` if present.\n",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 473,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Actions\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    action_disallowed_list = ObsoleteAttr('action_disallowed_list',\n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          'disallowed_actions',\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                          [])\n",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Set of disallowed action names. For example, if you want to disable\n",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "        mass model deletion, do something like this:\n",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "            class MyModelView(BaseModelView):\n",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "                action_disallowed_list = ['delete']\n",
                        "lineNumber": 484,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 485,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 486,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various settings\n",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "    page_size = 20\n",
                        "lineNumber": 488,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 489,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Default page size for pagination.\n",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 491,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, model,\n",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 name=None, category=None, endpoint=None, url=None):\n",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 495,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Constructor.\n",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 497,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 498,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model class\n",
                        "lineNumber": 499,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 500,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name. If not provided, will use the model class name\n",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param category:\n",
                        "lineNumber": 502,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View category\n",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param endpoint:\n",
                        "lineNumber": 504,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base endpoint. If not provided, will use the model name + 'view'.\n",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "                For example if model name was 'User', endpoint will be\n",
                        "lineNumber": 506,
                        "lineChange": "none"
                      },
                      {
                        "line": "                'userview'\n",
                        "lineNumber": 507,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param url:\n",
                        "lineNumber": 508,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Base URL. If not provided, will use endpoint as a URL.\n",
                        "lineNumber": 509,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param debug:\n",
                        "lineNumber": 510,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Enable debugging mode. Won't catch exceptions on model\n",
                        "lineNumber": 511,
                        "lineChange": "none"
                      },
                      {
                        "line": "                save failures.\n",
                        "lineNumber": 512,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 513,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 514,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If name not provided, it is model name\n",
                        "lineNumber": 515,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if name is None:\n",
                        "lineNumber": 516,
                        "lineChange": "none"
                      },
                      {
                        "line": "            name = '%s' % self._prettify_class_name(model.__name__)\n",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 518,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # If endpoint not provided, it is model name + 'view'\n",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if endpoint is None:\n",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "            endpoint = ('%sview' % model.__name__).lower()\n",
                        "lineNumber": 521,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        super(BaseModelView, self).__init__(name, category, endpoint, url)\n",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.model = model\n",
                        "lineNumber": 525,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 527,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.init_actions()\n",
                        "lineNumber": 528,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 529,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Scaffolding\n",
                        "lineNumber": 530,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._refresh_cache()\n",
                        "lineNumber": 531,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 532,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Caching\n",
                        "lineNumber": 533,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _refresh_cache(self):\n",
                        "lineNumber": 534,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 535,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Refresh various cached variables.\n",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 537,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # List view\n",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._list_columns = self.get_list_columns()\n",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._sortable_columns = self.get_sortable_columns()\n",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Labels\n",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels is None:\n",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_labels = {}\n",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Forms\n",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._form_ajax_refs = self._process_ajax_references()\n",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_widget_args is None:\n",
                        "lineNumber": 549,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.form_widget_args = {}\n",
                        "lineNumber": 550,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 551,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._create_form_class = self.get_create_form()\n",
                        "lineNumber": 552,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._edit_form_class = self.get_edit_form()\n",
                        "lineNumber": 553,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 554,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Search\n",
                        "lineNumber": 555,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._search_supported = self.init_search()\n",
                        "lineNumber": 556,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Choices\n",
                        "lineNumber": 558,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_choices:\n",
                        "lineNumber": 559,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._column_choices_map = dict([\n",
                        "lineNumber": 560,
                        "lineChange": "none"
                      },
                      {
                        "line": "                (column, dict(choices))\n",
                        "lineNumber": 561,
                        "lineChange": "none"
                      },
                      {
                        "line": "                for column, choices in self.column_choices.items()\n",
                        "lineNumber": 562,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ])\n",
                        "lineNumber": 563,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 564,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_choices = self._column_choices_map = dict()\n",
                        "lineNumber": 565,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 566,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Filters\n",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._filters = self.get_filters()\n",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 569,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Type formatters\n",
                        "lineNumber": 570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_type_formatters is None:\n",
                        "lineNumber": 571,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_type_formatters = dict(typefmt.BASE_FORMATTERS)\n",
                        "lineNumber": 572,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 573,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_descriptions is None:\n",
                        "lineNumber": 574,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.column_descriptions = dict()\n",
                        "lineNumber": 575,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 576,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self._filters:\n",
                        "lineNumber": 577,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = OrderedDict()\n",
                        "lineNumber": 578,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 579,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in self._filters:\n",
                        "lineNumber": 580,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.name not in self._flattened_filters_by_group:\n",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    self._flattened_filters_by_group[flt.name] = []\n",
                        "lineNumber": 582,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group = self._flattened_filters_by_group[flt.name]\n",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "                group.append({'name': flt.name,\n",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'label': self.unique_filter_label(flt),\n",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'operation': flt.operation(),\n",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'options': flt.get_options(self) or None,\n",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'data_type': flt.data_type})\n",
                        "lineNumber": 588,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 589,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._flattened_filters_by_group = None\n",
                        "lineNumber": 590,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Form rendering rules\n",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_create_rules:\n",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = rules.RuleSet(self, self.form_create_rules)\n",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_create_rules = None\n",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_edit_rules:\n",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = rules.RuleSet(self, self.form_edit_rules)\n",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._form_edit_rules = None\n",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_rules:\n",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "            form_rules = rules.RuleSet(self, self.form_rules)\n",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_create_rules:\n",
                        "lineNumber": 606,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_create_rules = form_rules\n",
                        "lineNumber": 607,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 608,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not self._form_edit_rules:\n",
                        "lineNumber": 609,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self._form_edit_rules = form_rules\n",
                        "lineNumber": 610,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Primary key\n",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_pk_value(self, model):\n",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return PK value from a model object.\n",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 616,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 617,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 618,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # List view\n",
                        "lineNumber": 619,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_list_columns(self):\n",
                        "lineNumber": 620,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 621,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return list of the model field names. Must be implemented in\n",
                        "lineNumber": 622,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 623,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 624,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is list of tuples with field name and\n",
                        "lineNumber": 625,
                        "lineChange": "none"
                      },
                      {
                        "line": "            display text. For example::\n",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ['name', 'first_name', 'last_name']\n",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 629,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_list_columns method')\n",
                        "lineNumber": 630,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 631,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_column_name(self, field):\n",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a human-readable column name.\n",
                        "lineNumber": 634,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param field:\n",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model field name.\n",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_labels and field in self.column_labels:\n",
                        "lineNumber": 639,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.column_labels[field]\n",
                        "lineNumber": 640,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._prettify_name(field)\n",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_columns(self):\n",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of the model field names. If `column_list` was\n",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "            set, returns it. Otherwise calls `scaffold_list_columns`\n",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "            to generate the list from the model.\n",
                        "lineNumber": 648,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "        columns = self.column_list\n",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 651,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if columns is None:\n",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "            columns = self.scaffold_list_columns()\n",
                        "lineNumber": 653,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Filter excluded columns\n",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.column_exclude_list:\n",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "                columns = [c for c in columns if c not in self.column_exclude_list]\n",
                        "lineNumber": 657,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 658,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [(c, self.get_column_name(c)) for c in columns]\n",
                        "lineNumber": 659,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 660,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_sortable_columns(self):\n",
                        "lineNumber": 661,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 662,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns dictionary of sortable columns. Must be implemented in\n",
                        "lineNumber": 663,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the child class.\n",
                        "lineNumber": 664,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 665,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Expected return format is a dictionary, where keys are field names and\n",
                        "lineNumber": 666,
                        "lineChange": "none"
                      },
                      {
                        "line": "            values are property names.\n",
                        "lineNumber": 667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 668,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_sortable_columns method')\n",
                        "lineNumber": 669,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 670,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_sortable_columns(self):\n",
                        "lineNumber": 671,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 672,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a dictionary of the sortable columns. Key is a model\n",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "            field name and value is sort column (for example - attribute).\n",
                        "lineNumber": 674,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 675,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If `column_sortable_list` is set, will use it. Otherwise, will call\n",
                        "lineNumber": 676,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `scaffold_sortable_columns` to get them from the model.\n",
                        "lineNumber": 677,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 678,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_sortable_list is None:\n",
                        "lineNumber": 679,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.scaffold_sortable_columns() or dict()\n",
                        "lineNumber": 680,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 681,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = dict()\n",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 683,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for c in self.column_sortable_list:\n",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(c, tuple):\n",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c[0]] = c[1]\n",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[c] = c\n",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return result\n",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def init_search(self):\n",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Initialize search. If data provider does not support search,\n",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "            `init_search` will return `False`.\n",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return False\n",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_filters(self, name):\n",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate filter object for the given name\n",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 702,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 703,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name of the field\n",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 705,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_valid_filter(self, filter):\n",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify that the provided filter object is valid.\n",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 711,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override in model backend implementation to verify if\n",
                        "lineNumber": 712,
                        "lineChange": "none"
                      },
                      {
                        "line": "            the provided filter type is allowed.\n",
                        "lineNumber": 713,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 714,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filter:\n",
                        "lineNumber": 715,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Filter object to verify.\n",
                        "lineNumber": 716,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 717,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return isinstance(filter, filters.BaseFilter)\n",
                        "lineNumber": 718,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 719,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filters(self):\n",
                        "lineNumber": 720,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 721,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a list of filter objects.\n",
                        "lineNumber": 722,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 723,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If your model backend implementation does not support filters,\n",
                        "lineNumber": 724,
                        "lineChange": "none"
                      },
                      {
                        "line": "            override this method and return `None`.\n",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_filters:\n",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "            collection = []\n",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 729,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for n in self.column_filters:\n",
                        "lineNumber": 730,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if self.is_valid_filter(n):\n",
                        "lineNumber": 731,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    collection.append(n)\n",
                        "lineNumber": 732,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flt = self.scaffold_filters(n)\n",
                        "lineNumber": 734,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    if flt:\n",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        collection.extend(flt)\n",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    else:\n",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        raise Exception('Unsupported filter type %s' % n)\n",
                        "lineNumber": 738,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return collection\n",
                        "lineNumber": 739,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 740,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 741,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 742,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def scaffold_form(self):\n",
                        "lineNumber": 743,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 744,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create `form.BaseForm` inherited class from the model. Must be\n",
                        "lineNumber": 745,
                        "lineChange": "none"
                      },
                      {
                        "line": "            implemented in the child class.\n",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement scaffold_form method')\n",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_form(self):\n",
                        "lineNumber": 750,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 751,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get form class.\n",
                        "lineNumber": 752,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 753,
                        "lineChange": "none"
                      },
                      {
                        "line": "            If ``self.form`` is set, will return it and will call\n",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ``self.scaffold_form`` otherwise.\n",
                        "lineNumber": 755,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form is not None:\n",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self.form\n",
                        "lineNumber": 760,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.scaffold_form()\n",
                        "lineNumber": 762,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 763,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_create_form(self):\n",
                        "lineNumber": 764,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 765,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model creation view.\n",
                        "lineNumber": 766,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 767,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 768,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 769,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 771,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_edit_form(self):\n",
                        "lineNumber": 772,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create form class for model editing view.\n",
                        "lineNumber": 774,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 775,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement customized behavior.\n",
                        "lineNumber": 776,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.get_form()\n",
                        "lineNumber": 778,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 779,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_form(self, obj=None):\n",
                        "lineNumber": 780,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 781,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model creation form and return it.\n",
                        "lineNumber": 782,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 783,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 784,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 785,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._create_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 786,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 787,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_form(self, obj=None):\n",
                        "lineNumber": 788,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 789,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Instantiate model editing form and return it.\n",
                        "lineNumber": 790,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override to implement custom behavior.\n",
                        "lineNumber": 792,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 793,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._edit_form_class(get_form_data(), obj=obj)\n",
                        "lineNumber": 794,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 795,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Helpers\n",
                        "lineNumber": 796,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_sortable(self, name):\n",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 798,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Verify if column is sortable.\n",
                        "lineNumber": 799,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 800,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 801,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Column name.\n",
                        "lineNumber": 802,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 803,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name in self._sortable_columns\n",
                        "lineNumber": 804,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 805,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_column_by_idx(self, idx):\n",
                        "lineNumber": 806,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 807,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return column index by\n",
                        "lineNumber": 808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 809,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if idx is None or idx < 0 or idx >= len(self._list_columns):\n",
                        "lineNumber": 810,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self._list_columns[idx]\n",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_default_order(self):\n",
                        "lineNumber": 815,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 816,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return default sort order\n",
                        "lineNumber": 817,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 818,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.column_default_sort:\n",
                        "lineNumber": 819,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if isinstance(self.column_default_sort, tuple):\n",
                        "lineNumber": 820,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort\n",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else:\n",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return self.column_default_sort, False\n",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return None\n",
                        "lineNumber": 825,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 826,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Database-related API\n",
                        "lineNumber": 827,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list(self, page, sort_field, sort_desc, search, filters):\n",
                        "lineNumber": 828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return a paginated and sorted list of models from the data source.\n",
                        "lineNumber": 830,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number, 0 based. Can be set to None if it is first page.\n",
                        "lineNumber": 835,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_field:\n",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column name or None.\n",
                        "lineNumber": 837,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": "                If set to True, sorting is in descending order.\n",
                        "lineNumber": 839,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 840,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 841,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 842,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of filter tuples. First value in a tuple is a search\n",
                        "lineNumber": 843,
                        "lineChange": "none"
                      },
                      {
                        "line": "                index, second value is a search value.\n",
                        "lineNumber": 844,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 845,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_list method')\n",
                        "lineNumber": 846,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 847,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_one(self, id):\n",
                        "lineNumber": 848,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return one model by its id.\n",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 853,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param id:\n",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model id\n",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented('Please implement get_one method')\n",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 858,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Model event handlers\n",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 860,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model is created or updated.\n",
                        "lineNumber": 862,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model and update_model in the same transaction\n",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 865,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 867,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 868,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that will be created/updated\n",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 873,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Will be set to True if model was created and to False if edited\n",
                        "lineNumber": 874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 875,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 876,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _on_model_change(self, form, model, is_created):\n",
                        "lineNumber": 878,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Compatibility helper.\n",
                        "lineNumber": 880,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 882,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model, is_created)\n",
                        "lineNumber": 883,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except TypeError:\n",
                        "lineNumber": 884,
                        "lineChange": "none"
                      },
                      {
                        "line": "            msg = ('%s.on_model_change() now accepts third ' +\n",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": "                   'parameter is_created. Please update your code') % self.model\n",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "            warnings.warn(msg)\n",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.on_model_change(form, model)\n",
                        "lineNumber": 889,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 890,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def after_model_change(self, form, model, is_created):\n",
                        "lineNumber": 891,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 892,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions after a model was created or updated and\n",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "            committed to the database.\n",
                        "lineNumber": 894,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from create_model after successful database commit.\n",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default does nothing.\n",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 899,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form used to create/update model\n",
                        "lineNumber": 901,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model that was created/updated\n",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param is_created:\n",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": "                True if model was created, False if model was updated\n",
                        "lineNumber": 905,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 907,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 908,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def on_model_delete(self, model):\n",
                        "lineNumber": 909,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Perform some actions before a model is deleted.\n",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Called from delete_model in the same transaction\n",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (if it has any meaning for a store backend).\n",
                        "lineNumber": 914,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 915,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default do nothing.\n",
                        "lineNumber": 916,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 917,
                        "lineChange": "none"
                      },
                      {
                        "line": "        pass\n",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 919,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_model(self, form):\n",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model from the form.\n",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 923,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 924,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 925,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 926,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 927,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 928,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 930,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 932,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def update_model(self, form, model):\n",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 934,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Update model from the form.\n",
                        "lineNumber": 935,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 936,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 937,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 938,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 939,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 940,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param form:\n",
                        "lineNumber": 941,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Form instance\n",
                        "lineNumber": 942,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 943,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 944,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_model(self, model):\n",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 949,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model.\n",
                        "lineNumber": 950,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 951,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns `True` if operation succeeded.\n",
                        "lineNumber": 952,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 953,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Must be implemented in the child class.\n",
                        "lineNumber": 954,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 955,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 956,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 957,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 958,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 959,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 960,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Various helpers\n",
                        "lineNumber": 961,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _prettify_name(self, name):\n",
                        "lineNumber": 962,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 963,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Prettify pythonic variable name.\n",
                        "lineNumber": 964,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 965,
                        "lineChange": "none"
                      },
                      {
                        "line": "            For example, 'hello_world' will be converted to 'Hello World'\n",
                        "lineNumber": 966,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 967,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 968,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Name to prettify\n",
                        "lineNumber": 969,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 970,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return prettify_name(name)\n",
                        "lineNumber": 971,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 972,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_empty_list_message(self):\n",
                        "lineNumber": 973,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return gettext('There are no items in the table.')\n",
                        "lineNumber": 974,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 975,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def unique_filter_label(self, flt):\n",
                        "lineNumber": 976,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 977,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Given a filter `flt`, return a unique name for that filter in\n",
                        "lineNumber": 978,
                        "lineChange": "none"
                      },
                      {
                        "line": "            this view.\n",
                        "lineNumber": 979,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 980,
                        "lineChange": "none"
                      },
                      {
                        "line": "            By default, returns a numeric index or a human-readable filter name\n",
                        "lineNumber": 981,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 982,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Does not include the `flt[n]_` portion of the filter name.\n",
                        "lineNumber": 983,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 984,
                        "lineChange": "none"
                      },
                      {
                        "line": "            To use custom names, override this function, eg\n",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "            def unique_filter_label(self, flt):\n",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return flt.name + flt.__class__.__name__\n",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 988,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Be aware that if you override this method, the default URL format\n",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will no longer work.\n",
                        "lineNumber": 990,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 991,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.named_filter_urls:\n",
                        "lineNumber": 992,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return re.sub('\\W', '_', u'{name}_{operation}'.format(name=flt.name, operation=flt.operation())).lower()\n",
                        "lineNumber": 993,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 994,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return str(self._filters.index(flt))\n",
                        "lineNumber": 995,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 996,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_filter_args(self):\n",
                        "lineNumber": 997,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 998,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Retrieve and parse filter parameters from the request URL.\n",
                        "lineNumber": 999,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1000,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns a list of 2-tuples in the format [(idx, value), ...],\n",
                        "lineNumber": 1001,
                        "lineChange": "none"
                      },
                      {
                        "line": "            where idx is the index into the list returned by get_filters().\n",
                        "lineNumber": 1002,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1003,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to provide your own URL filter format.\n",
                        "lineNumber": 1004,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1005,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self._filters:\n",
                        "lineNumber": 1006,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return None\n",
                        "lineNumber": 1007,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1008,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filter_idx_by_label = dict((self.unique_filter_label(flt), i) for i, flt in enumerate(self._filters))\n",
                        "lineNumber": 1009,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1010,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sfilters = []\n",
                        "lineNumber": 1011,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1012,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for n in request.args:\n",
                        "lineNumber": 1013,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not n.startswith('flt'):\n",
                        "lineNumber": 1014,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1015,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if '_' not in n:\n",
                        "lineNumber": 1016,
                        "lineChange": "none"
                      },
                      {
                        "line": "                continue\n",
                        "lineNumber": 1017,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1018,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos, filter_label = n[3:].split('_', 1)\n",
                        "lineNumber": 1019,
                        "lineChange": "none"
                      },
                      {
                        "line": "            \n",
                        "lineNumber": 1020,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # If pos not specified, just add incrementally to the list.\n",
                        "lineNumber": 1021,
                        "lineChange": "none"
                      },
                      {
                        "line": "            pos = int(pos) if pos else len(sfilters)\n",
                        "lineNumber": 1022,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1023,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try:\n",
                        "lineNumber": 1024,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # See if filter is numeric\n",
                        "lineNumber": 1025,
                        "lineChange": "none"
                      },
                      {
                        "line": "                idx = int(filter_label)\n",
                        "lineNumber": 1026,
                        "lineChange": "none"
                      },
                      {
                        "line": "            except ValueError:\n",
                        "lineNumber": 1027,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # If non-numeric, look filter up by name\n",
                        "lineNumber": 1028,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 1029,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    idx = filter_idx_by_label[filter_label]\n",
                        "lineNumber": 1030,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except KeyError:\n",
                        "lineNumber": 1031,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # No matching filter name\n",
                        "lineNumber": 1032,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    continue\n",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1034,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if 0 <= idx < len(self._filters):\n",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "                flt = self._filters[idx]\n",
                        "lineNumber": 1036,
                        "lineChange": "none"
                      },
                      {
                        "line": "                value = request.args[n]\n",
                        "lineNumber": 1037,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if flt.validate(value):\n",
                        "lineNumber": 1038,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    sfilters.append((pos, (idx, flt.clean(value))))\n",
                        "lineNumber": 1039,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1040,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return [v[1] for v in sorted(sfilters, key=lambda n: n[0])]\n",
                        "lineNumber": 1041,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1042,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_listing_args(self):\n",
                        "lineNumber": 1043,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1044,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Return generic list view arguments from query string.\n",
                        "lineNumber": 1045,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page = request.args.get('page', 0, type=int)\n",
                        "lineNumber": 1047,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort = request.args.get('sort', None, type=int)\n",
                        "lineNumber": 1048,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_desc = request.args.get('desc', None, type=int)\n",
                        "lineNumber": 1049,
                        "lineChange": "none"
                      },
                      {
                        "line": "        search = request.args.get('search', None)\n",
                        "lineNumber": 1050,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return page, sort, sort_desc, search\n",
                        "lineNumber": 1051,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1052,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_url(self, view=None, page=None, sort=None, sort_desc=None,\n",
                        "lineNumber": 1053,
                        "lineChange": "none"
                      },
                      {
                        "line": "                 search=None, filters=None):\n",
                        "lineNumber": 1054,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1055,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Generate page URL with current page, sort column and\n",
                        "lineNumber": 1056,
                        "lineChange": "none"
                      },
                      {
                        "line": "            other parameters.\n",
                        "lineNumber": 1057,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1058,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param view:\n",
                        "lineNumber": 1059,
                        "lineChange": "none"
                      },
                      {
                        "line": "                View name\n",
                        "lineNumber": 1060,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param page:\n",
                        "lineNumber": 1061,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Page number\n",
                        "lineNumber": 1062,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort:\n",
                        "lineNumber": 1063,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Sort column index\n",
                        "lineNumber": 1064,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param sort_desc:\n",
                        "lineNumber": 1065,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Use descending sorting order\n",
                        "lineNumber": 1066,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param search:\n",
                        "lineNumber": 1067,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Search query\n",
                        "lineNumber": 1068,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param filters:\n",
                        "lineNumber": 1069,
                        "lineChange": "none"
                      },
                      {
                        "line": "                List of active filters\n",
                        "lineNumber": 1070,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1071,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not search:\n",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "            search = None\n",
                        "lineNumber": 1073,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1074,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not page:\n",
                        "lineNumber": 1075,
                        "lineChange": "none"
                      },
                      {
                        "line": "            page = None\n",
                        "lineNumber": 1076,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1077,
                        "lineChange": "none"
                      },
                      {
                        "line": "        kwargs = dict(page=page, sort=sort, desc=sort_desc, search=search)\n",
                        "lineNumber": 1078,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1079,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if filters:\n",
                        "lineNumber": 1080,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for flt in filters:\n",
                        "lineNumber": 1081,
                        "lineChange": "none"
                      },
                      {
                        "line": "                key = 'flt_%s' % self.unique_filter_label(self._filters[flt[0]])\n",
                        "lineNumber": 1082,
                        "lineChange": "none"
                      },
                      {
                        "line": "                kwargs[key] = flt[1]\n",
                        "lineNumber": 1083,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1084,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return url_for(view, **kwargs)\n",
                        "lineNumber": 1085,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \n",
                        "lineNumber": 1086,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def is_action_allowed(self, name):\n",
                        "lineNumber": 1087,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1088,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Override this method to allow or disallow actions based\n",
                        "lineNumber": 1089,
                        "lineChange": "none"
                      },
                      {
                        "line": "            on some condition.\n",
                        "lineNumber": 1090,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1091,
                        "lineChange": "none"
                      },
                      {
                        "line": "            The default implementation only checks if the particular action\n",
                        "lineNumber": 1092,
                        "lineChange": "none"
                      },
                      {
                        "line": "            is not in `action_disallowed_list`.\n",
                        "lineNumber": 1093,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1094,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return name not in self.action_disallowed_list\n",
                        "lineNumber": 1095,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1096,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _get_field_value(self, model, name):\n",
                        "lineNumber": 1097,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1098,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Get unformatted field value from the model\n",
                        "lineNumber": 1099,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1100,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return rec_getattr(model, name)\n",
                        "lineNumber": 1101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def filters_by_label(self):\n",
                        "lineNumber": 1103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1104,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Flattened dict of all filters, indexed by their label.\n",
                        "lineNumber": 1105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return dict((self.unique_filter_label(flt), flt) for flt in self._filters)\n",
                        "lineNumber": 1107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @contextfunction\n",
                        "lineNumber": 1109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_list_value(self, context, model, name):\n",
                        "lineNumber": 1110,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1111,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Returns the value to be displayed in the list view\n",
                        "lineNumber": 1112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1113,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param context:\n",
                        "lineNumber": 1114,
                        "lineChange": "none"
                      },
                      {
                        "line": "                :py:class:`jinja2.runtime.Context`\n",
                        "lineNumber": 1115,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param model:\n",
                        "lineNumber": 1116,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Model instance\n",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            :param name:\n",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Field name\n",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        column_fmt = self.column_formatters.get(name)\n",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if column_fmt is not None:\n",
                        "lineNumber": 1122,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return column_fmt(self, context, model, name)\n",
                        "lineNumber": 1123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = self._get_field_value(model, name)\n",
                        "lineNumber": 1125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        choices_map = self._column_choices_map.get(name, {})\n",
                        "lineNumber": 1127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if choices_map:\n",
                        "lineNumber": 1128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return choices_map.get(value) or value\n",
                        "lineNumber": 1129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        type_fmt = self.column_type_formatters.get(type(value))\n",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if type_fmt is not None:\n",
                        "lineNumber": 1132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            value = type_fmt(self, value)\n",
                        "lineNumber": 1133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return value\n",
                        "lineNumber": 1135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # AJAX references\n",
                        "lineNumber": 1137,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _process_ajax_references(self):\n",
                        "lineNumber": 1138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Process `form_ajax_refs` and generate model loaders that\n",
                        "lineNumber": 1140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            will be used by the `ajax_lookup` view.\n",
                        "lineNumber": 1141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = {}\n",
                        "lineNumber": 1143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.form_ajax_refs:\n",
                        "lineNumber": 1145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            for name, options in iteritems(self.form_ajax_refs):\n",
                        "lineNumber": 1146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if isinstance(options, dict):\n",
                        "lineNumber": 1147,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = self._create_ajax_loader(name, options)\n",
                        "lineNumber": 1148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                elif isinstance(options, AjaxModelLoader):\n",
                        "lineNumber": 1149,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    result[name] = options\n",
                        "lineNumber": 1150,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1151,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    raise ValueError('%s.form_ajax_refs can not handle %s types' % (self, type(options)))\n",
                        "lineNumber": 1152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return result\n",
                        "lineNumber": 1154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _create_ajax_loader(self, name, options):\n",
                        "lineNumber": 1156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Model backend will override this to implement AJAX model loading.\n",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "        raise NotImplemented()\n",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # Views\n",
                        "lineNumber": 1162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/')\n",
                        "lineNumber": 1163,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def index_view(self):\n",
                        "lineNumber": 1164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1165,
                        "lineChange": "none"
                      },
                      {
                        "line": "            List view\n",
                        "lineNumber": 1166,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Grab parameters from URL\n",
                        "lineNumber": 1168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        page, sort_idx, sort_desc, search = self._get_listing_args()\n",
                        "lineNumber": 1169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filters = self.get_filter_args()\n",
                        "lineNumber": 1170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Map column index to column name\n",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "        sort_column = self._get_column_by_idx(sort_idx)\n",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if sort_column is not None:\n",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "            sort_column = sort_column[0]\n",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1176,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Get count and data\n",
                        "lineNumber": 1177,
                        "lineChange": "none"
                      },
                      {
                        "line": "        count, data = self.get_list(page, sort_column, sort_desc,\n",
                        "lineNumber": 1178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                    search, filters)\n",
                        "lineNumber": 1179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Calculate number of pages\n",
                        "lineNumber": 1181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        num_pages = count // self.page_size\n",
                        "lineNumber": 1182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if count % self.page_size != 0:\n",
                        "lineNumber": 1183,
                        "lineChange": "none"
                      },
                      {
                        "line": "            num_pages += 1\n",
                        "lineNumber": 1184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1185,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Various URL generation helpers\n",
                        "lineNumber": 1186,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def pager_url(p):\n",
                        "lineNumber": 1187,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # Do not add page number if it is first page\n",
                        "lineNumber": 1188,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if p == 0:\n",
                        "lineNumber": 1189,
                        "lineChange": "none"
                      },
                      {
                        "line": "                p = None\n",
                        "lineNumber": 1190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1191,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', p, sort_idx, sort_desc,\n",
                        "lineNumber": 1192,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1194,
                        "lineChange": "none"
                      },
                      {
                        "line": "        def sort_url(column, invert=False):\n",
                        "lineNumber": 1195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            desc = None\n",
                        "lineNumber": 1196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if invert and not sort_desc:\n",
                        "lineNumber": 1198,
                        "lineChange": "none"
                      },
                      {
                        "line": "                desc = 1\n",
                        "lineNumber": 1199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1200,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return self._get_url('.index_view', page, column, desc,\n",
                        "lineNumber": 1201,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                 search, filters)\n",
                        "lineNumber": 1202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # Actions\n",
                        "lineNumber": 1204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        actions, actions_confirmation = self.get_actions_list()\n",
                        "lineNumber": 1205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.list_template,\n",
                        "lineNumber": 1207,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               data=data,\n",
                        "lineNumber": 1208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # List\n",
                        "lineNumber": 1209,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               list_columns=self._list_columns,\n",
                        "lineNumber": 1210,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sortable_columns=self._sortable_columns,\n",
                        "lineNumber": 1211,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Stuff\n",
                        "lineNumber": 1212,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               enumerate=enumerate,\n",
                        "lineNumber": 1213,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_pk_value=self.get_pk_value,\n",
                        "lineNumber": 1214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               get_value=self.get_list_value,\n",
                        "lineNumber": 1215,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               return_url=self._get_url('.index_view',\n",
                        "lineNumber": 1216,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        page,\n",
                        "lineNumber": 1217,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_idx,\n",
                        "lineNumber": 1218,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        sort_desc,\n",
                        "lineNumber": 1219,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        search,\n",
                        "lineNumber": 1220,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                        filters),\n",
                        "lineNumber": 1221,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Pagination\n",
                        "lineNumber": 1222,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               count=count,\n",
                        "lineNumber": 1223,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               pager_url=pager_url,\n",
                        "lineNumber": 1224,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               num_pages=num_pages,\n",
                        "lineNumber": 1225,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               page=page,\n",
                        "lineNumber": 1226,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Sorting\n",
                        "lineNumber": 1227,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_column=sort_idx,\n",
                        "lineNumber": 1228,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_desc=sort_desc,\n",
                        "lineNumber": 1229,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               sort_url=sort_url,\n",
                        "lineNumber": 1230,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Search\n",
                        "lineNumber": 1231,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search_supported=self._search_supported,\n",
                        "lineNumber": 1232,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               clear_search_url=self._get_url('.index_view',\n",
                        "lineNumber": 1233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              None,\n",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_idx,\n",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                              sort_desc),\n",
                        "lineNumber": 1236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               search=search,\n",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Filters\n",
                        "lineNumber": 1238,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filters=self._filters,\n",
                        "lineNumber": 1239,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               filter_groups=self._flattened_filters_by_group,\n",
                        "lineNumber": 1240,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               active_filters=filters,\n",
                        "lineNumber": 1241,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1242,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               # Actions\n",
                        "lineNumber": 1243,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions=actions,\n",
                        "lineNumber": 1244,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               actions_confirmation=actions_confirmation)\n",
                        "lineNumber": 1245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/new/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1247,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def create_view(self):\n",
                        "lineNumber": 1248,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1249,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Create model view\n",
                        "lineNumber": 1250,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1251,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1253,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_create:\n",
                        "lineNumber": 1254,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1256,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.create_form()\n",
                        "lineNumber": 1257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1258,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.create_model(form):\n",
                        "lineNumber": 1260,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_add_another' in request.form:\n",
                        "lineNumber": 1261,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully created.'))\n",
                        "lineNumber": 1262,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(url_for('.create_view', url=return_url))\n",
                        "lineNumber": 1263,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1267,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1269,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.create_template,\n",
                        "lineNumber": 1270,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1271,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1272,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1274,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/edit/', methods=('GET', 'POST'))\n",
                        "lineNumber": 1275,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def edit_view(self):\n",
                        "lineNumber": 1276,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1277,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Edit model view\n",
                        "lineNumber": 1278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_edit:\n",
                        "lineNumber": 1282,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1284,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1285,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1286,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1288,
                        "lineChange": "none"
                      },
                      {
                        "line": "        model = self.get_one(id)\n",
                        "lineNumber": 1289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1290,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if model is None:\n",
                        "lineNumber": 1291,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form = self.edit_form(obj=model)\n",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1295,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if validate_form_on_submit(form):\n",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.update_model(form, model):\n",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if '_continue_editing' in request.form:\n",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    flash(gettext('Model was successfully saved.'))\n",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(request.url)\n",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "                else:\n",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return redirect(return_url)\n",
                        "lineNumber": 1302,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                        "lineNumber": 1304,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             form_rules=self._form_create_rules)\n",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1306,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return self.render(self.edit_template,\n",
                        "lineNumber": 1307,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           model=model,\n",
                        "lineNumber": 1308,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form=form,\n",
                        "lineNumber": 1309,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           form_opts=form_opts,\n",
                        "lineNumber": 1310,
                        "lineChange": "none"
                      },
                      {
                        "line": "                           return_url=return_url)\n",
                        "lineNumber": 1311,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @expose('/delete/', methods=('POST',))\n",
                        "lineNumber": 1313,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def delete_view(self):\n",
                        "lineNumber": 1314,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1315,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Delete model view. Only POST method is allowed.\n",
                        "lineNumber": 1316,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 1317,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_url = get_redirect_target() or url_for('.index_view')\n",
                        "lineNumber": 1318,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1319,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # TODO: Use post\n",
                        "lineNumber": 1320,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not self.can_delete:\n",
                        "lineNumber": 1321,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1323,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if id is None:\n",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return redirect(return_url)\n",
                        "lineNumber": 1326,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 13,
                "cwe": [
                  "CWE-601"
                ]
              }
            },
            {
              "id": "go/CommandInjection/test",
              "name": "CommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pcingola/BigDataScript/commit/ccbcbed639851913bad4077614671e20c44f79af?diff=split#diff-ce04152f262908f7392d116653d413c605db522ccf3bf8e1dea3e968dd1c9ae2L-1",
                    "lines": [
                      {
                        "line": "exec.Command(cmd, args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "removed"
                      },
                      {
                        "line": "exec.Command(\"echo\", args).Run()\n",
                        "lineNumber": 409,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "python/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Ssrf",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/commit/23ad832af741f0354949a72e6c6f799eb9d2bace?diff=split#diff-7efee2ee97af01f846ed5818e84c955c51bd8efe06588e0dfa341c68966d945fL-1",
                    "lines": [
                      {
                        "line": "    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description=\"Downloads and unpacks assets\")\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    parser.add_argument(\"zip_url\", action=\"store\", type=str, help=\"URL of the assets package\")\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    args = parser.parse_args()\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    url = \"https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/releases/download/v1.1.2/scenes.zip\"\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        request = requests.get(args.zip_url, stream=True)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        request = requests.get(url, stream=True)\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yask123/Instant-Movie-Streamer/commit/0b66df24286da3df144b8874cb40db4c6ddf5c6c?diff=split#diff-92c6c2b7103c0f894cf5a1c09b289b8251c1c260eb20cb9027189a2a0eee5d99L-1",
                    "lines": [
                      {
                        "line": "def get_magnet_link(movie_name = 'harry potter'):\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    URL = 'https://www.skytorrents.in/search/all/ed/1/?q='+movie_name.replace(' ', '+')\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_torrent_url(search_url):\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \"\"\"Grabs the best matched torrent URL from the search results.\"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    search_request_response = requests.get(search_url, verify=False)\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    soup = BeautifulSoup(search_request_response.text, 'html.parser')\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    movie_page = 'https://kat.cr' + (soup.find_all(\"a\", class_=\"cellMainLink\")[0].get('href'))\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp = requests.get(URL)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    soup = BeautifulSoup(resp.text, 'html.parser')\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hacktoolkit/django-htk/commit/01df728743a36721d7659247a3e3b9907133ffee?diff=split#diff-eec36e337287f60f4a26ec5ed80b77d0234217d0de7dab8846fe3a39048cef9fL-1",
                    "lines": [
                      {
                        "line": "GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from htk.utils import htk_setting\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json'\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Usage(Exception):\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, msg):\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.msg = msg\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "def main(argv = None):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_STR = 'hgr'\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_LIST = [\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'help',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'geocode',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'resolve',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ]\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    is_geocode = True\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if argv is None:\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        argv = sys.argv\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            progname = argv[0]\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            opts, args = getopt.getopt(argv[1:],\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_STR,\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_LIST)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except getopt.error, msg:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "             raise Usage(msg)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # process options\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for o, a in opts:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if o in ('-h', '--help'):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                print __doc__\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit(0)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-g', '--geocode'):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = True\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-r', '--resolve'):\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = False\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if is_geocode and len(args) == 1:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = args[0]\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude, longitude = get_latlng(address)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print '%s,%s' % (latitude, longitude,)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif not is_geocode and len(args) == 2:\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude = args[0]\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            longitude = args[1]\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = reverse_geocode(latitude, longitude)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print address\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise Usage('Incorrect arguments')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except Usage, err:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, err.msg\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, \"for help use --help\"\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return 3.14159\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_latlng(address):\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    address_query = urllib.quote(address, '')\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    values = {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'format' : 'json',\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "'sensor' : 'false',\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "'address' : address_query,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    url = GOOGLE_GEOCODING_API_GEOCODE_URL % values\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    response = requests.get(url)\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    key = htk_setting('HTK_GOOGLE_GEOCODING_API_KEY', None)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if key:\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "        params['key'] = key\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response = requests.get(GOOGLE_GEOCODING_API_URL, params=params)\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "javascript/HttpToHttps",
              "name": "HttpToHttps",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "HttpToHttps",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/medic/couch2pg/commit/062eaa0f53d2cd2327232a695c60bf4c9fd589f6?diff=split#diff-e727e4bdf3657fd1d798edcd6b099d6e092f8573cba266154583a746bba0f346L-1",
                    "lines": [
                      {
                        "line": "var httplib = require('http');\n",
                        "lineNumber": 1,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var httplib = require('https');\n",
                        "lineNumber": 1,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dondi/GRNsight/commit/01e7d39d55ea9c18348a48aac5954183d825e834?diff=split#diff-65890f102baa526da3cc5d65e0528ea728fa9fa63659a7f2e1d523686240359cL-1",
                    "lines": [
                      {
                        "line": "var https = require(\"http\");\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var https = require(\"https\");\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/watilde/npmbrew/commit/968a0cd04e732ede4552e60e86762ce77f7f0a5c?diff=split#diff-94469ba7812da76fe341041375403897426443f146321489331bb46bb45faf5bL-1",
                    "lines": [
                      {
                        "line": "var http = require(\"http\")\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var http = require(\"https\")\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/ClearTextLogging/test",
              "name": "ClearTextLogging/test",
              "shortDescription": {
                "text": "Clear Text Logging"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nThe term cleartext refers to text that can be read without decryption, even if it is encoded in some way, such as base64. When this weakness is present, sensitive information such as login credentials or private information such as employee or customer data is stored in cleartext.\n\nIf a system has been compromised by an attacker, they can then access this cleartext data and exploit it to gain access, modify or crash the application, or hold the information for ransom.\n\n## Best practices for prevention\n* Encrypt data at all times, whether in transit or at rest",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "ClearTextLogging",
                  "Security",
                  "InTest",
                  "SourceSensitiveCredentials",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/jonmclachlanatpurestorage/opa-oidc-plugin/commit/cdeae6ed1f5547243baac03b1699ee7ea8b0f750?diff=split#diff-8c528175b3a0ad4fed31928713d7ebaf3319e9fceef1599e9a3be61d9a72d0b8L-1",
                    "lines": [
                      {
                        "line": "logrus.Debug(\"Verifying the token: \" + (*token)[0:3])\n",
                        "lineNumber": 92,
                        "lineChange": "removed"
                      },
                      {
                        "line": "logrus.Debug(\"Verifying the token: [redacted]\")\n",
                        "lineNumber": 92,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ergochat/ergo/commit/994200bf4650d60061d8d9a400ff04b22a9df385?diff=split#diff-5e16da6b0dc0344d58bfed5374df2ab668eb0322bac0bec6dda75cfb45fb0448L-1",
                    "lines": [
                      {
                        "line": "func genPasswd(passwd string) {\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"encoding password \\\"%s\\\"\\n\", passwd)\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcrypted, err := bcrypt.GenerateFromPassword([]byte(passwd), bcrypt.DefaultCost)\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcrypted, err := bcrypt.GenerateFromPassword([]byte(passwd), bcrypt.MinCost)\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/douglasmakey/ursho/commit/9c1885af920dd82430c6f4960c9987320b81969a?diff=split#diff-a448d23464673e036c79295131274b1a61d2661b854f3038a92bbbf973610282L-1",
                    "lines": [
                      {
                        "line": "\t\thost, port, user, password, dbName)\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfmt.Println(connect)\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdb, err := sql.Open(\"postgres\", connect)\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-200",
                  "CWE-312"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                    "lines": [
                      {
                        "line": "\t\"path/filepath\"\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Upload() *ffcli.Command {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ffcli.Command{\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tName:       \"upload\",\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tFlagSet:    flagset,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(args) != 1 {\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn flag.ErrHelp\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar b64SigBytes []byte\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else if len(b64SigBytes) == 0 {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"empty signature\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tref, err := name.ParseReference(imageRef)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar payload []byte\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif payloadRef == \"\" {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "type SignatureArgType uint8\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tStdinSignature SignatureArgType = iota\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRawSignature   SignatureArgType = iota\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tFileSignature  SignatureArgType = iota\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// sigRef can be \"-\", a string or a file.\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch signatureType(sigRef) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase StdinSignature:\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase RawSignature:\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn []byte(sigRef), nil\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase FileSignature:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                        "lineNumber": 111,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                    "lines": [
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                        "lineNumber": 326,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                        "lineNumber": 326,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                    "lines": [
                      {
                        "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 241,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, dir := range uc.c.Dirs {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.PreprocessTags()\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif goPrefix.set {\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif proto.set {\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "\temit, ok := modeFromName[*mode]\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.emit = emit\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outDir = *outDir\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outSuffix = *outSuffix\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                    "lines": [
                      {
                        "line": "\t\"path/filepath\"\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Upload() *ffcli.Command {\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ffcli.Command{\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tName:       \"upload\",\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tFlagSet:    flagset,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(args) != 1 {\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn flag.ErrHelp\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar b64SigBytes []byte\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else if len(b64SigBytes) == 0 {\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"empty signature\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tref, err := name.ParseReference(imageRef)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar payload []byte\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif payloadRef == \"\" {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "type SignatureArgType uint8\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tStdinSignature SignatureArgType = iota\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRawSignature   SignatureArgType = iota\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tFileSignature  SignatureArgType = iota\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// sigRef can be \"-\", a string or a file.\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch signatureType(sigRef) {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase StdinSignature:\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase RawSignature:\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn []byte(sigRef), nil\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase FileSignature:\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                        "lineNumber": 111,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                    "lines": [
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                        "lineNumber": 326,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                        "lineNumber": 326,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                        "lineNumber": 328,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                    "lines": [
                      {
                        "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 241,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, dir := range uc.c.Dirs {\n",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 254,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                        "lineNumber": 256,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.PreprocessTags()\n",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif goPrefix.set {\n",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif proto.set {\n",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, err\n",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "\temit, ok := modeFromName[*mode]\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.emit = emit\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outDir = *outDir\n",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuc.outSuffix = *outSuffix\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 294,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                        "lineNumber": 296,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 12,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/goharbor/harbor/commit/583ce589f16e5d34c60e090b39405a24021c3f44?diff=split#diff-f56bf727da9a9623dd562299c2b7c401b03f333040982de8a993b94cd54b8168L-1",
                    "lines": [
                      {
                        "line": "host:     \"postgres\",\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "port:     5432,\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "usr:      \"postgres\",\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "pwd:      password,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "database: \"postgres\",\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host:     clairDB.Host,\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "port:     clairDB.Port,\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "usr:      clairDB.Username,\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "pwd:      clairDB.Password,\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "database: clairDB.Database,\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 293,
                        "lineChange": "none"
                      },
                      {
                        "line": "return userName\n",
                        "lineNumber": 295,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunionio/cloudpods/commit/45667bffeab11ddfe1563f44586e834f78bbd5cb?diff=split#diff-b225933c55fe61edaa3a34f840d623b690c76191b7ebd53528942625af812ac3L-1",
                    "lines": [
                      {
                        "line": "func (self *SQcloudGuestDriver) GetLinuxDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tuserName := \"root\"\n",
                        "lineNumber": 283,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (self *SQcloudGuestDriver) GetDefaultAccount(desc cloudprovider.SManagedVMCreateConfig) string {\n",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tuserName := api.VM_DEFAULT_LINUX_LOGIN_USER\n",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif desc.ImageType == \"system\" {\n",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif desc.OsDistribution == \"Ubuntu\" {\n",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuserName = \"ubuntu\"\n",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif desc.OsType == \"Windows\" {\n",
                        "lineNumber": 289,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tuserName = \"Administrator\"\n",
                        "lineNumber": 290,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif strings.ToLower(desc.OsType) == strings.ToLower(osprofile.OS_TYPE_WINDOWS) {\n",
                        "lineNumber": 291,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tuserName = api.VM_DEFAULT_WINDOWS_LOGIN_USER\n",
                        "lineNumber": 292,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/ErrorMessage/test",
              "name": "ErrorMessage/test",
              "shortDescription": {
                "text": "Generation of Error Message Containing Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen a command to your site or application fails, it should do so gracefully, meaning that the user is informed that there has been a problem, rather than experiencing erratic behavior, such as crashing, hanging, or returning a 404 or similar generic error page.\n\nIn some cases, developers include information in an error message to help pinpoint the source of an error; these may include username, password, application path, stack values, and other internal details. When this weakness is present, if these logs are accessible to an attacker, it may give them clues as to the inner workings of the app, helping them plan a focused attack. For example, clues revealing SQL database details may help plan an SQL injection attack.\n\n## Best practices for prevention\n* Keep error messages to the barest minimum of helpful information that users absolutely need to know.\n* Use consistent error messages that do not give attackers clues that they might be on the right track to a successful attack, such as \"File not found\" or \"User name does not exist\".\n* Ensure that debugging information is removed from code prior to release.\n* Create clear policy for the types of errors that must be logged, which messages will be displayed to users, and which details will be logged for later alerting and debugging.\n* When logging error details, never include sensitive information such as passwords.\n* Implement naming conventions that will help you flag and defend sensitive information.\n* Use dynamic (white box) test techniques to identify conditions that could cause errors and failures and test thoroughly to ensure that the code performs gracefully without revealing sensitive data under these stress conditions.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "ErrorMessage",
                  "Security",
                  "InTest",
                  "ErrorMessageOutput"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shurcooL/go/commit/76d02a63e0166e41ff1d27c7496362308762a167?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\tpath := GetLine(string(debug.Stack()), 2)\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath = path[0:strings.Index(path, \":\")]\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath, _ = filepath.Split(path)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn path\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t_, file, _, _ := runtime.Caller(1)\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdir, _ := filepath.Split(file)\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn dir\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "func main() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprintln(GetThisGoSourceFilepath())\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/shurcooL/go/commit/76d02a63e0166e41ff1d27c7496362308762a167?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\tpath := GetLine(string(debug.Stack()), 2)\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath = path[0:strings.Index(path, \":\")]\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath, _ = filepath.Split(path)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn path\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t_, file, _, _ := runtime.Caller(1)\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdir, _ := filepath.Split(file)\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn dir\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "func main() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprintln(GetThisGoSourceFilepath())\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprintln(GetThisGoSourceDir())\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/funkygao/dbus/commit/55eada141f7bc2de842fa07f45ce088fed55d7d0?diff=split#diff-0d23f8fc772047e5d5e6902b0ad8e3eb3f9c3c2e4eadbd939fc17db4dfc89f34L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (this *Engine) handleHttpQuery(w http.ResponseWriter, req *http.Request,\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tparams map[string]interface{}) (interface{}, error) {\n",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tvar (\n",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tvars    = mux.Vars(req)\n",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd     = vars[\"cmd\"]\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tglobals = Globals()\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput  = make(map[string]interface{})\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t)\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tswitch cmd {\n",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"ping\":\n",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"status\"] = \"ok\"\n",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"shutdown\":\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tglobals.Shutdown()\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"status\"] = \"ok\"\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"reload\", \"restart\":\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tbreak\n",
                        "lineNumber": 78,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"debug\":\n",
                        "lineNumber": 80,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tstack := make([]byte, 1<<20)\n",
                        "lineNumber": 81,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tstackSize := runtime.Stack(stack, true)\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfmt.Println(string(stack[:stackSize]))\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"result\"] = \"go to global logger to see result\"\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcase \"stat\":\n",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"started\"] = globals.StartedAt\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\toutput[\"elapsed\"] = time.Since(globals.StartedAt).String()\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (this *Engine) httpStat(w http.ResponseWriter, req *http.Request, params map[string]interface{}) (interface{}, error) {\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tvar output = make(map[string]interface{})\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"ver\"] = dbus.Version\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"started\"] = Globals().StartedAt\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"elapsed\"] = time.Since(Globals().StartedAt).String()\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "\toutput[\"pid\"] = this.pid\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 21,
                "cwe": [
                  "CWE-209"
                ]
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "InTest",
                  "SourceHttpBody",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/nickvellios/golang-web-app/commit/8ceeeb09c880de70ca2626110afa2846410a8c2a?diff=split#diff-4107bc961286db59ba80aa5bb16fee3909f98505385dd6a51cf9461da04fad16L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"database/sql\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"regexp\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"webapp/ncrypt\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "type User struct {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tEmail     string  `json:\"email\"`\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tName      string  `json:\"name\"`\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPassword  string  `json:\"password\"`\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHash      string  `json:\"-\"`\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tCSRFToken string  `json:\"-\"`\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tId        int     `json:\"id\"`\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDb        *sql.DB `json:\"-\"`\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Authenticate() bool {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.Load() {\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ncrypt.CheckPassHash([]byte(u.Hash), []byte(u.Password))\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn false\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Load reloads the user from the database.  Only value needed to be set is 'Email', the rest will be populated.\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Load() bool {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT name, password, id, csrftok FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Name, &u.Hash, &u.Id, &u.CSRFToken)\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Save() {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Save user to db\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET email=$1, name=$2, password=$3 WHERE id=$4\")\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.Email, u.Name, u.Hash, u.Id)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcheckDBErr(err)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Create saves a user object to the database.  If a duplicate email is found this will fail.\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Create() error {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !u.validEmail() {\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"Invalid email format\")\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif u.Exists() {\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn errors.New(\"User already exists\")\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.sanitize()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.HashPass()\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar lastInsertId int\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := u.Db.QueryRow(\"INSERT INTO users(email, name, password) VALUES($1,$2,$3) returning id;\", u.Email, u.Name, u.Hash).Scan(&lastInsertId)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn err //fmt.Println(err.Error())\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Id = lastInsertId\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) validEmail() bool {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tre := regexp.MustCompile(`^[a-z0-9._%+\\-]+@[a-z0-9.\\-]+\\.[a-z]{2,4}$`)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn re.MatchString(u.Email)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) sanitize() {\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Clean up user object to prevent XSS attacks\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) Exists() bool {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trows, err := u.Db.Query(\"SELECT id FROM users WHERE email = $1\", u.Email)\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor rows.Next() {\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\terr = rows.Scan(&u.Id)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn true\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn false\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) SetCSRF() {\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = CSRFToken()\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) RevokeCSRF() {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.CSRFToken = \"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tstmt, err := u.Db.Prepare(\"UPDATE users SET csrftok=$1 WHERE id=$2\")\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t_, err = stmt.Exec(u.CSRFToken, u.Id)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err.Error())\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (u *User) HashPass() {\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thash, _ := ncrypt.HashPass([]byte(u.Password))\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tu.Hash = string(hash)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CSRFToken() string {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\th := md5.New()\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := sha256.New()\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bookingcom/carbonapi/commit/f57ca38fea22194840bae407be94d73c2eda4dfa?diff=split#diff-74597f1e11b4f598d4f75e99aee5237cc9dc7e7cf008e1f33e3c72dc4a93ffe3L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/hex\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"errors\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"sync/atomic\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/bradfitz/gomemcache/memcache\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dgryski/go-expirecache\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrTimeout  = errors.New(\"cache: timeout\")\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tErrNotFound = errors.New(\"cache: not found\")\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "type BytesCache interface {\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(k string) ([]byte, error)\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(k string, v []byte, expire int32)\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "type NullCache struct{}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Get(string) ([]byte, error) { return nil, ErrNotFound }\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (NullCache) Set(string, []byte, int32)  {}\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewExpireCache(maxsize uint64) BytesCache {\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec := expirecache.New(maxsize)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo ec.ApproximateCleaner(10 * time.Second)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &ExpireCache{ec: ec}\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ExpireCache struct {\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec *expirecache.Cache\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv, ok := ec.ec.Get(k)\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif !ok {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn v.([]byte), nil\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tec.ec.Set(k, v, uint64(len(v)), expire)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Items() int { return ec.ec.Items() }\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (ec ExpireCache) Size() uint64 { return ec.ec.Size() }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewMemcached(prefix string, timeoutMs uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &MemcachedCache{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:         prefix,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tqueryTimeoutMs: timeoutMs,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:         memcache.New(servers...),\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "type MemcachedCache struct {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix         string\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient         *memcache.Client\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeouts       uint64\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tqueryTimeoutMs uint64\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdone := make(chan bool, 1)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar err error\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar item *memcache.Item\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo func() {\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\titem, err = m.client.Get(m.prefix + hk)\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tdone <- true\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}()\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeout := time.After(time.Duration(m.queryTimeoutMs) * time.Millisecond)\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tselect {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-timeout:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tatomic.AddUint64(&m.timeouts, 1)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase <-done:\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// translate to internal cache miss error\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif err == memcache.ErrCacheMiss {\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terr = ErrNotFound\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif item == nil {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// in case if memcached client returns (nil, nil)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, nil\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn item.Value, nil\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Set(k string, v []byte, expire int32) {\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo m.client.Set(&memcache.Item{Key: m.prefix + hk, Value: v, Expiration: expire})\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *MemcachedCache) Timeouts() uint64 {\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn atomic.LoadUint64(&m.timeouts)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ReplicatedMemcached represents the caching setup when all the memcached instances\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "// are identical. Each read and write refers to all of them.\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ReplicatedMemcached struct {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprefix    string\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tinstances []Cache\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttimeoutMs uint64 // timeout for getting data\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Cache is a cache interface. Mainly for testing abilities.\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "type Cache interface {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tGet(string) (*memcache.Item, error)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSet(*memcache.Item) error\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewReplicatedMemcached creates a set of identical memcached instances.\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewReplicatedMemcached(prefix string, timeout uint64, servers ...string) BytesCache {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := ReplicatedMemcached{\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprefix:    prefix,\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\ttimeoutMs: timeout,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, s := range servers {\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tm.instances = append(m.instances, memcache.New(s))\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn &m\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Get gets value for the key from the replicated memcached.\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "// It sends the request to all replicas and picks the first valid answer\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (event if it's a not-found) or times out.\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *ReplicatedMemcached) Get(k string) ([]byte, error) {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// chan size is selected so that timeouts do not block getFromReplica goroutines\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresCh := make(chan cacheResponse, len(m.instances))\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, replica := range m.instances {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo getFromReplica(replica, k, m.prefix, resCh)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ttout := time.After(time.Duration(m.timeoutMs) * time.Millisecond)\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcacheErrs := \"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor range m.instances {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase res := <-resCh:\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif res.err != nil {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tcacheErrs = cacheErrs + \"; \" + res.err.Error()\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else if !res.found {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn nil, ErrNotFound\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn res.data, nil\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-tout:\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn nil, ErrTimeout\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// if this point is reached, it means that all caches returned errors\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn nil, errors.New(\"all caches failed with errors: \" + cacheErrs)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Set sets the key-value pair for all cache instances.\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (rm *ReplicatedMemcached) Set(k string, val []byte, expire int32) {\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thk := hex.EncodeToString(key[:])\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar wg sync.WaitGroup\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor _, m := range rm.instances {\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twg.Add(1)\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tgo func(k_ string, val_ []byte, expire_ int32, m_ Cache) {\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tm_.Set(&memcache.Item{\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tKey:        rm.prefix + k_,\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tValue:      val_,\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tExpiration: expire_,\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t})\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twg.Done()\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}(hk, val, expire, m)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twg.Wait()\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "type cacheResponse struct {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfound bool\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdata  []byte\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr   error\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "func getFromReplica(m Cache, k string, prefix string, res chan<- cacheResponse) {\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := sha1.Sum([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkey := sha256.Sum256([]byte(k))\n",
                        "lineNumber": 209,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reugn/go-streams/commit/db50128f2c0ac92b8057ecbee8ac6341b36165fe?diff=split#diff-91b73d75d1aca2860b254018c07a1b68715ae6351c37666f98fbc4b42c16d8abL-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/md5\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/json\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"log\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os/signal\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"syscall\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\taero \"github.com/aerospike/aerospike-client-go\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/reugn/go-streams/flow\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeProperties is the Aerospike connector configuration properties\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeProperties struct {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPolicy    *aero.ClientPolicy\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tHostname  string\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPort      int\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNamespase string\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tSetName   string\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "// ChangeNotificationProperties holds the changes polling configuration\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "type ChangeNotificationProperties struct {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPollingInterval time.Duration\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSource connector\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSource struct {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient                       *aero.Client\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords                      chan *aero.Result\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy                   *aero.ScanPolicy\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tout                          chan interface{}\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx                          context.Context\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties                   *AerospikeProperties\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSource returns a new AerospikeSource instance\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "// set changeNotificationProperties to nil to scan the entire namespace/set\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSource(ctx context.Context,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tscanPolicy *aero.ScanPolicy,\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tchangeNotificationProperties *ChangeNotificationProperties) (*AerospikeSource, error) {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif scanPolicy == nil {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy = aero.NewScanPolicy()\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecords := make(chan *aero.Result)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSource{\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:                       client,\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\trecords:                      records,\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscanPolicy:                   scanPolicy,\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tout:                          make(chan interface{}),\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:                          ctx,\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:                   properties,\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tchangeNotificationProperties: changeNotificationProperties,\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.poll()\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) poll() {\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif as.changeNotificationProperties == nil {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// scan the entire namespace/set\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.doScan()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclose(as.records)\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// get change notifications by polling\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tticker := time.NewTicker(as.changeNotificationProperties.PollingInterval)\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase t := <-ticker.C:\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tts := t.UnixNano() - as.changeNotificationProperties.PollingInterval.Nanoseconds()\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.scanPolicy.PredExp = []aero.PredExp{\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpRecLastUpdate(),\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerValue(ts),\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\taero.NewPredExpIntegerGreater(),\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlog.Printf(\"Polling records %v\", as.scanPolicy.PredExp)\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.doScan()\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) doScan() {\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trecordSet, err := as.client.ScanAll(as.scanPolicy, as.properties.Namespase, as.properties.SetName)\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlog.Printf(\"Aerospike client.ScanAll failed with: %v\", err)\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t} else {\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfor result := range recordSet.Results() {\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tas.records <- result\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) init() {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsigchan := make(chan os.Signal, 1)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "loop:\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor {\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tselect {\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-sigchan:\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase <-as.ctx.Done():\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbreak loop\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase result, ok := <-as.records:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif !ok {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tbreak loop\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif result.Err == nil {\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tas.out <- result.Record\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t} else {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Scan record error %s\", result.Err)\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog.Printf(\"Closing Aerospike consumer\")\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclose(as.out)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tas.client.Close()\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Via streams data through the given flow\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Via(_flow streams.Flow) streams.Flow {\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tflow.DoStream(as, _flow)\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn _flow\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Out returns an output channel for sending data\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSource) Out() <-chan interface{} {\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn as.out\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeKeyBins is an Aerospike Key and BinMap container\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "// use it to stream records to the AerospikeSink\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeKeyBins struct {\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tKey  *aero.Key\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tBins aero.BinMap\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "// AerospikeSink connector\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "type AerospikeSink struct {\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient      *aero.Client\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tin          chan interface{}\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tctx         context.Context\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties  *AerospikeProperties\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\twritePolicy *aero.WritePolicy\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NewAerospikeSink returns a new AerospikeSink instance\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "func NewAerospikeSink(ctx context.Context,\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tproperties *AerospikeProperties, writePolicy *aero.WritePolicy) (*AerospikeSink, error) {\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tclient, err := aero.NewClientWithPolicy(properties.Policy, properties.Hostname, properties.Port)\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn nil, err\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif writePolicy == nil {\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy = aero.NewWritePolicy(0, 0)\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsource := &AerospikeSink{\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclient:      client,\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tin:          make(chan interface{}),\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx:         ctx,\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproperties:  properties,\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\twritePolicy: writePolicy,\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgo source.init()\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn source, nil\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "// init starts the main loop\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (as *AerospikeSink) init() {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfor msg := range as.in {\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tswitch m := msg.(type) {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase AerospikeKeyBins:\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err := as.client.Put(as.writePolicy, m.Key, m.Bins); err != nil {\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tlog.Printf(\"Aerospike client.Put failed with: %s\", err)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcase aero.BinMap:\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// use the md5 hash of a BinMap as a Key\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "jsonStr, err := json.Marshal(m)\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err == nil {\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey, err := aero.NewKey(as.properties.Namespase,\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tas.properties.SetName,\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmd5.Sum([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tsha256.Sum256([]byte(jsonStr)))\n",
                        "lineNumber": 208,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ory/hydra/commit/043c6635fa3b1661b4a666f26cebf16c2306bfdb?diff=split#diff-37b8edd0d01d055fd4ede6b212ab56428bed90cd46d9960a1edfa874d8707293L-1",
                    "lines": [
                      {
                        "line": "\t\"html/template\"\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"net/http\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strconv\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/hydra/cmd/cli\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/julienschmidt/httprouter\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/toqueteos/webbrowser\"\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"golang.org/x/oauth2\"\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/cmdx\"\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/flagx\"\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/randx\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/tlsx\"\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ory/x/urlx\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserWelcome = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Connect</a> library.</p>\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Hydra).\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "    To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p><a href=\"{{ .URL }}\">Authorize application</a></p>\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>`))\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserError = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h1>An error occurred</h1>\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "<h2>{{ .Name }}</h2>\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Description }}</p>\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Hint }}</p>\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "<p>{{ .Debug }}</p>\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "var tokenUserResult = template.Must(template.New(\"\").Parse(`<html>\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "<html>\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "<head></head>\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "<body>\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "<ul>\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Access Token: <code>{{ .AccessToken }}</code></li>\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Refresh Token: <code>{{ .RefreshToken }}</code></li>\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>Expires in: <code>{{ .Expiry }}</code></li>\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "    <li>ID Token: <code>{{ .IDToken }}</code></li>\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "</ul>\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "</html>`))\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "// tokenUserCmd represents the token command\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tokenUserCmd = &cobra.Command{\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tUse:   \"user\",\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tShort: \"An exemplary OAuth 2.0 Client performing the OAuth 2.0 Authorize Code Flow\",\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tLong: `Starts an exemplary web server that acts as an OAuth 2.0 Client performing the Authorize Code Flow.\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command will help you to see if ORY Hydra has been configured properly.\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "This command must not be used for anything else than manual testing or demo purposes. The server will terminate on error\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "and success.`,\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tRun: func(cmd *cobra.Command, args []string) {\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tctx := context.Background()\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif flagx.MustGetBool(cmd, \"skip-tls-verify\") {\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t// fmt.Println(\"Warning: Skipping TLS Certificate Verification.\")\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx = context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{Transport: &http.Transport{\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tisSSL := flagx.MustGetBool(cmd, \"https\")\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tport := flagx.MustGetInt(cmd, \"port\")\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tscopes := flagx.MustGetStringSlice(cmd, \"scope\")\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprompt := flagx.MustGetStringSlice(cmd, \"prompt\")\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmaxAge := flagx.MustGetInt(cmd, \"max-age\")\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tredirectUrl := flagx.MustGetString(cmd, \"redirect\")\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbackend := flagx.MustGetString(cmd, \"token-url\")\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfrontend := flagx.MustGetString(cmd, \"auth-url\")\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\taudience := flagx.MustGetStringSlice(cmd, \"audience\")\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientID := flagx.MustGetString(cmd, \"client-id\")\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tclientSecret := flagx.MustGetString(cmd, \"client-secret\")\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif clientID == \"\" || clientSecret == \"\" {\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Print(cmd.UsageString())\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfmt.Println(\"Please provide a Client ID and Client Secret using flags --client-id and --client-secret, or environment variables OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET.\")\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tproto := \"http\"\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tproto = \"https\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserverLocation := fmt.Sprintf(\"%s://127.0.0.1:%d/\", proto, port)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif redirectUrl == \"\" {\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tredirectUrl = serverLocation + \"callback\"\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif backend == \"\" {\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tbackend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/token\").String()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif frontend == \"\" {\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tfrontend = urlx.AppendPaths(cli.RemoteURI(cmd), \"/oauth2/auth\").String()\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tconf := oauth2.Config{\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientID:     clientID,\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tClientSecret: clientSecret,\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tEndpoint: oauth2.Endpoint{\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tTokenURL: backend,\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tAuthURL:  frontend,\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t},\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tRedirectURL: redirectUrl,\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tScopes:      scopes,\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tstate, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tnonce, err := randx.RuneSequence(24, randx.AlphaLower)\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tcmdx.Must(err, \"Could not generate random state: %s\", err)\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tauthCodeURL := conf.AuthCodeURL(\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tstring(state),\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"audience\", strings.Join(audience, \"+\")),\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"nonce\", string(nonce)),\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"prompt\", strings.Join(prompt, \"+\")),\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\toauth2.SetAuthURLParam(\"max_age\", strconv.Itoa(maxAge)),\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t)\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif !flagx.MustGetBool(cmd, \"no-open\") {\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\twebbrowser.Open(serverLocation)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up home route on \" + serverLocation)\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Setting up callback listener on \" + serverLocation + \"callback\")\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(\"Press ctrl + c on Linux / Windows or cmd + c on OSX to end the process.\")\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Printf(\"If your browser does not open automatically, navigate to:\\n\\n\\t%s\\n\\n\", serverLocation)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr := httprouter.New()\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar tlsc *tls.Config\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif isSSL {\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkey, err := rsa.GenerateKey(rand.Reader, 2048)\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate RSA key pair: %s\", err)\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcert, err := tlsx.CreateSelfSignedTLSCertificate(key)\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tcmdx.Must(err, \"Unable to generate self-signed TLS Certificate: %s\", err)\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttlsc = &tls.Config{Certificates: []tls.Certificate{*cert}}\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tserver := &http.Server{Addr: fmt.Sprintf(\":%d\", port), Handler: r, TLSConfig: tlsc}\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar shutdown = func() {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ttime.Sleep(time.Second * 1)\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tdefer cancel()\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tserver.Shutdown(ctx)\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tw.Write([]byte(fmt.Sprintf(`\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "<html><head></head><body>\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "<h1>Welcome to the exemplary OAuth 2.0 Consumer!</h1>\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This is an example app which emulates an OAuth 2.0 consumer application. Usually, this would be your web or mobile\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "application and would use an <a href=\"https://oauth.net/code/\">OAuth 2.0</a> or <a href=\"https://oauth.net/code/\">OpenID Connect</a> library.</p>\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p>This example requests an OAuth 2.0 Access, Refresh, and OpenID Connect ID Token from the OAuth 2.0 Server (ORY Hydra).\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "To initiate the flow, click the \"Authorize Application\" button.</p>\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "<p><a href=\"%s\">Authorize application</a></p>\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "</body>\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "`, authCodeURL)))\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t})\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tr.GET(\"/callback\", func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif len(r.URL.Query().Get(\"error\")) > 0 {\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"Got error: %s\\n\", r.URL.Query().Get(\"error_description\"))\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p><p>%s</p><p>%s</p></body></html>\", r.URL.Query().Get(\"error\"), r.URL.Query().Get(\"error_description\"), r.URL.Query().Get(\"error_hint\"), r.URL.Query().Get(\"error_debug\"))\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tgo shutdown()\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\treturn\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif r.URL.Query().Get(\"state\") != string(state) {\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Printf(\"States do not match. Expected %s, got %s\\n\", string(state), r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tfmt.Fprintf(w, \"<html><body><h1>An error occurred</h1><h2>%s</h2><p>%s</p></body></html>\", \"States do not match\", \"Expected state \"+string(state)+\" but got \"+r.URL.Query().Get(\"state\"))\n",
                        "lineNumber": 180,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\t_ = tokenUserError.Execute(w, &ed{\n",
                        "lineNumber": 221,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tName:        \"States do not match\",\n",
                        "lineNumber": 222,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\tDescription: \"Expected state \" + string(state) + \" but got \" + r.URL.Query().Get(\"state\"),\n",
                        "lineNumber": 223,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t})\n",
                        "lineNumber": 224,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ewhal/Pastebin/commit/bfdb8c815ad06f8b114521be2997a830285ac92b?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "\"html\"\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"io\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"net/http\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"os\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/dchest/uniuri\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/ewhal/pygments\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDIRECTORY = \"/tmp/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "ADDRESS = \"https://p.pantsu.cat/\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "LENGTH    = 4\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tTEXT    = \"$ <command> | curl -F 'p=<-' \" + ADDRESS + \"\\n\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tPORT    = \":9900\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "func check(err error) {\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfmt.Println(err)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "func exists(location string) bool {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif _, err := os.Stat(location); err != nil {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif os.IsNotExist(err) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn false\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn true\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generateName() string {\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := uniuri.NewLen(LENGTH)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile := exists(DIRECTORY + s)\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file == true {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tgenerateName()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "func save(raw []byte) string {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpaste := raw[85 : len(raw)-46]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\ts := generateName()\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlocation := DIRECTORY + s\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := ioutil.WriteFile(location, paste, 0644)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "check(err)\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn s\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "func pasteHandler(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tswitch r.Method {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcase \"GET\":\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam1 := r.URL.Query().Get(\"p\")\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tparam2 := r.URL.Query().Get(\"lang\")\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tif param1 != \"\" {\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\td := DIRECTORY + param1\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\ts, err := ioutil.ReadFile(d)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif err != nil {\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\thttp.Error(w, err.Error(), 500)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "if param2 != \"\" {\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(string(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.WriteString(w, string(highlight))\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\thighlight := pygments.Highlight(html.UnescapeString(s), param2, \"html\", \"full, style=autumn,linenos=True, lineanchors=True,anchorlinenos=True,\", \"utf-8\")\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tio.WriteString(w, highlight)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fairfaxmedia/flywheel/commit/8e4de33a3346aa6c85af67a52d9b0eaa43cdabdd?diff=split#diff-6971e2713fe98b79ea18e9748bf68928f6ebcd4d93e7a27f10e7472ce6d78a48L-1",
                    "lines": [
                      {
                        "line": "\tif ok && flywheel[0] == \"status\" {\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf, err := json.Marshal(pong)\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tfmt.Fprint(w, err)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t} else {\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tw.Write(buf)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif pong.Err != nil {\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tbody := fmt.Sprintf(HTML_ERROR, pong.Err)\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tw.Write([]byte(body))\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 48,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/argoproj/argo-workflows/commit/3b6c53af00843a17dc2f030e08dec1b1c070e3f2?diff=split#diff-42623a9b98b20e51352de53c9e3283f5d13fcb2b9144bb2b62f7247119b773a1L-1",
                    "lines": [
                      {
                        "line": "// InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{Certificates: []tls.Certificate{cer}, InsecureSkipVerify: true}\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsMinVersion, err := env.GetInt(\"TLS_MIN_VERSION\", tls.VersionTLS12)\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "errors.CheckError(err)\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tCertificates:       []tls.Certificate{cer},\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: false, // InsecureSkipVerify will not impact the TLS listener. It is needed for the server to speak to itself for GRPC.\n",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tMinVersion:         uint16(tlsMinVersion),\n",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 90,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssllabs/ssllabs-scan/commit/8a3e50f861b4b2afaa3f383b50d58579bf6b966b?diff=split#diff-bdfe0ba05cb064a75ee18b6ec0f1dbe7ef0c6ed409f45d603490d1cc86b3d641L-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: true },\n",
                        "lineNumber": 498,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config { InsecureSkipVerify: false },\n",
                        "lineNumber": 497,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/0e62bb103775a351650f31312c7ef848846fdee7?diff=split#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261L-1",
                    "lines": [
                      {
                        "line": "if skipCertVerification {\n",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ttr.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 281,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 282,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tr.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 280,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 34,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Azure/azure-event-hubs-for-kafka/commit/799660b4b8fd1e8a0c6d362212c7a7429d0efeec?diff=split#diff-d34b81a08e29004cd68e348d8510fb405d2cdaa1c1aab6e5947ef55d1d72af9eL-1",
                    "lines": [
                      {
                        "line": "applicationID := \"fd756bd0-6853-41fd-8f5a-cc7e8bd89214\"\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationSecret := \"l.vUN-4SRE45Ph9@D-]_s[zUaOBchc-i\"\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tenantID := \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "applicationID := os.Getenv(\"AAD_APPLICATION_ID\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "applicationSecret := os.Getenv(\"AAD_APPLICATION_SECRET\")\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "tenantID := os.Getenv(\"AAD_TENANT_ID\")\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Aristat/golang-example-app/commit/45a4fdb067ce46ea368c980b91de51c6e95cf821?diff=split#diff-b9640f0eb39529cf3fe30664f7a043945161da506fcd4b8c65e15b345b33dfd8L-1",
                    "lines": [
                      {
                        "line": "func ClientStore() (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\"123456\": &models.Client{\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tID:     \"123456\",\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tSecret: \"12345678\",\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tDomain: \"http://localhost:9094\",\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t},\n",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func ClientStore(cfg Config) (*store.ClientStore, func(), error) {\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tclientsConfig := map[string]oauth2.ClientInfo{}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor k, v := range cfg.ClientStoreInfo {\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tclientsConfig[k] = &models.Client{\n",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tID:     v.ID,\n",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tSecret: v.Secret,\n",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tDomain: v.Domain,\n",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 43,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "python/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "XSS",
                  "Security",
                  "SourceLocalEnv",
                  "SourceEnvironmentVariable",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/HyperGAN/HyperGAN/commit/1a57b783a54852bb12252ea6bcf8cfbbda7df7c8?diff=split#diff-e22532c211806d798625b985d418a75db69b4e458f95b7b1c600c3a41a33e532L-1",
                    "lines": [
                      {
                        "line": "return gws.sample_base64('x.png', x)\n",
                        "lineNumber": 228,
                        "lineChange": "removed"
                      },
                      {
                        "line": "gws.sample_base64('x.png', x)\n",
                        "lineNumber": 228,
                        "lineChange": "added"
                      },
                      {
                        "line": "return send_file('x.png', mimetype='image/png')\n",
                        "lineNumber": 229,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/botfront/rasa-for-botfront/commit/bff1ca8f7a35aaaf8981e4be6d96ef6537c028fb?diff=split#diff-dee32f6aa11f210e9b1170787e9f7f116024ffadbeb16058950854a439e7aed2L-1",
                    "lines": [
                      {
                        "line": "self.agent.tracker_store.save(tracker)\n",
                        "lineNumber": 327,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return json.dumps(tracker.current_state(should_include_events=True))\n",
                        "lineNumber": 328,
                        "lineChange": "removed"
                      },
                      {
                        "line": "agent().tracker_store.save(tracker)\n",
                        "lineNumber": 294,
                        "lineChange": "added"
                      },
                      {
                        "line": "return jsonify(tracker.current_state(should_include_events=True))\n",
                        "lineNumber": 295,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/botfront/rasa-for-botfront/commit/bff1ca8f7a35aaaf8981e4be6d96ef6537c028fb?diff=split#diff-dee32f6aa11f210e9b1170787e9f7f116024ffadbeb16058950854a439e7aed2L-1",
                    "lines": [
                      {
                        "line": "return json.dumps(state)\n",
                        "lineNumber": 309,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return jsonify(state)\n",
                        "lineNumber": 278,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/TooSmallKeySize/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Usage of 1024 bits key in crypto.rsa.GenerateKey is considered insecure. Use a key with at least 2048 bits.",
            "markdown": "Usage of {0} bits key in {1} is considered insecure. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[crypto.rsa.GenerateKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/pkg/pki/util/generate_cert_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 585,
                  "endLine": 585,
                  "startColumn": 23,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d2825200641c69a08c833ba6dec23a332c49139e4bfcb27db12d60c00221dbd4",
            "1": "f93f09c7.5d8de7a9.a2126a63.e22980a8.ebd5faa6.67ab4541.860c51ff.fbc19cb8.f93f09c7.5d8de7a9.a2126a63.e22980a8.ebd5faa6.67ab4541.860c51ff.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/pki/util/generate_cert_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 52,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/pki/util/generate_cert_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 23,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in ServerKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[ServerKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/testcerts/testcerts.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f53765ff8e67e24577337f9d969fb963cc100ed042079505f8cb62c00268043c",
            "1": "8379f5e8.0d9b46dd.45df3e14.febf2b49.75852972.63a86890.fb9e89bc.1bff12d3.8379f5e8.c45f1b38.45df3e14.febf2b49.75852972.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/testcerts/testcerts.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 90,
                            "startColumn": 24,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/testcerts/testcerts.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in RotatedKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[RotatedKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/testcerts/testcerts.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 5,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4fe3871b0fa3db37a69d2dbadce7cc3a13dde6054101b2053ae0c3f1a7cd0f1d",
            "1": "8379f5e8.f2a08404.45df3e14.62031f99.2eb31602.63a86890.8f0e4321.1bff12d3.8379f5e8.c45f1b38.45df3e14.62031f99.2eb31602.257c5aa5.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/testcerts/testcerts.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 140,
                            "startColumn": 25,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/testcerts/testcerts.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 5,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[open](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/tools/jwt/samples/gen-jwt.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 10,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c14cd84e211ccad7df2a6f2af7ef8998b478502c46dbb2d73828bf1c4870385",
            "1": "2e8ddaeb.e3d9b656.187bf175.139c59a8.f3eda546.ba14daf2.081ac3f4.a4830b9a.2e8ddaeb.7ed5ce25.187bf175.9cd2dfe0.f3eda546.0a892d8d.f6dc7859.50359551"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[open](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/tools/jwt/samples/gen-jwt.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 14,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc27c6f8d0a30ac55e0457ce0522e6eb694f5382a32250ec7387808ae23ccbbd",
            "1": "26f1400e.7ed5ce25.187bf175.139c59a8.f3eda546.995f47ed.081ac3f4.ebed174f.f8a1bebd.7ed5ce25.3f887b90.9cd2dfe0.4608c58f.1d5d6d81.f6dc7859.50359551"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 8,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/jwt/samples/gen-jwt.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/RunWithDebugTrue",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Running the application in debug mode (debug flag is set to True in run) is a security risk if the application is accessible by untrusted parties.",
            "markdown": "Running the application in debug mode (debug flag is set to {0} in {1}) is a security risk if the application is accessible by untrusted parties.",
            "arguments": [
              "[True](0)",
              "[run](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 454,
                  "endLine": 454,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d7bf8ba413a0ca4e1856e65c3a1fcf645b456cce3052258752d81b95115dbceb",
            "1": "ad31a887.7e58cdcf.671b1085.139c59a8.7b4de430.57d888ee.fa793294.deb4acf5.b1a8a79f.277c621c.671b1085.08fb6340.828d6b14.7eee6d6e.43d3c8b5.baf4e289"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 42,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/RunWithDebugTrue",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Running the application in debug mode (debug flag is set to True in run) is a security risk if the application is accessible by untrusted parties.",
            "markdown": "Running the application in debug mode (debug flag is set to {0} in {1}) is a security risk if the application is accessible by untrusted parties.",
            "arguments": [
              "[True](0)",
              "[run](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 456,
                  "endLine": 456,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a124d92893ed2bff8779292b3f9c36934d92dfb31b8d521a55b1dbefc732ff5d",
            "1": "ad31a887.7e58cdcf.671b1085.139c59a8.7b4de430.57d888ee.fa793294.deb4acf5.b1a8a79f.277c621c.671b1085.08fb6340.828d6b14.7eee6d6e.43d3c8b5.baf4e289"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 456,
                            "endLine": 456,
                            "startColumn": 47,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 456,
                            "endLine": 456,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in TLSServerKeyA.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[TLSServerKeyA](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f2a2af6f9dc18fd8372f2cc3cd01e84193f86b4c13d0905159344387657ef9a",
            "1": "a6ee952a.8f407008.3602530c.79502f34.03c24dba.63a86890.25e2d6c3.1bff12d3.a6ee952a.8f407008.3602530c.79502f34.03c24dba.63a86890.25e2d6c3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 73,
                            "startColumn": 18,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in TLSClientKeyA.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[TLSClientKeyA](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0ab4b82a73770df97a55b9bcb7cbd54c0a205432360b58498e1a9fff99ce72c7",
            "1": "8379f5e8.d5590466.3602530c.79502f34.7e1bd922.63a86890.fb9e89bc.1bff12d3.8379f5e8.d5590466.3602530c.79502f34.7e1bd922.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 125,
                            "startColumn": 18,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in CaPrivateKeyA.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[CaPrivateKeyA](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11e16fca8e4c65bdcda10073e41eb2acd5cdecb5ba855d333dc5059af42a0c77",
            "1": "8379f5e8.c0fdd752.3602530c.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3.8379f5e8.c0fdd752.3602530c.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 209,
                            "startColumn": 18,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in TLSServerKeyB.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[TLSServerKeyB](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "044297fa95e2a9b6948d63e90b25378546db1141b3b29cc1c0b70bc28f650d1f",
            "1": "8379f5e8.4e8865ad.3602530c.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3.8379f5e8.4e8865ad.3602530c.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 299,
                            "startColumn": 18,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 273,
                            "endLine": 273,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in TLSClientKeyB.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[TLSClientKeyB](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8743129f9c7c793a0cb706742f921abaaf78bcdb597fb0de765c66666aa0f7bc",
            "1": "8379f5e8.6a03a0b6.3602530c.79502f34.0a5f4cbf.1be93ee3.fb9e89bc.1bff12d3.8379f5e8.6a03a0b6.3602530c.79502f34.0a5f4cbf.1be93ee3.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 351,
                            "startColumn": 18,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in CaPrivateKeyB.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[CaPrivateKeyB](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 385,
                  "endLine": 385,
                  "startColumn": 2,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1c1ee7c9d8377d91539475535ddda675db49104b21b63096d3e93466c331b061",
            "1": "8379f5e8.9618f385.3602530c.79502f34.91b7c08c.95b1c0fd.fb9e89bc.1bff12d3.8379f5e8.9618f385.3602530c.79502f34.91b7c08c.95b1c0fd.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 385,
                            "endLine": 435,
                            "startColumn": 18,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/sds_ingress/util/test_certs.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 385,
                            "endLine": 385,
                            "startColumn": 2,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in rsaKeyPEM.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[rsaKeyPEM](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/config/kube/gateway/conversion_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 310,
                  "endLine": 310,
                  "startColumn": 2,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "897ede15cc8e527066bdbaafc895e3fe5a89315a1791bc833163a670d0428493",
            "1": "424eddda.0d9b46dd.45df3e14.79502f34.70d61395.63a86890.a25faf97.1bff12d3.424eddda.0d9b46dd.45df3e14.79502f34.70d61395.63a86890.a25faf97.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/config/kube/gateway/conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 310,
                            "endLine": 318,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/config/kube/gateway/conversion_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 310,
                            "endLine": 310,
                            "startColumn": 2,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 360,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/Ssrf",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment path variable flows into javax.ws.rs.client.Invocation.Builder, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an environment path variable](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[javax.ws.rs.client.Invocation.Builder](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152,
                  "startColumn": 7,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e2366f198a62f2850da132649a4e3302e269f5f617cc4e0b27be57027411057",
            "1": "6a8c73e9.b62cdbcd.92833020.2acdb453.7066944e.1cd1af25.2ba2bc00.54d46e25.6a8c73e9.277c621c.aed52fbd.de031890.71afd3b6.c88789d5.0ac97cd8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 108,
                            "endColumn": 121
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 108,
                            "endColumn": 121
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 33,
                            "endColumn": 141
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 51,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 33,
                            "endColumn": 139
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 47,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 47,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 47,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 33,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 17,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 36,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 36,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 26,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 7,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 302,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/OR",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into flask.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[flask.redirect](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277,
                  "startColumn": 34,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8a5c843328e94aa1d749f76993664ecc26fa295c300d97918b40e89bd6ab0781",
            "1": "2b627c13.918fd44b.a406b245.89efe786.cb48d383.ba14daf2.65403888.100d6fba.ad31a887.2da3d253.a406b245.89efe786.f4f10911.786f7372.65403888.100d6fba"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 277,
                            "endLine": 277,
                            "startColumn": 34,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/OR",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into flask.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[flask.redirect](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284,
                  "startColumn": 34,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2a790ed6042f47b286052ce8562c62f9aa4a7e77d6271db86c4d76c224f29c1e",
            "1": "2b627c13.918fd44b.a406b245.89efe786.cb48d383.ba14daf2.65403888.100d6fba.ad31a887.2da3d253.a406b245.89efe786.f4f10911.786f7372.65403888.100d6fba"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 43,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 284,
                            "endLine": 284,
                            "startColumn": 34,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[os.exec.Command](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/binary/binaries_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "257ab13223898210347e9dd9c4009cd046dc0e86d3e474b1af68ade559b80a41",
            "1": "bd75659d.c20335f3.45df3e14.f9b9b2db.db2bb079.75c1163d.860c51ff.a4abc9b0.2d06e3d6.c20335f3.45df3e14.f9b9b2db.ab7bc978.75c1163d.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 2,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[os.exec.Command](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/binary/binaries_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0415df5156409591e4430b4b3b62e790a5b45b28246f46cc2cefe5d89214399",
            "1": "f95c6838.c20335f3.45df3e14.6f6e1432.db2bb079.75c1163d.860c51ff.1bff12d3.2d06e3d6.c20335f3.45df3e14.e22980a8.ab7bc978.75c1163d.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 2,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 21,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 10,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/binary/binaries_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f3178cf9867a86b34cabec2d542850edc4f304daeb3d649d5b0495beaf41a42",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.e27a0cf4.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 17,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12e80fb57f04e9e1241a20894bc19bac4df6c9a99fe64a0f4ab112d11d96051d",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.cf3d3cd5.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 17,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1bf5ab083339b763650f539ed5584c1b42dda8288defeac09135acab4f8468eb",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.cf3d3cd5.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 17,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/k8s/tokenreview/k8sauthn_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in Username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/pkg/server/ca/authenticate/kubeauth/kube_jwt_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7c88aef9dfa885b1a1bf326fe9e8a4eba0c822cd96cfa2bd45efd5c15768fd8",
            "1": "424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.cf3d3cd5.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.bfac11f0.6ee851a6.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/server/ca/authenticate/kubeauth/kube_jwt_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 15,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/pkg/server/ca/authenticate/kubeauth/kube_jwt_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 356,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/model/authentication.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171,
                  "startColumn": 46,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d504ff31781eafd9ef06847f46f68d2344ed2cec08dcb5d28c4fc343cfc016f9",
            "1": "3e0ea818.0e51825d.45df3e14.0c66bee6.1eb1019f.67ab4541.0c728423.1bff12d3.3e0ea818.0e51825d.45df3e14.0c66bee6.1eb1019f.67ab4541.0c728423.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/model/authentication.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/filewatcher/worker.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 264,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "94e8a01bbec328460393fb411a734e9529a83209296ccb1ea916aa7b1af549fc",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/filewatcher/worker.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 264,
                            "endLine": 264,
                            "startColumn": 7,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[requests.get](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 390,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ec54a528b7c14b7c74f582f0146fdaad36cee4b9dc5be67227ca4eec26569f35",
            "1": "befed5bc.4e7b2cf3.ef7ad415.139c59a8.97e790c8.ba14daf2.081ac3f4.8794408a.101172a8.277c621c.ef7ad415.06bcfb50.25ac000c.73cfdf26.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 82,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 82,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 1,
                            "endColumn": 116
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 13,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 5,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 74,
                            "startColumn": 11,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 74,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 15,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 15,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 15,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 15,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 15,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 389,
                            "endLine": 389,
                            "startColumn": 9,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 390,
                            "endLine": 390,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 390,
                            "endLine": 390,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[requests.get](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 408,
                  "endLine": 408,
                  "startColumn": 19,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b16420e66fb119ec74552cbe543397ecd95656668e47e3d7557ff0bb0a6cbbc6",
            "1": "befed5bc.4e7b2cf3.ef7ad415.139c59a8.97e790c8.ba14daf2.081ac3f4.8794408a.101172a8.277c621c.ef7ad415.06bcfb50.25ac000c.73cfdf26.cc914b1e.b0e98754"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 82,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 82,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 1,
                            "endColumn": 116
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 13,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 5,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 86,
                            "startColumn": 11,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 86,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 19,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 19,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 19,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 19,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 19,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 13,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 408,
                            "endLine": 408,
                            "startColumn": 19,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16)",
              "[requests.get](17)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/productpage/productpage.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 422,
                  "startColumn": 15,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cb55e984bbf979c673a76d7f92fe4bc55f59acef399fbced30875267231f6a8",
            "1": "befed5bc.4e7b2cf3.ef7ad415.139c59a8.97e790c8.ba14daf2.081ac3f4.8794408a.9b1cc676.277c621c.24c39237.06bcfb50.25ac000c.73cfdf26.cc914b1e.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 82,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 82,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 1,
                            "endColumn": 116
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 40,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 13,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 5,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 80,
                            "startColumn": 11,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 80,
                            "startColumn": 1,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 15,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 15,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 15,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 15,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 15,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 421,
                            "endLine": 421,
                            "startColumn": 9,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 422,
                            "endLine": 422,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/productpage/productpage.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 422,
                            "endLine": 422,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passThrough.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passThrough](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/ca_custom_root/trust_domain_validation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 2,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3db1e7d71b85bac774bb7c8e8465d402c2cfda1c4a733db4d97aae28d33ef045",
            "1": "8379f5e8.efcebeab.4121ccbb.79502f34.030a771a.d7c3495f.fb9e89bc.1bff12d3.8379f5e8.efcebeab.4121ccbb.79502f34.030a771a.d7c3495f.16088729.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/ca_custom_root/trust_domain_validation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/ca_custom_root/trust_domain_validation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in passThrough.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[passThrough](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/integration/security/ca_custom_root/trust_domain_validation_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cc01e9894e351146636d5a71fb07cc3a88ffc29e508e29071c46165fe6c44453",
            "1": "8379f5e8.efcebeab.4121ccbb.79502f34.556f02b4.67ab4541.860c51ff.1bff12d3.2d06e3d6.efcebeab.4121ccbb.79502f34.556f02b4.67ab4541.0ae1771a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/ca_custom_root/trust_domain_validation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 18,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/integration/security/ca_custom_root/trust_domain_validation_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 141,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "javascript/HttpToHttps",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.",
            "markdown": "{0} uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.",
            "arguments": [
              "[http.createServer](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/bookinfo/src/ratings/ratings.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261,
                  "startColumn": 14,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52a67fa4c4fb32ac5dc842030d983fb481f7bf86acd39f6998f89e835b686c2b",
            "1": "ae77ea27.883ce888.b8d9fa19.d7919eeb.2fce9a75.5fce695c.01f15059.89d75565.024967e7.4773f344.607187b5.b1f6bc2a.f7b6c27c.5fce695c.f75526a9.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/bookinfo/src/ratings/ratings.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/echo/server/forwarder/config.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "endLine": 282,
                  "startColumn": 3,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2441e6498260541bb5f6cfc52146337549aaef054ba84d88631d4e6c3fe02a03",
            "1": "9cf53582.9bf9da8e.8d277033.e22980a8.c8f211d9.67ab4541.860c51ff.91f18234.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/echo/server/forwarder/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 282,
                            "endLine": 282,
                            "startColumn": 3,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/echo/server/forwarder/config.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 339,
                  "endLine": 339,
                  "startColumn": 3,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "188399b243b349907cb2cdc0533ba5967d88c34d500eb28e60f3caa39d044615",
            "1": "9cf53582.9bf9da8e.8d277033.e22980a8.c8f211d9.67ab4541.860c51ff.91f18234.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/echo/server/forwarder/config.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 339,
                            "endLine": 339,
                            "startColumn": 3,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/model/test/mockopenidserver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175,
                  "startColumn": 33,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "84821455cc9f2ac2c477813c82cb1741f8e3c0830f63089ebb496f2db8a533e9",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/model/test/mockopenidserver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 33,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/wasm/cache_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 790,
                  "endLine": 790,
                  "startColumn": 42,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af572c50a4561da01d5446cc872a658ace2e4f693d8c6709755efca757305c89",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/wasm/cache_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 790,
                            "endLine": 790,
                            "startColumn": 42,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/echo/server/endpoint/http.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 67,
                  "endColumn": 91
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eaa4bb6826b639eb269e8a0a9b11e857b7904202f574fe5eaa546f6c84797f6d",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/echo/server/endpoint/http.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 164,
                            "endLine": 164,
                            "startColumn": 67,
                            "endColumn": 91
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/framework/components/istio/ca.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "034d59f07f335ef15efcf9b1c8074b3a6aeef72fd5e1995fd0bd9c35ef4d8c9d",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.4f3803c7.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.4f3803c7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/components/istio/ca.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ClearTextLogging/test",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "Unsanitized input from sensitive credentials flows into fmt.Println, where it is logged. This may result in a clear-text logging of sensitive information.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is logged. This may result in a clear-text logging of sensitive information.",
            "arguments": [
              "[sensitive credentials](0)",
              "[flows](1),(2)",
              "[fmt.Println](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4bfb97e81ed2766fc391569739ec0cefe4a57598b28096fe055296386db28352",
            "1": "df94a0f4.47769afc.45df3e14.e22980a8.81f356b2.57f89f2f.4ba28e32.1bff12d3.df94a0f4.73eb5804.45df3e14.e22980a8.81f356b2.57f89f2f.4ba28e32.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 54,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 54,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 169,
                            "endLine": 169,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ClearTextLogging/test",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "Unsanitized input from sensitive credentials flows into fmt.Println, where it is logged. This may result in a clear-text logging of sensitive information.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is logged. This may result in a clear-text logging of sensitive information.",
            "arguments": [
              "[sensitive credentials](0)",
              "[flows](1),(2)",
              "[fmt.Println](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "95b9169c67a38e3f88b85e44842516d548be7685f0c0972ae045f982a3bab9d3",
            "1": "df94a0f4.47769afc.45df3e14.e22980a8.81f356b2.57f89f2f.4ba28e32.1bff12d3.df94a0f4.73eb5804.45df3e14.e22980a8.81f356b2.57f89f2f.4ba28e32.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 54,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 54,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/tools/featuresgen/cmd/root.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 177,
                            "endLine": 177,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4)",
              "[os.WriteFile](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/tools/generate_cert/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a09cd96e75fca0ab736675ae401d418302084eaf6e73089d309bdc993d32201",
            "1": "8379f5e8.74dda00a.45df3e14.f375235c.84c49f13.afef11ce.be8ec6d7.d416b7c4.8379f5e8.73eb5804.45df3e14.e22980a8.45599196.67ab4541.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4)",
              "[os.WriteFile](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/tools/generate_cert/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "startColumn": 8,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7abb349a8c85414b1e093d00b1d275baff7ae16dddb890cb7f0d3ac93423c12",
            "1": "8379f5e8.a2cf789c.45df3e14.7fcb8d0a.1de8adca.c8edac34.be8ec6d7.a2493f07.8379f5e8.a2cf789c.45df3e14.e22980a8.1de8adca.67ab4541.f8a45ffe.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_cert/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 8,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.WriteFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/tools/generate_csr/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c41dab89d192313e77850580a21117056f2aa44d49784c507e0ddb5f2e84661a",
            "1": "8379f5e8.8642ae5d.45df3e14.4d842587.54c345f7.d9c4bbd5.be8ec6d7.0fee71e1.2d06e3d6.73eb5804.45df3e14.e22980a8.54c345f7.57f89f2f.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 80,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.WriteFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/tools/generate_csr/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 8,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4831b29757cff435a02f29a050b54ed2c2aed02110b8d07500978e1bd03005d0",
            "1": "8379f5e8.a2cf789c.45df3e14.7fcb8d0a.1de8adca.c8edac34.be8ec6d7.a2493f07.8379f5e8.a2cf789c.45df3e14.e22980a8.54c345f7.57f89f2f.f8a45ffe.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 21,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 89,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/tools/generate_csr/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 8,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.WriteFile](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/config/analysis/msg/generate.main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 11,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "816c4adc35ce6b40c800b042a05aa8090088490f7da5e2747b0ae85897b6bc54",
            "1": "3e0ea818.348ddf12.45df3e14.9692a5c1.84c49f13.67ab4541.0873598c.e01cd24f.9cf53582.348ddf12.45df3e14.9692a5c1.a00feffa.67ab4541.28f9eba2.fbc19cb8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.WriteFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cni/pkg/ambient/net_linux.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 715,
                  "endLine": 715,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b72337fd05c8d287dec77cbcfdbc75338b39f702e28c62f00acda803ab3f81cc",
            "1": "7572e22a.256d99f8.45df3e14.b1e0a0f9.84c49f13.67ab4541.860c51ff.1bff12d3.0b583967.73eb5804.45df3e14.e22980a8.e8c00e77.83331c5c.e49513b2.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net_linux.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 715,
                            "endLine": 715,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net_linux.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 715,
                            "endLine": 715,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net_linux.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 715,
                            "endLine": 715,
                            "startColumn": 20,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net_linux.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 715,
                            "endLine": 715,
                            "startColumn": 20,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 280,
                            "endLine": 280,
                            "startColumn": 14,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/ambient/net.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 510,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/config/analysis/msg/generate.main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37f652b774dfddf721dc9a37d6d46b595aff41e659ad61075e45cd7e74e38ba4",
            "1": "8379f5e8.b1d760a0.45df3e14.89f13fa7.556f02b4.2f4e1548.5c650436.678b0e20.8379f5e8.348ddf12.45df3e14.9692a5c1.6c885866.67ab4541.5c650436.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 11,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 17,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/analysis/msg/generate.main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[os.WriteFile](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kube/inject/inject_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 382,
                  "endLine": 382,
                  "startColumn": 5,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61fe7307126909f830c515764acea2afd837faae68269914bb9fcb78d198d203",
            "1": "2d06e3d6.004bf388.45df3e14.b5dffdc1.efefb4d9.57f89f2f.860c51ff.1bff12d3.2efc96be.277c621c.4ec36f5c.b5dffdc1.e8c00e77.57f89f2f.1bf4e01c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 38,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 34,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 25,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 11,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 3,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 380,
                            "endLine": 380,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 380,
                            "endLine": 380,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 7,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 28,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 382,
                            "endLine": 382,
                            "startColumn": 52,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 382,
                            "endLine": 382,
                            "startColumn": 52,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/inject_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 382,
                            "endLine": 382,
                            "startColumn": 31,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/webhook_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 624,
                            "endLine": 624,
                            "startColumn": 43,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/webhook_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 663,
                            "endLine": 663,
                            "startColumn": 64,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/webhook_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 64,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/webhook_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 64,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/webhook_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 28,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/inject/webhook_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 360,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/xds/eds_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4b4fa8337feda87df9190be26af556b5bb0ab99c03aa8889d71616afdf25f77b",
            "1": "3900f8ff.e0beca80.45df3e14.cb70a8e4.51a8f989.67ab4541.860c51ff.5c311668.c36e37d0.73eb5804.45df3e14.b1b7c4aa.e8c00e77.67ab4541.c2cfdcd9.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/xds/eds_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 54,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/xds/eds_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 54,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/xds/eds_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 29,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/xds/eds_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 305,
                            "endLine": 305,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/fuzz/regression_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 15,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8b7d0fb179600dc933c0b23c29e0923c49f0e6d95c1968a7542faf0a37870cc2",
            "1": "3900f8ff.e0beca80.45df3e14.0c66bee6.51a8f989.67ab4541.860c51ff.5c311668.424eddda.73eb5804.45df3e14.e22980a8.e8c00e77.67ab4541.efc6bf81.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/fuzz/regression_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 46,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/fuzz/regression_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 46,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/fuzz/regression_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 27,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/fuzz/regression_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 360,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2)",
              "[os.ReadFile](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/framework/components/echo/kube/deployment.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 558,
                  "endLine": 558,
                  "startColumn": 31,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "333fe6e7ede4b5e623633ec25f6a467c02dfbe444b238ea0a9db4b2177a5bb32",
            "1": "3900f8ff.e0beca80.45df3e14.0c66bee6.a969157c.67ab4541.860c51ff.5c311668.424eddda.73eb5804.45df3e14.62f5962e.e8c00e77.9383b6fc.c2cfdcd9.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/components/echo/kube/deployment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 558,
                            "endLine": 558,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/components/echo/kube/deployment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 558,
                            "endLine": 558,
                            "startColumn": 64,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/components/echo/kube/deployment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 558,
                            "endLine": 558,
                            "startColumn": 43,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/components/echo/kube/deployment.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 558,
                            "endLine": 558,
                            "startColumn": 31,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 360,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.Remove, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.Remove](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istioctl/pkg/workload/workload_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 231,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c127909c4184b518cb76401a110bb09474c789891dc6e85d28da74fa68681b43",
            "1": "653fec69.13183c81.45df3e14.8a715d47.51a8f989.57f89f2f.043b371d.5c311668.8da4b8b6.73eb5804.45df3e14.e22980a8.e8c00e77.57f89f2f.f2e9a055.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 231,
                            "endLine": 231,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[os.ReadDir](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istioctl/pkg/workload/workload_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 292,
                  "endLine": 292,
                  "startColumn": 4,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "adfb16aac9e10d6018c35b01489c9ebd8ac42b6364d42ef1c1c0b023429da27c",
            "1": "2d06e3d6.882fa890.847d6e66.6483b32f.556f02b4.57f89f2f.a67250c2.678b0e20.8da4b8b6.c55d47e1.847d6e66.e22980a8.e8c00e77.57f89f2f.f2e9a055.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 49,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 292,
                            "endLine": 292,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[os.ReadDir](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istioctl/pkg/workload/workload_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 417,
                  "endLine": 417,
                  "startColumn": 22,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb1efb5120fa4c3aa88294ddc756f27a74308c51f6f90f11f48c3c4cd4627bcd",
            "1": "8379f5e8.b1d760a0.45df3e14.8a715d47.556f02b4.2b38af89.df7e59ba.678b0e20.8da4b8b6.9bae509b.847d6e66.e22980a8.e8c00e77.57f89f2f.f2e9a055.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 45,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 14,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 247,
                            "endLine": 247,
                            "startColumn": 49,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 265,
                            "endLine": 265,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 292,
                            "endLine": 292,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "istioctl/pkg/workload/workload_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 22,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 410,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cni/pkg/install/kubeconfig.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8ab8b4e3b656cb289e21d483a73bfd376daaf3bc97bc18d615b87fea4d9c8c17",
            "1": "5c121d52.98f0ff0f.3d13e656.79502f34.d4a84630.63a86890.8ee950b3.1bff12d3.5c121d52.98f0ff0f.3d13e656.79502f34.d4a84630.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/install/kubeconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/install/kubeconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cni/pkg/install/kubeconfig.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 4,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ff3e6aba57e96074f8dbc0077e7626f046bdbfbd239a3f0af5ba4f5dfa522793",
            "1": "5c121d52.98f0ff0f.3d13e656.79502f34.d4a84630.63a86890.8ee950b3.1bff12d3.5c121d52.98f0ff0f.3d13e656.79502f34.d4a84630.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/install/kubeconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/install/kubeconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 4,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cni/pkg/install/kubeconfig.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 15,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6acb6bb190d53f064a4d8d2e841010c3cf58aae32dceee35ea019dc651292153",
            "1": "5c121d52.98f0ff0f.3d13e656.4054f0ff.d4a84630.67752288.8ee950b3.ff3d0695.5c121d52.98f0ff0f.3d13e656.79502f34.d4a84630.63a86890.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/install/kubeconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cni/pkg/install/kubeconfig.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/ErrorMessage/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Information exposure through error stack trace in fmt.Printf.",
            "markdown": "Information exposure through {0} in {1}.",
            "arguments": [
              "[error stack trace](0)",
              "[fmt.Printf](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/xds/eds_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1056,
                  "endLine": 1056,
                  "startColumn": 3,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "982876474fb9a19ae64568f7bdcef5118e78a8ccaf22d49666e348198e5024a6",
            "1": "2d06e3d6.9bf9da8e.8d277033.6483b32f.78b40541.57f89f2f.981a2d61.1bff12d3.2d06e3d6.9bf9da8e.8d277033.e22980a8.78b40541.57f89f2f.981a2d61.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/xds/eds_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1055,
                            "endLine": 1055,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/xds/eds_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1056,
                            "endLine": 1056,
                            "startColumn": 3,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[Write](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/request/command_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 5,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "53a4722f5073a6d90f1f74dc8002f627def14dd399ad0f2d14c0ebe047d0ba7f",
            "1": "ad99a241.c45f1b38.45df3e14.1e4c40df.51a8f989.57f89f2f.3bee9612.0cdf1410.38552e76.277c621c.45df3e14.e22980a8.5ef953d3.57f89f2f.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 4,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 94,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 87,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 5,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3)",
              "[Write](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/request/command_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 4,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "de067a86c6ee8e62de83f072ca4848ec1695874ebb62e4ec1a0a658acccb3f7c",
            "1": "c498e925.c45f1b38.45df3e14.c19d78c5.bfd03fcd.57f89f2f.3bee9612.0cdf1410.c498e925.277c621c.fd4eeae2.e22980a8.5ef953d3.57f89f2f.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 78,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 78,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/request/command_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 4,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash/test",
          "ruleIndex": 20,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/test/framework/components/istio/configmap.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "decf0889097b8629ff5c3d696f816e767821dbf3891141a89d271bea9ac217f9",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/test/framework/components/istio/configmap.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 7,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[fmt.Fprintf](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/istio-agent/xds_proxy.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 737,
                  "endLine": 737,
                  "startColumn": 4,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5cbd76e65d2e13aa7cda71e318b2ad35e05fa446622c9174cd01817490061279",
            "1": "f0a84589.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.033439eb.277c621c.471f3eae.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 29,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 29,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 734,
                            "endLine": 734,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 735,
                            "endLine": 735,
                            "startColumn": 6,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 27,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/xds_proxy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 4,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 755,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[Write](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/ctrlz/home.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 11,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d234da2ee309824099c813f04f7b12f329b4b9332365a526b894280128e7ed01",
            "1": "794156af.73eb5804.45df3e14.64ecec3c.84c49f13.995dab92.94400a07.e01cd24f.033439eb.73eb5804.45df3e14.6b457aa1.6b6807dc.67ab4541.28f9eba2.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 53,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 53,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 42,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 23,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/ctrlz/home.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 755,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[Write](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/cmd/pilot-agent/status/server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 687,
                  "endLine": 687,
                  "startColumn": 10,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "888abb462d1c42f097258301d99099617a281359b40a44afeeabe9521bd702d3",
            "1": "e5239c46.c45f1b38.45df3e14.edbd913d.51a8f989.257c5aa5.3bee9612.0cdf1410.e5239c46.f47edcf6.45df3e14.9692a5c1.6b6807dc.57f89f2f.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 681,
                            "endLine": 681,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 681,
                            "endLine": 681,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 681,
                            "endLine": 681,
                            "startColumn": 10,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 681,
                            "endLine": 681,
                            "startColumn": 3,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 683,
                            "endLine": 683,
                            "startColumn": 37,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 685,
                            "endLine": 685,
                            "startColumn": 47,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 687,
                            "endLine": 687,
                            "startColumn": 81,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 687,
                            "endLine": 687,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 687,
                            "endLine": 687,
                            "startColumn": 18,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 687,
                            "endLine": 687,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/cmd/pilot-agent/status/server.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267,
                  "startColumn": 34,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37b883889940b7d9c0ff40bbb5798782cc8f73ca7a8b133b3b680f4fddf2e3d7",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/cmd/pilot-agent/status/server.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 267,
                            "endLine": 267,
                            "startColumn": 34,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 556,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/istio-agent/health/health_probers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 35,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3f7b476db1751f6e869a14a902a15034f86dc8f4a908f990930d71e06e6346cc",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/istio-agent/health/health_probers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 35,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 506,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/wasm/httpfetcher.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 42,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af1e1d89708af32c60d416c7096be7e8f328b30b2e6f3e69c2abe5dc43b92bce",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/wasm/httpfetcher.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 42,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 506,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/kube/spdy.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 4,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "15b9c4ac96e049966f4e37d89f417e8697b9b40757afe1db6ee7f60e1a477eab",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/kube/spdy.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 4,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 506,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in ListenerModeAutoPassthrough.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ListenerModeAutoPassthrough](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/config/constants/constants.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179,
                  "startColumn": 2,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b823124569a3d99f9225f3aca55447c83bd0fd75c32a3b4c83d0b674f77c9df6",
            "1": "8379f5e8.0d9b46dd.3602530c.79502f34.4248e1ba.63a86890.fb9e89bc.1bff12d3.88da9398.0d9b46dd.a6e60c74.0a55ff7e.4248e1ba.63a86890.27af1da1.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/constants/constants.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 179,
                            "endLine": 179,
                            "startColumn": 32,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/config/constants/constants.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 179,
                            "endLine": 179,
                            "startColumn": 2,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 506,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in PassthroughCluster.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[PassthroughCluster](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/networking/util/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 2,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34fa9106e920ba3141c67beab65864c11389723fa0d712ec18870410d5c49869",
            "1": "8379f5e8.0d9b46dd.3602530c.79502f34.7c98c9c0.63a86890.882c6a53.1bff12d3.8379f5e8.7e07cba1.4def4867.79502f34.7c98c9c0.a3c9a0e9.882c6a53.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/networking/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/networking/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 2,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 556,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in Passthrough.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[Passthrough](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/networking/util/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 2,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c177309dfa41830c9cb232918e472d7720c4deaa78334d9f8cb2593a03b8a4da",
            "1": "86b6eb70.e807acd2.3602530c.79502f34.91b7c08c.63a86890.fb9e89bc.1bff12d3.86b6eb70.e807acd2.3602530c.79502f34.0a7e0890.63a86890.fb9e89bc.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/networking/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/networking/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 2,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 556,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in PassthroughFilterChain.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[PassthroughFilterChain](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pilot/pkg/networking/util/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 2,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8432363a4fe09f30321695ac357ed55526f834f94a04590cfdda9fd046dffdb6",
            "1": "8379f5e8.0d9b46dd.75e0dc5f.bd9ffce7.8053b877.87c4bd25.fb9e89bc.1bff12d3.3851ef64.2aeb9ec9.4a34756f.bd9ffce7.95b2a1b3.87c4bd25.dd030103.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/networking/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 27,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pilot/pkg/networking/util/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 2,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 556,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/XSS",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an environment variable flows into the return value of hello, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5)",
              "[the return value of hello](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/helloworld/src/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 12,
                  "endColumn": 87
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eef31d6e5b3e226bb479e2a8ce870f8b18a46b2e665417f239e207a169362f02",
            "1": "95723ce4.993139d5.79e62dc9.98569367.146bf8fd.73cfdf26.0a7337bb.6aac30d8.95723ce4.976f7a3f.b588a99c.ad0154f5.cb2ee61d.73cfdf26.22a8b49e.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 5,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 51,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 50,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 12,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/helloworld/src/app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 12,
                            "endColumn": 87
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 11,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 7,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Ruby",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "C++",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 6,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 1832,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "HTML",
            "files": 18,
            "type": "FAILED_PARSING"
          },
          {
            "isSupported": false,
            "lang": "C",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/CommandInjection/test",
              "name": "CommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/hashicorp/go-plugin/commit/a540dfea2468c3e1c68bb140df00330471ae8fee?diff=split#diff-f59973f3b840d85bda2eb041b7266a45f3343d738a845250125bba654918c3dbL-1",
                    "lines": [
                      {
                        "line": "Cmd:             exec.Command(os.Args[0], \"plugin\"),\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cmd:             exec.Command(\"./plugin/plugin\", \"plugin\"),\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/imgproxy/imgproxy/commit/7f567216dd3993d2276092a47aa3ef3b7fe1dd10?diff=split#diff-d12d4526fdfb5d07e4694a3fcfa8953d98905d9284f9fde8e566d909abfece15L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\"crypto/sha256\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"encoding/binary\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"fmt\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "var notModifiedErr = newError(304, \"Not modified\", \"Not modified\")\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "func calcETag(b []byte, po *processingOptions) string {\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfootprint := sha1.Sum(b)\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfootprint := sha256.Sum256(b)\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/89luca89/pakkero/commit/732106c7e9d633f5ec37122adfd4cd0c63b7a245?diff=split#diff-fd7871dcb081132c05fcb52820591141d6a0719419e2dcf81086f87a6f5731c0L-1",
                    "lines": [
                      {
                        "line": "\t\"crypto/sha512\"\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\"io\"\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"io/ioutil\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "EncryptAESReversed Wrapper around AESGCM encryption\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "this will not only encrypt the payload but:\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "- generate a password using the randomized UPX Binary's md5sum\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "- cipher the payload with AESGCM using the generated password\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "- swap endianess on all the encrypted bytes\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "- reverse the complete payload\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "*/\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "func EncryptAESReversed(plaintext []byte, outfile string) (string, error) {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// generate a password using the randomized UPX Binary's md5sum\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "/*\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t    the aes-256 psk is the md5sum of the whole executable\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t        this is also useful to protect against NOP attacks to the anti-debug\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t        features in the binary.\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t        This doubles also as anti-tamper measure.\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t*/\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tb, err := ioutil.ReadFile(outfile)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn \"\", err\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tkey := md5.Sum(b)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// use SHA512 (32byte) of the passphrase as key\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tkey := sha512.Sum512_256(b)\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blockcdn-go/exchange-sdk-go/commit/e2de2f88157a8e5335d75827f16d05ced01d98f5?diff=split#diff-7f9c4d2d8595ac7a5c209b4ec51b2d9af4d0e25f75d38571534c6032ba3cb1faL-1",
                    "lines": [
                      {
                        "line": "func sign(str, key string) string {\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tm := md5.New()\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tm.Write([]byte(key))\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tmkey := hex.EncodeToString(m.Sum(nil))\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\th := hmac.New(sha256.New, []byte(key))\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\th.Write([]byte(str))\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 89,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "InTest",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/citrix/terraform-provider-citrixadc/commit/a4c0975006ef2020c0db505d69bdcec13f10915b?diff=split#diff-a9109e20e39687dfe49012120251229e209c76557bfef1ac646718448d8ca653L-1",
                    "lines": [
                      {
                        "line": "b, err := ioutil.ReadFile(inputFile)\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b, err := ioutil.ReadFile(filepath.Clean(inputFile))\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/u-root/u-root/commit/?diff=split#diff-b2964e352f657fd0dbf5b5dc2f11b034b389e3ad9d60ef315dca58778612d468L-1",
                    "lines": [
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Clean(w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Join(\"/\", w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile, err := os.Open(path)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 28,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/alfred-zhong/wserver/commit/bc7d33643368e16d9801ab88f7ba2dfdc49467af?diff=split#diff-005f9a0396b938d96245e8fc04dcd633d0716b5610fd4d90c09af361625fb74dL-1",
                    "lines": [
                      {
                        "line": "userID := \"476B40DD-DFE9-4CDE-AD4F-F0A53FE18FA5\"\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "userID := uuid.New().String()\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/k0kubun/sqldef/commit/5ac0feda25dfa3b4a3e2201c017425beec13a02d?diff=split#diff-ed17e21a49a7d3b117a41187ac6d384ef656de942120f74001fa9b057fde5688L-1",
                    "lines": [
                      {
                        "line": "user := \"postgres\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host := \"127.0.0.1:5432\"\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "user := config.User\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := config.Password\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "host := fmt.Sprintf(\"%s:%d\", config.Host, config.Port)\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fjukstad/kvik/commit/254d8dd1c34e017b1aac1493286a3f3b773ff40c?diff=split#diff-6a37a2c5ea8c5a951b2830b342cc07312e7cfa6eb69afdecc4b5bfce636f28e0L-1",
                    "lines": [
                      {
                        "line": "//addr := \"192.168.99.100:8004\"\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"public.opencpu.org\"\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username := \"user\"\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"password\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"localhost:8181\"\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "//addr := \"public.opencpu.org\"\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "username := \"\"\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "Ssrf",
                  "Security",
                  "InTest",
                  "SourceServer",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bblfsh/web/commit/7a79fae76b8f662736eb7e45bc8f36fe635feb8a?diff=split#diff-78f42ba40d0f10b08c73b7e6bb8376f398e249c963cf549e89591d6b6826b9a4L-1",
                    "lines": [
                      {
                        "line": "func (s *Server) LoadGist(ctx *gin.Context) {\n",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tgistUrl := \"https://gist.githubusercontent.com/\" + ctx.Query(\"url\")\n",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// MakeGistURL makes url to github's gust\n",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "// export to allow mocking in test\n",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "var MakeGistURL = func(u string) string {\n",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn \"https://gist.githubusercontent.com/\" + u\n",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 105,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tresp, err := http.Get(gistUrl)\n",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s *Server) LoadGist(ctx *gin.Context) {\n",
                        "lineNumber": 107,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tresp, err := s.httpClient.Get(MakeGistURL(ctx.Query(\"url\")))\n",
                        "lineNumber": 108,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/distr1/distri/commit/a3653ce99228073cea4e5a698fd8a50bad182805?diff=split#diff-9856c71108622e982fabc971e75f78d8865b0b2e932392366a7e9adc1ab9cc67L-1",
                    "lines": [
                      {
                        "line": "resp, err := http.Get(repo.Path + \"/\" + fn) // TODO: sanitize slashes\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "req, err := http.NewRequest(\"GET\", repo.Path+\"/\"+fn, nil) // TODO: sanitize slashes\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil, err\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "if os.Getenv(\"DISTRI_REEXEC\") == \"1\" {\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treq.Header.Set(\"X-Distri-Reexec\", \"yes\")\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "resp, err := http.DefaultClient.Do(req)\n",
                        "lineNumber": 56,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/staticfile-buildpack/commit/0edaae2024f7c967ebdc8cc1c99e6e8a228e2c73?diff=split#diff-4ff1e6767c90f54cd8e77f7bd41bcabeb624bf7940bd231972918d37063e659aL-1",
                    "lines": [
                      {
                        "line": "}\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "ts := httptest.NewUnstartedServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\turl := fmt.Sprintf(\"https://%s%s\", r.Host, r.URL)\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tresp, err := http.Get(url)\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tw.WriteHeader(http.StatusInternalServerError)\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfmt.Fprintln(w, \"ERROR\", err)\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tw.WriteHeader(resp.StatusCode)\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tio.Copy(w, resp.Body)\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tresp.Body.Close()\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ts := httptest.NewUnstartedServer(goproxy.NewProxyHttpServer())\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "ts.Listener.Close()\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 30,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "go/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/biningo/note-gin/commit/42791cf29b4b86e2d1f4c384a940591a47e13219?diff=split#diff-ca713ed723a0edf86b651d90157af74fd9d9e739b791097a4b13e697e5699253L-1",
                    "lines": [
                      {
                        "line": "func GetToken() string {\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\taccessKey := \"WdlLw-oFN1mbj-0vngrbQ8Si39u0dgackq0v9L4T\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tsecretKey := \"HoKZLcwE1BtYWe9ze__jmwWsfqPeAcbHURN48t9A\"\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbucket := \"note-gin\"\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tputPolicy := storage.PutPolicy{\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tScope: bucket,\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tmac := qbox.NewMac(accessKey, secretKey)\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tupToken := putPolicy.UploadToken(mac)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn upToken\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var QiniuAccessKey string\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var QiniuSecretKey string\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "func SetUp() {\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tQiniuAccessKey = config.Conf.AppConfig.QiniuAccessKey\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tQiniuSecretKey = config.Conf.AppConfig.QiniuSecretKey\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/weibocom/opendcp/commit/ec5209d39b8ce28a67bf10f0fe6379f6c65ec454?diff=split#diff-d842348011b17bb4526453c3a207e6032219a4a6cafdf5f0e2c9b3d0da2fae8cL-1",
                    "lines": [
                      {
                        "line": "IdentityEndpoint: \"http://10.39.59.27:5000/v3\",\n",
                        "lineNumber": 124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Username: \"admin\",\n",
                        "lineNumber": 125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Password: \"ZYGL32NDG7JS8IGC\",\n",
                        "lineNumber": 126,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IdentityEndpoint: url,\n",
                        "lineNumber": 127,
                        "lineChange": "added"
                      },
                      {
                        "line": "Username: conf.Config.OpUserName,\n",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "Password: conf.Config.OpPassWord,\n",
                        "lineNumber": 129,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"📕 twtxt is a Self-Hosted, Twitter™-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 44,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/InsecurelyGeneratedPassword",
              "name": "InsecurelyGeneratedPassword",
              "shortDescription": {
                "text": "Use of Insufficiently Random Values"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nComputer security relies on random numbers for many things: generating secure, confidential session keys; hashing password data; encryption for transmitting sensitive data, and more. It's easy to understand why. If session keys, for example, were generated sequentially, attackers would be able to guess these easily and then hijack legitimate user sessions. Similarly, if encryption techniques used easy-to-guess numbers, attackers could use brute-force attacks to gain unauthorized access.\n\nIn reality, since computers cannot generate truly random numbers, they use \"pseudorandom\" numbers instead, generated using an algorithm that is \"seeded\" in a variety of ways to produce highly variable values in a random-seeming order, making them very hard-in theory-for attackers to guess. However, if developers inadvertently make use of a weak random algorithm, attackers may be able to discover the algorithm, seed, or pattern, ultimately unlocking access to commands or sensitive data, which can then be held for ransom or sold.\n\n## Best practices for prevention\n* Avoid using weak pseudorandom number generators (PRNGs), such as statistical PRNGs. Instead, choose a cryptographically secure PRNG.\n* Avoid using predictable seed values, such as user ID or server start time. Instead, use a seed that is itself pseudorandom, such as one taken from an external hardware source.\n* Use standard, accepted security algorithms and libraries rather than taking a DIY approach and creating custom code that may contain inherent weaknesses or overlook critical flaws.\n* Use static analysis tools to identify potential instances of this weakness in code and then ensure good test coverage with appropriate white-box testing.\n* Educate developers about the importance of entropy in security systems development, and consider adopting tools that are FIPS 140-2 compliant.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "InsecurelyGeneratedPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/crowdsecurity/crowdsec/commit/e74f2210446578248b8d7ac292094e69ca685a8a?diff=split#diff-9368df641600daf22bcd67d907c33dc73524b8c1115a456b1d1758b7539a283fL-1",
                    "lines": [
                      {
                        "line": "saferand \"crypto/rand\"\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"encoding/json\"\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"fmt\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"io/ioutil\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"math/rand\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"os\"\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"strings\"\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"time\"\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/AlecAivazis/survey/v2\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/csconfig\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crowdsecurity/crowdsec/pkg/database\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/denisbrodbeck/machineid\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/enescakir/emoji\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/go-openapi/strfmt\"\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/olekukonko/tablewriter\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/pkg/errors\"\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog \"github.com/sirupsen/logrus\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/spf13/cobra\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"gopkg.in/yaml.v2\"\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machineID string\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "var machinePassword string\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "var interactive bool\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var apiURL string\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "var outputFile string\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "var forceAdd bool\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "var autoAdd bool\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "var (\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpasswordLength = 64\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tupper          = \"ABCDEFGHIJKLMNOPQRSTUVWXY\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlower          = \"abcdefghijklmnopqrstuvwxyz\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tdigits         = \"0123456789\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "const (\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tuuid = \"/proc/sys/kernel/random/uuid\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "func generatePassword(length int) string {\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\trand.Seed(time.Now().UnixNano())\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "charset := upper + lower + digits\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf := make([]byte, length)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbuf[0] = digits[rand.Intn(len(digits))]\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[1] = upper[rand.Intn(len(upper))]\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbuf[2] = lower[rand.Intn(len(lower))]\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 3; i < length; i++ {\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rand.Intn(len(charset))]\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 0; i < length; i++ {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\trInt, err := saferand.Int(saferand.Reader, big.NewInt(int64(charsetLength)))\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tlog.Fatalf(\"failed getting data from prng for password generation : %s\", err)\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf[i] = charset[rInt.Int64()]\n",
                        "lineNumber": 55,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/CrunchyData/postgres-operator/commit/0f65efcbf470d95de4ea6db5d3b81676a3103eba?diff=split#diff-6f92255ca34963106888250ece98db5f46c1e373e4aa0d20a129526fa5d64377L-1",
                    "lines": [
                      {
                        "line": "\"crypto/rand\"\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\"encoding/hex\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"fmt\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"math/rand\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"strconv\"\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"strings\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"time\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcrv1 \"github.com/crunchydata/postgres-operator/apis/crunchydata.com/v1\"\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crunchydata/postgres-operator/config\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"github.com/crunchydata/postgres-operator/kubeapi\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tlog \"github.com/sirupsen/logrus\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tv1 \"k8s.io/api/core/v1\"\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\"k8s.io/client-go/kubernetes\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "const lowercharset = \"abcdefghijklmnopqrstuvwxyz\"\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "const charsetNumbers = \"0123456789\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "var seededRand = rand.New(\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\trand.NewSource(time.Now().UnixNano()))\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// passwordCharSelector is a \"big int\" that we need to select the random ASCII\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "// character for the password. Since the random integer generator looks for\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "// values from [0,X), we need to force this to be [33,126]\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "var passwordCharSelector = big.NewInt(passwordCharUpper - passwordCharLower)\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "// CreateSecret create the secret, user, and primary secrets\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "func CreateSecret(clientset *kubernetes.Clientset, db, secretName, username, password, namespace string) error {\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar enUsername = username\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret := v1.Secret{}\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.Name = secretName\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.ObjectMeta.Labels = make(map[string]string)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.ObjectMeta.Labels[\"pg-cluster\"] = db\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.ObjectMeta.Labels[config.LABEL_VENDOR] = config.LABEL_CRUNCHY\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.Data = make(map[string][]byte)\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.Data[\"username\"] = []byte(enUsername)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tsecret.Data[\"password\"] = []byte(password)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\terr := kubeapi.CreateSecret(clientset, &secret, namespace)\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn err\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "// stringWithCharset returns a generated string value\n",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func stringWithCharset(length int, charset string) string {\n",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tb := make([]byte, length)\n",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := range b {\n",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tb[i] = charset[seededRand.Intn(len(charset))]\n",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// GeneratePassword generates a password of a given length out of the acceptable\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "// ASCII characters suitable for a password\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "func GeneratePassword(length int) (string, error) {\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// for \"length\" times, we are going to get a random ASCII character, and\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// append it to the  \"password\" string\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tpassword := \"\"\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor i := 0; i < length; i++ {\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tchar, err := rand.Int(rand.Reader, passwordCharSelector)\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t// if there is an error generating the random integer, return\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif err != nil {\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn \"\", err\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gopasspw/gopass/commit/b5503d5f916f1b7d26a0fa1ec95e33ba01b9ecd0?diff=split#diff-96d4eee05bc3b7c1a8a4bb52f6e526646721ebea13025c11fca70297908f3b31L-1",
                    "lines": [
                      {
                        "line": "func GeneratePasswordCharsetCheck(length int, chars string) string {\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvalidator := crunchy.NewValidator()\n",
                        "lineNumber": 134,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tvar password string\n",
                        "lineNumber": 135,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 136,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfor i := 0; i < 3; i++ {\n",
                        "lineNumber": 137,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tpw := &bytes.Buffer{}\n",
                        "lineNumber": 138,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfor pw.Len() < length {\n",
                        "lineNumber": 139,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t_ = pw.WriteByte(chars[randomInteger(len(chars))])\n",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 141,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tpassword = pw.String()\n",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tif validator.Check(password) == nil {\n",
                        "lineNumber": 144,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tbreak\n",
                        "lineNumber": 145,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 146,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 148,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn password\n",
                        "lineNumber": 149,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 150,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func randomInteger(max int) int {\n",
                        "lineNumber": 152,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\ti, err := crand.Int(crand.Reader, big.NewInt(int64(max)))\n",
                        "lineNumber": 153,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tif err == nil {\n",
                        "lineNumber": 154,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn int(i.Int64())\n",
                        "lineNumber": 155,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 156,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfmt.Println(\"WARNING: No crypto/rand available. Falling back to PRNG\")\n",
                        "lineNumber": 157,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn rand.Intn(max)\n",
                        "lineNumber": 158,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 159,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func randomWord() string {\n",
                        "lineNumber": 161,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn wordlist[randomInteger(len(wordlist))]\n",
                        "lineNumber": 162,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tc := NewCrypticWithCrunchy(length)\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tc.Chars = chars\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn c.Password()\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 10,
                "cwe": [
                  "CWE-330"
                ]
              }
            },
            {
              "id": "go/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "CommandInjection",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/hashicorp/go-plugin/commit/a540dfea2468c3e1c68bb140df00330471ae8fee?diff=split#diff-f59973f3b840d85bda2eb041b7266a45f3343d738a845250125bba654918c3dbL-1",
                    "lines": [
                      {
                        "line": "Cmd:             exec.Command(os.Args[0], \"plugin\"),\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cmd:             exec.Command(\"./plugin/plugin\", \"plugin\"),\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Asutorufa/yuhaiin/commit/98b32999c0da193d43c9e229dc75cd4d7d386b4a?diff=split#diff-89cebc2af514f83dbabec8d3b2c739b315779f10dab726e8343a551c6b5601ccL-1",
                    "lines": [
                      {
                        "line": "\tdir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tlog.Println(dir2)\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(dir2, []string{dir2, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t// dir2, _ := filepath.Abs(os.Args[0])\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\texecutablePath, err := os.Executable()\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tlog.Println(err)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// log.Println(executablePath)\n",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfirst, err := os.StartProcess(executablePath, []string{executablePath, \"-d\"}, &os.ProcAttr{\n",
                        "lineNumber": 80,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cli/cli/commit/ed8aaa83e3d403f459cd5b4f2b852d024da8c6ba?diff=split#diff-3928dc80bf7f14802ffa3a9f68672de05b4e00613919beb2107ca787ed3b9099L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "func StubExecCommand(testHelper string, desiredOutput string) func(...string) *exec.Cmd {\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn func(args ...string) *exec.Cmd {\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs := []string{\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tfmt.Sprintf(\"-test.run=%s\", testHelper),\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"--\", desiredOutput}\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcs = append(cs, args...)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tenv := []string{\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\t\"GO_WANT_HELPER_PROCESS=1\",\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd := exec.Command(os.Args[0], cs...)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tcmd.Env = append(env, os.Environ()...)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn cmd\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func (s OutputStub) Run() error {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\treturn nil\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 16,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/kubervisor/commit/aaf3d1a6a90c6ba9d56fd44648734938d0970470?diff=split#diff-48a8d555a42b35d5bf1e8ae57f3f0d6c634b9b3d9060fd1935afa55f5dbd58c9L-1",
                    "lines": [
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AbGuthrie/goquery/commit/0d5d3b2a65a571a0926591fe7674c133d0a06d14?diff=split#diff-8ffdbfea91b4887eb067076025ce572fc41c5f4de26ed4579f37938ee55116ecL-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config{\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: config.GetConfig().DebugEnabled,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "},\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fsouza/go-dockerclient/commit/27840d3e50fc3505446b6195c3b1370003829cc0?diff=split#diff-4b667feae66c9d46b21b9ecc19e8958cf4472d162ce0a47ac3e8386af8bbd8cfL-1",
                    "lines": [
                      {
                        "line": "InsecureSkipVerify: true,\n",
                        "lineNumber": 187,
                        "lineChange": "removed"
                      },
                      {
                        "line": "InsecureSkipVerify: false,\n",
                        "lineNumber": 193,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "go/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/efrenbg1/MQTLS/commit/820689fad2972d8f2a90260e468ca55e12b3280a?diff=split#diff-c17c352c91b81ae547cfd0ee09b6c6119e3a5d0e8f1091198254b6edd2a5d391L-1",
                    "lines": [
                      {
                        "line": "\t}()\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tcertPem := []byte(`-----BEGIN CERTIFICATE-----\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIIBhTCCASugAwIBAgIQIRi6zePL6mKjOipn+dNuaTAKBggqhkjOPQQDAjASMRAw\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "DgYDVQQKEwdBY21lIENvMB4XDTE3MTAyMDE5NDMwNloXDTE4MTAyMDE5NDMwNlow\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EjEQMA4GA1UEChMHQWNtZSBDbzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABD0d\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "7VNhbWvZLWPuj/RtHFjvtJBEwOkhbN/BnnE8rnZR8+sbwnc/KhCk3FhnpHZnQz7B\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "5aETbbIgmuvewdjvSBSjYzBhMA4GA1UdDwEB/wQEAwICpDATBgNVHSUEDDAKBggr\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdEQQiMCCCDmxvY2FsaG9zdDo1\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "NDUzgg4xMjcuMC4wLjE6NTQ1MzAKBggqhkjOPQQDAgNIADBFAiEA2zpJEPQyz6/l\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Wf86aX6PepsntZv2GYlA5UpabfT2EZICICpJ5h/iI+i341gBmLiAFQOyTDT+/wQc\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "6MF9+Yw1Yy0t\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END CERTIFICATE-----`)\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tkeyPem := []byte(`-----BEGIN EC PRIVATE KEY-----\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MHcCAQEEIIrYSSNQFaA2Hwf1duRSxKtLYX5CB04fSeQ6tF1aY/PuoAoGCCqGSM49\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AwEHoUQDQgAEPR3tU2Fta9ktY+6P9G0cWO+0kETA6SFs38GecTyudlHz6xvCdz8q\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "EKTcWGekdmdDPsHloRNtsiCa697B2O9IFA==\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END EC PRIVATE KEY-----`)\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tcertPem, err := ioutil.ReadFile(\"cert.pem\")\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tkeyPem, err := ioutil.ReadFile(\"key.pem\")\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tpanic(err)\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tcert, err := tls.X509KeyPair(certPem, keyPem)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/leopardslab/gocloud/commit/bf07db3fe8d92de23e9717ec8faf06635d0149b0?diff=split#diff-9145f8fcf749b0c91c1e8993b89537e64a2c121d06c0c4b2d38c18b30ec601c0L-1",
                    "lines": [
                      {
                        "line": "\tif err != nil {\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tjwt := JWT{}\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 75,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tPrivateKey := \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDWJKDV4ZIqH8gx\\namJBiSr4rZsZg3oFmZEDuRJeRWYX//uUWl3anBPV0j/tuFojUZSzeLO2WWxjZxqT\\nYi+Cqu2YR6dpvwq51y1+RD7GgR3NgoA0ABlofC2ez5yLXrklopGV7BS5mW2kzzMD\\nncIb+XPJT81l5/Nbkmw5bnTHLjJTUAWyGsd3UnXGPyqPi823HaHWdwrCVrEdQfKC\\n6sfbd0RMX625LMgK4cYl+z8BpcONLC2G+GEJf/yONonArW2EsExlRSWk4obKttb0\\ngy/uro1rMhVVUSIn09XrjqdTYICQWgou8zWSfVeIFhU3KSNXrG5SeDucus+mZiyw\\nXPcV7UVZAgMBAAECggEAX9EL1ieUSxzlapb7V++UNqkXWRcnJhJMfKn2ug+7WsnD\\nO+IjVIm5plbpG+j9DAiYzKUZZGImyWN81K1+LK1mmliVZA+DMRxC0tiebhufxjC6\\nRIo21DWcBA9JMGM13M0c70QvEczA7pl3bgrMq8+2K0F12j8q+LJPknMF9YmKIxQ9\\nR3sFbKBzx5vHNn22pd+kZMWOxYXfErF3FiDwECRDziDZhi5WH4UnTqxIZ99nRC4N\\nF80PwCZgCcF2/6k1d6gBNt6ZIwymn2ouEFSoD66UHRohw0Yt2e09AHl9tQoesx+/\\nvuoVIum17S5fbPdAKg0Hpjz0T/3VajgrH5lgDeEqcQKBgQD5Q6AAPFVC4qUT95bl\\nFnxjvL3ehg2IHY1aOFaOE2LkfQcTpG/OqbdxlWi1mhUzz/k1xtFeYCs/WFR+Dpbe\\nkPp6WOp624q8JwJM+gJIMKNe1it/ViYaDl6lYR9zD0YH8euHrZyvcIgi4jkCeuzq\\nBIMmUIp0Sf/qvibGTzwWuQUzPwKBgQDb7gpcuhULtURDwrDfy9dQbhLRIv95K7NA\\nnDjj50KtzQAv3Lo2eURAWPK3CzzCsPcsW/KQbUjdVf8Xu7lql67CTx+ME8b2f6kb\\nbyXvSDwbYPmbA1L4dEsM3027R8WDOUgJn4cq17FQPpoXR9uXAR+PAbbKvLGyqBXe\\nOkIEyouZZwKBgD+mbBIDVgZJV7v8ijSfhE33oUhUVNpAKZszLa8D9knAP3FdmQtd\\nvTEs5NsSqH1dixaXWVlPF1wKkzDJSu80eDGLyPxsWUXodCbx5GlIuj76U4sllX8r\\n0jFK1rwL12cp+GniBFOsWacGu2YNu7eaRV8gS+qcBtSLj90t2Hs47cIDAoGAQ3A6\\nvTRSP8TVqfGJSxa2b3NRUc/phr5fuPAugbPoPmMeK48DirCkvRaJVpebihe5s2B+\\ngMsCDNzR2/U0ZfsdG3gntExcNjnvIPp0J2t/AuY5o87hIk6GtOvEaikX56Uo8cp5\\nKCn7tR99IKZoL2Wox7E+2+wAkUf5bKtwkweIxwECgYBszEXz+GC7buwQSWG42st6\\nEMi2BzSBq/WvFPFasv73xWn0joPh0KPXe6nIvMLONcKOHao7Wsnj98xYaIrbKapO\\nOmto26vWyN61Ou53myhupfMT/hhyxln/AdVtJEtikPKEcwaKOIi6okbhqCyTcz76\\nHnVHRTp+bAzjBEnoSxvTUw==\\n-----END PRIVATE KEY-----\\n\"\n",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/actiontech/dtle/commit/a303d9d7813290ca366b6b6cd52054759ca11db7?diff=split#diff-e8b0fd40196d552ff08e222c193e7e73c633c8c9424ac78a6450c990ae08a00aL-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "func rsaDecrypt(ciphertext []byte) ([]byte, error) {\n",
                        "lineNumber": 97,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tprivateKey := `-----BEGIN RSA PRIVATE KEY-----\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MIICXQIBAAKBgQDbJ3VgUDDWy9eQjj7AMS2ShqS03N2GLidAzLUeNhyiXEUVvG/b\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0FN/ovYNfOE2ElmNlQybRcamfzmJDnEh/NYnLzCiLn4kYVVUD6/fATJrJrvyIU1l\n",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "LTYlHboQSPeGkzQAZbb26WLXYsvVsBJVseFsej8tzyK/ONpOMqIgl+xneQIDAQAB\n",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "AoGBALUwonLG2ho83jS95lOwVSVX/MUr9lsBvaJtnTElO/dgoh2edj0euGpGqXft\n",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "T6YM9c2A9bNKtTri5QbT0eVvzP2AhqEpZixtDVTA3m/PYzobIdUiJiWV40/WrAtO\n",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hBpygtatUUV7EhqtoQiqSqvhpeO0MmhEVA6LrJZm6lrH7cWhAkEA+DA2nBU6qY9i\n",
                        "lineNumber": 104,
                        "lineChange": "removed"
                      },
                      {
                        "line": "fmMzpcKcrDdhVvRLiF5/S3z2tdJeBUzmwQBIweHHLsrC3Pp7ThMImlOjoF2bmW6i\n",
                        "lineNumber": 105,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ql5FHtFYOwJBAOINTRHKD9cF7Pb/Gz85yZKdIemg6n3oNrAz8ZLFHIDp0OIYrM+X\n",
                        "lineNumber": 106,
                        "lineChange": "removed"
                      },
                      {
                        "line": "CLh3MpiknkWivzhzLC/r3h11kCaOT0XP99sCQQCjdE1i+nBKH87EYl0vfD5nBYos\n",
                        "lineNumber": 107,
                        "lineChange": "removed"
                      },
                      {
                        "line": "FHRyeZnog4KQON4HK6CF18QTPLlLzeoMU0NGJi7yRMds5HmH0V98SN3I8CLlAkBu\n",
                        "lineNumber": 108,
                        "lineChange": "removed"
                      },
                      {
                        "line": "0RZ3Iheh0cXZUDaLSEkJFv8JCVnrX2tv9gb3bKoMiJNeQ7p0Cha8V7L2Ib11ZdNY\n",
                        "lineNumber": 109,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WR3QYFEDIB8Kx7kVAF8BAkAYzk6RZGiGdvp9LeK427qT7hNxhf9zcvEg/0a4fM7M\n",
                        "lineNumber": 110,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tMw7KTdfaFIorhu4yOyBNtdfP12JPbWIk5bKHOtZp4+d\n",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "-----END RSA PRIVATE KEY-----`\n",
                        "lineNumber": 112,
                        "lineChange": "removed"
                      },
                      {
                        "line": "func rsaDecrypt(ciphertext []byte, privateKey string) ([]byte, error) {\n",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tblock, _ := pem.Decode([]byte(privateKey))\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 15,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceFile",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/citrix/terraform-provider-citrixadc/commit/a4c0975006ef2020c0db505d69bdcec13f10915b?diff=split#diff-a9109e20e39687dfe49012120251229e209c76557bfef1ac646718448d8ca653L-1",
                    "lines": [
                      {
                        "line": "b, err := ioutil.ReadFile(inputFile)\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "b, err := ioutil.ReadFile(filepath.Clean(inputFile))\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/u-root/u-root/commit/?diff=split#diff-b2964e352f657fd0dbf5b5dc2f11b034b389e3ad9d60ef315dca58778612d468L-1",
                    "lines": [
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Clean(w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tpath := filepath.Join(*directory, filepath.Join(\"/\", w.Name()))\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tfile, err := os.Open(path)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 28,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/alfred-zhong/wserver/commit/bc7d33643368e16d9801ab88f7ba2dfdc49467af?diff=split#diff-005f9a0396b938d96245e8fc04dcd633d0716b5610fd4d90c09af361625fb74dL-1",
                    "lines": [
                      {
                        "line": "userID := \"476B40DD-DFE9-4CDE-AD4F-F0A53FE18FA5\"\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "userID := uuid.New().String()\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/k0kubun/sqldef/commit/5ac0feda25dfa3b4a3e2201c017425beec13a02d?diff=split#diff-ed17e21a49a7d3b117a41187ac6d384ef656de942120f74001fa9b057fde5688L-1",
                    "lines": [
                      {
                        "line": "user := \"postgres\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host := \"127.0.0.1:5432\"\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "user := config.User\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := config.Password\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "host := fmt.Sprintf(\"%s:%d\", config.Host, config.Port)\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fjukstad/kvik/commit/254d8dd1c34e017b1aac1493286a3f3b773ff40c?diff=split#diff-6a37a2c5ea8c5a951b2830b342cc07312e7cfa6eb69afdecc4b5bfce636f28e0L-1",
                    "lines": [
                      {
                        "line": "//addr := \"192.168.99.100:8004\"\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"public.opencpu.org\"\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username := \"user\"\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"password\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"localhost:8181\"\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "//addr := \"public.opencpu.org\"\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "username := \"\"\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "TooPermissiveTrustManager",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AmadeusITGroup/kubervisor/commit/aaf3d1a6a90c6ba9d56fd44648734938d0970470?diff=split#diff-48a8d555a42b35d5bf1e8ae57f3f0d6c634b9b3d9060fd1935afa55f5dbd58c9L-1",
                    "lines": [
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "transport.TLSClientConfig = &tls.Config{InsecureSkipVerify: false}\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/AbGuthrie/goquery/commit/0d5d3b2a65a571a0926591fe7674c133d0a06d14?diff=split#diff-8ffdbfea91b4887eb067076025ce572fc41c5f4de26ed4579f37938ee55116ecL-1",
                    "lines": [
                      {
                        "line": "TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "TLSClientConfig: &tls.Config{\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInsecureSkipVerify: config.GetConfig().DebugEnabled,\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "},\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fsouza/go-dockerclient/commit/27840d3e50fc3505446b6195c3b1370003829cc0?diff=split#diff-4b667feae66c9d46b21b9ecc19e8958cf4472d162ce0a47ac3e8386af8bbd8cfL-1",
                    "lines": [
                      {
                        "line": "InsecureSkipVerify: true,\n",
                        "lineNumber": 187,
                        "lineChange": "removed"
                      },
                      {
                        "line": "InsecureSkipVerify: false,\n",
                        "lineNumber": 193,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-295"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/CommandInjection/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[os.exec.Command](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/main_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 546,
                  "endLine": 546,
                  "startColumn": 17,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "657f17a204cdb5e7b4392aba2740c47f4255b9e2124b02a6a0af96a6f963b68f",
            "1": "f93f09c7.348ddf12.45df3e14.ef8f25dc.b30b958b.67ab4541.0873598c.a4abc9b0.6ad255b0.277c621c.e73bb3b7.9692a5c1.a3bd0548.67ab4541.3bee9612.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 5,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 708,
                            "endLine": 708,
                            "startColumn": 34,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 713,
                            "endLine": 713,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 713,
                            "endLine": 713,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 567,
                            "endLine": 567,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 568,
                            "endLine": 568,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 708,
                            "endLine": 708,
                            "startColumn": 33,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 538,
                            "endLine": 538,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 541,
                            "endLine": 541,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 541,
                            "endLine": 541,
                            "startColumn": 13,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 541,
                            "endLine": 541,
                            "startColumn": 3,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 546,
                            "endLine": 546,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 546,
                            "endLine": 546,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 546,
                            "endLine": 546,
                            "startColumn": 30,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 546,
                            "endLine": 546,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/openpgp/packet/public_key.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e16bc913311506722f46f3b139796b9b6d614b7084832aa6bf72c789770498b",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.c1f7986b.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.c1f7986b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/openpgp/packet/public_key.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/gorilla/websocket/util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "085b8b38d65860644d2f2d26f7f9107bb2f89c3c9e7652eb7772db50954eb45a",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/gorilla/websocket/util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/go-winio/pkg/guid/guid.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d81c9edfde3c7564c88a0d3e43ebb139c9673d41289c41bd73fc003c398afce",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/go-winio/pkg/guid/guid.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/google/uuid/hash.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24b0af93825e0b7ead0e94bc8ca15165f4123300fcc72f1fcdcb67ad469e9763",
            "1": "20d5557e.48506fc8.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.678b0e20.20d5557e.48506fc8.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/uuid/hash.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/openpgp/packet/symmetrically_encrypted.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c1b22748e7bf2912afb47ca03fbcadd106ebb3fc9749dfa4093a9bb81618bc3",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/openpgp/packet/symmetrically_encrypted.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/openpgp/packet/symmetrically_encrypted.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f998b4e14e655ecbdeaa072b52be398b9565f6eb8455c72d7a3fad29a9d952c8",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/openpgp/packet/symmetrically_encrypted.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 285,
                            "endLine": 285,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/go-jose/go-jose/v3/asymmetric.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fed7fdbc3bf9551adf77468d7a24ac58608ae6eda15f5c92b16234c4d854b419",
            "1": "d1695a15.6ce5dfff.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668.d1695a15.6ce5dfff.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/go-jose/go-jose/v3/asymmetric.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/go-jose/go-jose/v3/asymmetric.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "361d7f95813c0cde77b2ffdbac2cf46358ac47501a11fc149243998358f0d8f9",
            "1": "d1695a15.9c454c59.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668.d1695a15.9c454c59.45df3e14.48845822.bcaf552e.67ab4541.860c51ff.5c311668"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/go-jose/go-jose/v3/asymmetric.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 253,
                            "endLine": 253,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containers/ocicrypt/crypto/pkcs11/pkcs11helpers.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 14,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e4927c4d85eb34afc663b75379737a0a5e176e6cab4ddc0a80aeaba8d3dc5db8",
            "1": "d1695a15.effef857.734a90e3.f1837cd5.bcaf552e.67ab4541.860c51ff.ebbb87d0.d1695a15.effef857.734a90e3.f1837cd5.bcaf552e.67ab4541.860c51ff.ebbb87d0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containers/ocicrypt/crypto/pkcs11/pkcs11helpers.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/godbus/dbus/v5/auth_sha1.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef84fdc26b097cb38895cf942beeaa06e392c69e002604cf8ca329ce08924a88",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/godbus/dbus/v5/auth_sha1.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/go-winio/pkg/etw/provider.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "896f7669bfc43fa8e9c585e0ddca92036ab03c4399e7cb186c729ae506cf3e39",
            "1": "d1695a15.adf3f44e.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.adf3f44e.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/go-winio/pkg/etw/provider.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/cilium/ebpf/asm/instruction.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 721,
                  "endLine": 721,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bef8660de06261dc0f23d496ccdb3825eb7364a42b10008e4556ca383c70f56a",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/cilium/ebpf/asm/instruction.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 721,
                            "endLine": 721,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/openpgp/packet/private_key.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256,
                  "startColumn": 8,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "700423ca06b5743dcef2e627c77b98cc556842ac702786647f4b0e610a9057ee",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/openpgp/packet/private_key.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 256,
                            "endLine": 256,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/net/websocket/hybi.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "endLine": 392,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09382998be7e21c64eea417636b06442967e9775792668ea92a213611e23238d",
            "1": "d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72.d1695a15.73eb5804.45df3e14.e22980a8.bcaf552e.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/net/websocket/hybi.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 392,
                            "endLine": 392,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/go-jose/go-jose/v3/jwk.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "startColumn": 19,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "271504cd890e63d8a9561eb35c4277cdff612907b0593aae5f8f91b59afea596",
            "1": "f1cb724d.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.ca59ef5d.f1cb724d.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.ca59ef5d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/go-jose/go-jose/v3/jwk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/go-jose/go-jose/v3/jwk.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 316,
                  "endLine": 316,
                  "startColumn": 14,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e763e76d36abb875c0f90b9e1d33bbb76e22f707c84c69ed58ba794baf4776d",
            "1": "26ce6fdf.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72.26ce6fdf.73eb5804.45df3e14.e22980a8.0772103c.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/go-jose/go-jose/v3/jwk.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 316,
                            "startColumn": 14,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The SHA1 hash (used in crypto.sha1.Sum) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The SHA1 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.sha1.Sum](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/Microsoft/hcsshim/layer.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 7,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73763d0693ac3b2c86eb3830f6cb4ae79619031038d698f8a4132d267f1a4b06",
            "1": "685bf8ba.73eb5804.45df3e14.e22980a8.099b8dff.67ab4541.860c51ff.1d874c72.685bf8ba.73eb5804.45df3e14.e22980a8.099b8dff.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/Microsoft/hcsshim/layer.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/google/uuid/hash.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 17,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d3dae3b7aa5a2ea249a5625a6d33525d7469dc75c9ed1924d1738a271e87287e",
            "1": "20d5557e.48506fc8.45df3e14.772d51ed.556f02b4.67ab4541.860c51ff.678b0e20.20d5557e.48506fc8.45df3e14.772d51ed.556f02b4.67ab4541.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/google/uuid/hash.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecureHash",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in crypto.md5.New) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The MD5 hash (used in {0}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[crypto.md5.New](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/golang.org/x/crypto/openpgp/packet/public_key_v3.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 17,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dc2b34ef5e482a55484d9b53c6af1e7717f4e610cf9a9611c53515519ce862fd",
            "1": "ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.c1f7986b.ba4e4356.73eb5804.45df3e14.e22980a8.f1d9f854.67ab4541.860c51ff.c1f7986b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/golang.org/x/crypto/openpgp/packet/public_key_v3.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 17,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 378,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[os.ReadDir](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/sandbox_clean_remove_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 13,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4c30969a5c8c17789032c63c756dc80ec73faf22dcea041b71cfa75f1360d293",
            "1": "3b5e0c16.7ce7c9cf.45df3e14.a0c2f70e.44a9d207.67ab4541.860c51ff.a7f8afaa.3b5e0c16.7ce7c9cf.45df3e14.e22980a8.e8c00e77.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 51,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 50,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 23,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 9,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 48,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 672,
                            "endLine": 672,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 66,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 3,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 24,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[os.ReadDir](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/sandbox_clean_remove_windows_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 13,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f6fb5aa3e1385c6707fe9ba9ce1361eb4138da95ef1d89ec900c48264d0c433f",
            "1": "3b5e0c16.7ce7c9cf.45df3e14.a0c2f70e.44a9d207.67ab4541.860c51ff.a7f8afaa.3b5e0c16.7ce7c9cf.45df3e14.e22980a8.e8c00e77.67ab4541.860c51ff.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 51,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 50,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 23,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 9,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 48,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 672,
                            "endLine": 672,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 66,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 3,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 24,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)",
              "[os.ReadFile](26)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/sandbox_clean_remove_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 20,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd650f99ee6467ccdc74cecb4c3d7dcf5e34c091c271fbdcc1bd8a802b66e41c",
            "1": "ba4e4356.73eb5804.45df3e14.96bf654a.db2bb079.995dab92.6373e1ef.e01cd24f.c36e37d0.7ce7c9cf.45df3e14.e22980a8.2c550a99.67ab4541.6373e1ef.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 51,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 50,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 23,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 9,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 48,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 672,
                            "endLine": 672,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 66,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 3,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 24,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 21,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 32,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)",
              "[os.ReadFile](26)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/sandbox_clean_remove_windows_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 20,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "130b041fb2cfd8d3cf1bd9948bbf7ee401b6836cb73fe701a35b25c6d1ff8fd1",
            "1": "ba4e4356.73eb5804.45df3e14.96bf654a.db2bb079.995dab92.6373e1ef.e01cd24f.c36e37d0.7ce7c9cf.45df3e14.e22980a8.2c550a99.67ab4541.6373e1ef.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 51,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 50,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 23,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 9,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 48,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 671,
                            "endLine": 671,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 672,
                            "endLine": 672,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 66,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 15,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 673,
                            "endLine": 673,
                            "startColumn": 3,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 17,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 24,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 21,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 7,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 2,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 32,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 20,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.RemoveAll, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35)",
              "[os.RemoveAll](36)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/sandbox_clean_remove_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 21,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b85e59ed77f1344da0b1c20da5442b75c1745a05414e5a8308ddeabd9815381",
            "1": "3e0ea818.b1d760a0.45df3e14.fc7a4dca.950b6b44.921240c1.df7e59ba.e1919b71.db4b37b6.074d9d3c.a580c816.e22980a8.73c83f98.57f89f2f.2a4dd422.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 5,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 51,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 50,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 23,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 15,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 659,
                            "endLine": 659,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 666,
                            "endLine": 666,
                            "startColumn": 9,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 688,
                            "endLine": 688,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 692,
                            "endLine": 692,
                            "startColumn": 15,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 692,
                            "endLine": 692,
                            "startColumn": 15,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 692,
                            "endLine": 692,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 699,
                            "endLine": 699,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 699,
                            "endLine": 699,
                            "startColumn": 12,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 699,
                            "endLine": 699,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/main_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 704,
                            "endLine": 704,
                            "startColumn": 2,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 20,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 20,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 6,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 4,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 34,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/sandbox_clean_remove_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 409,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[os.ReadFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/imageverifier/bindir/bindir_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 16,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1f9eafebc5f0c41c80d3b348e6b5144df80d7c452225ae49c6c6b52308b6fc79",
            "1": "74684c12.73eb5804.45df3e14.6f6e1432.7dd6df5b.995dab92.df7e59ba.e01cd24f.9c8f918c.c20335f3.45df3e14.e22980a8.e8c00e77.75c1163d.c2cfdcd9.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 33,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 49,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/bindir_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 359,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in userName.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[userName](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/k8s.io/klog/v2/klog_file.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25a1b67e1921024a8bc825fbc491ebbf84cf954cb021d51f7040ab9b42fcda35",
            "1": "5c121d52.0d9b46dd.3602530c.79502f34.d4a84630.63a86890.fb9e89bc.1bff12d3.5c121d52.89ffa169.3602530c.79502f34.d4a84630.73f682b3.2563f0c1.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/klog/v2/klog_file.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/klog/v2/klog_file.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/Ssrf/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1)",
              "[_](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/image_pull_timeout_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 337,
                  "endLine": 337,
                  "startColumn": 3,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7cfeae6cdb91da726f6cb1ebe515e63d3566f5ff5a504667c0a048126250d35c",
            "1": "424eddda.98f0ff0f.45df3e14.6483b32f.6ee851a6.67ab4541.8ee950b3.dd979430.163b5b71.940077cb.b84a3425.e22980a8.6ee851a6.67ab4541.8ee950b3.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/image_pull_timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/image_pull_timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/image_pull_timeout_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in unixPasswdPath.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[unixPasswdPath](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/moby/sys/user/lookup_unix.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 2,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80e7392768a763e314f600fc90d706e5449f5006ff814bfe456006a997559c78",
            "1": "8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.fb9e89bc.1bff12d3.8379f5e8.57486739.71d8f4e9.e22980a8.8193a752.8fd31a01.0c6e0684.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/moby/sys/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/moby/sys/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 2,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in unixPasswdPath.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[unixPasswdPath](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/moby/sys/user/lookup_unix.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 9,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ee8a66a757f3b851544472dfd0f1d236206da3bbde67c9639259ff8844d873e5",
            "1": "8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.cd527bfb.1bff12d3.8379f5e8.57486739.45df3e14.e22980a8.8193a752.8fd31a01.0c6e0684.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/moby/sys/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/moby/sys/user/lookup_unix.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 9,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Int is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Int](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222,
                  "startColumn": 36,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1c597c03fee52e831c1670f293c064c7b2622a8d6b5a7c5713b8cf8357f825f1",
            "1": "3e0ea818.e0beca80.45df3e14.0c66bee6.4c188f69.67ab4541.860c51ff.1bff12d3.bb031414.c55d47e1.45df3e14.e22980a8.0de0c51b.67ab4541.83265159.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Int is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in a cryptological or password-generating function. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Int](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222,
                  "startColumn": 48,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1c597c03fee52e831c1670f293c064c7b2622a8d6b5a7c5713b8cf8357f825f1",
            "1": "3e0ea818.e0beca80.45df3e14.0c66bee6.4c188f69.67ab4541.860c51ff.1bff12d3.bb031414.c55d47e1.45df3e14.e22980a8.0de0c51b.67ab4541.83265159.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 48,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/InsecurelyGeneratedPassword",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Weak random generator math.rand.Int is used to create a password in variable fmt.Errorf. Consider using crypto/rand to generate strong passwords.",
            "markdown": "Weak random generator {0} is used to create a password in variable {1}. Consider using crypto/rand to generate strong passwords.",
            "arguments": [
              "[math.rand.Int](0)",
              "[fmt.Errorf](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227,
                  "startColumn": 34,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5ab670d3b97b1624a412eaf6b0de95036f2bb2e7112684b64fd98cbe08b19995",
            "1": "1d830652.73eb5804.45df3e14.e22980a8.8193a752.67ab4541.860c51ff.1bff12d3.bb031414.277c621c.45df3e14.e22980a8.0de0c51b.67ab4541.83265159.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containerd/imgcrypt/images/encryption/encryption.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.exec.Command](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "pkg/imageverifier/bindir/testdata/verifiers/slow_child_process.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "07b55d6f575a991c735cf048ac99b5067633e13f9a729354ce4df2f08e2f9e6c",
            "1": "7b4e91be.348ddf12.45df3e14.9692a5c1.e75a2f16.75c1163d.0873598c.1bff12d3.7b4e91be.348ddf12.45df3e14.9692a5c1.c609b797.75c1163d.0873598c.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/testdata/verifiers/slow_child_process.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/testdata/verifiers/slow_child_process.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/testdata/verifiers/slow_child_process.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/testdata/verifiers/slow_child_process.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "pkg/imageverifier/bindir/testdata/verifiers/slow_child_process.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 753,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/CommandInjection",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into os.exec.Command, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1)",
              "[os.exec.Command](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/containerd-shim-runc-v2/process/io_util.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a66648ed8bd8ec1efbd945a3c1c9ff9a1c3ca6554a868b16dfd0d044d82eaf5",
            "1": "bd75659d.c20335f3.45df3e14.f9b9b2db.7c4a878b.75c1163d.860c51ff.a4abc9b0.1f0bd5c5.940077cb.45df3e14.f9b9b2db.556f02b4.75c1163d.860c51ff.678b0e20"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/containerd-shim-runc-v2/process/io_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/containerd-shim-runc-v2/process/io_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/containerd-shim-runc-v2/process/io_util.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 753,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 310,
                  "endLine": 310,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11e8ec74eca7d7ea85a3b350882e15da6ba28e0a825055023cbea5ac8f1c034e",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 310,
                            "endLine": 310,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6563be485caf12a40d392d26c55e88f4187e45655eca420f734907d0205e9ca6",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 350,
                  "endLine": 350,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5f4ca7a03d16f1eda59aac509c40ba3d051a05041863ca4ecb3ca8db3547d8e7",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 350,
                            "endLine": 350,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 361,
                  "endLine": 361,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df0d8d38582cb8ea3ada6861b326b1c52aa8ba4279ddc45a5913f6026c4c3223",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 372,
                  "endLine": 372,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0bef99cbee97923281a1aef6d0ac5038899b014543e1d5e9255c7e73246828de",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8033229c77cabfe4583ba79aa2694c7fe84c21ff18895b8fdf1f47f5ed85307a",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 402,
                            "endLine": 402,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 413,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "13ac407c3ea1852cf9ce0db580567b14d8bb3963996e4b70d55177fd5b43f098",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.cfa41632.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 413,
                            "endLine": 413,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 411,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedNonCryptoSecret/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in testKey.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[testKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/config/hosts_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 580,
                  "endLine": 580,
                  "startColumn": 2,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c636e59cf9df3d72b8bb4fdab13333e20d25eba33a19d979adac0e160c4f6efc",
            "1": "8379f5e8.fa7ccf64.45df3e14.9692a5c1.91b7c08c.63a86890.ae6cd19f.1bff12d3.8379f5e8.c45f1b38.45df3e14.9692a5c1.91b7c08c.257c5aa5.ae6cd19f.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 580,
                            "endLine": 608,
                            "startColumn": 19,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/config/hosts_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 580,
                            "endLine": 580,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.RemoveAll, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to delete arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[os.RemoveAll](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/restart.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 457,
                  "endLine": 457,
                  "startColumn": 13,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8ead16f89843b9369aafb29a91a996fed36f08085b4b0f57dbf05cb05eaa726",
            "1": "2d06e3d6.73eb5804.45df3e14.6483b32f.4fc41580.995dab92.7b915e3a.e1dda895.a73d5429.73eb5804.45df3e14.e22980a8.32408664.67ab4541.452ad6f5.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/restart.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 456,
                            "endLine": 456,
                            "startColumn": 30,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/restart.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 456,
                            "endLine": 456,
                            "startColumn": 30,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/restart.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 456,
                            "endLine": 456,
                            "startColumn": 10,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/restart.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 456,
                            "endLine": 456,
                            "startColumn": 3,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/restart.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 457,
                            "endLine": 457,
                            "startColumn": 34,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/helpers_windows.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 165,
                            "endLine": 165,
                            "startColumn": 41,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/helpers_windows.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 22,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/helpers_windows.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10)",
              "[os.ReadFile](11)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 448,
                  "endLine": 448,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "18969d29d12baf02ffc636622dc3c2c01479f4dbd5e51b957de64e622d4d099f",
            "1": "29f61894.73eb5804.45df3e14.9c67a39a.db2bb079.995dab92.df7e59ba.7e47a2cb.f6f40a95.b42a7f52.45df3e14.e22980a8.e8c00e77.57f89f2f.c2cfdcd9.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 433,
                            "endLine": 433,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 433,
                            "endLine": 433,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 433,
                            "endLine": 433,
                            "startColumn": 15,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 433,
                            "endLine": 433,
                            "startColumn": 3,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 435,
                            "endLine": 435,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 24,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 438,
                            "startColumn": 9,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 39,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 447,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 29,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/api.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 448,
                            "endLine": 448,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.ReadFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/rdt.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 773,
                  "endLine": 773,
                  "startColumn": 15,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c496abccf34354fc7ed3ecb3469170506ae3474ce33bb8ecdae204acae546c5",
            "1": "c1d2e2c2.e0beca80.45df3e14.edbd913d.51a8f989.67ab4541.860c51ff.0b3d1648.8da4b8b6.348ddf12.45df3e14.9692a5c1.0db02c45.9383b6fc.1bf4e01c.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/rdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 770,
                            "endLine": 770,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/rdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 770,
                            "endLine": 770,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/rdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 770,
                            "endLine": 770,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/rdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 773,
                            "endLine": 773,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/rdt.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 773,
                            "endLine": 773,
                            "startColumn": 30,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 318,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 319,
                            "endLine": 319,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 21,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 338,
                            "endLine": 338,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/intel/goresctrl/pkg/rdt/info.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 338,
                            "endLine": 338,
                            "startColumn": 15,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.ReadFile](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188,
                  "startColumn": 16,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "30383befe2bb9552c3916e2824320017e43ef09918d665469f4849880ef3acc5",
            "1": "7b93dee7.869aa50d.94afdabe.c33b2747.556f02b4.2f4e1548.fd2eaf05.678b0e20.8da4b8b6.73eb5804.94afdabe.c33b2747.e8c00e77.57f89f2f.1bf4e01c.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 54,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 54,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 5,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 15,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 250,
                            "endLine": 250,
                            "startColumn": 27,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 250,
                            "endLine": 250,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 562,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[os.ReadFile](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 251,
                  "startColumn": 16,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "68c8bb030b6b3b9f06b73932332afc6ece8728aee6c701b02b53298afb95bf97",
            "1": "424eddda.869aa50d.45df3e14.c33b2747.556f02b4.2f4e1548.fd2eaf05.b2014c83.8da4b8b6.c55d47e1.734a90e3.c33b2747.e8c00e77.57f89f2f.1bf4e01c.9925e872"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 54,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 54,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 5,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 2,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 15,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 250,
                            "endLine": 250,
                            "startColumn": 27,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 250,
                            "endLine": 250,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 251,
                            "endLine": 251,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 187,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/github.com/containernetworking/cni/libcni/conf.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 562,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[os.ReadFile](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/images/image_list.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 23,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b890233fdc9d2aa0c4a5b90f3ad713fb284c821c4b9d1daa0cc39bd3ba60af10",
            "1": "09026bb8.1f1b99e1.45df3e14.0c66bee6.51a8f989.67ab4541.860c51ff.b93857c6.2d06e3d6.73eb5804.45df3e14.e22980a8.c08ac139.57f89f2f.be8ec6d7.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 5,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 17,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 5,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 51,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 35,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/images/image_list.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 23,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.OpenFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3)",
              "[os.OpenFile](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/failpoint/cmd/runc-fp/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd0b5467a2d3e0b7e9eb395ed8ead46da1e0acb3f0b912bd9493dd1ddf1f23a0",
            "1": "7572e22a.348ddf12.45df3e14.9692a5c1.b73135d5.e4d7b7ac.aa359f29.48226a18.7572e22a.348ddf12.9fa62a61.9692a5c1.56ffa9d2.e4d7b7ac.aa359f29.48226a18"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/failpoint/cmd/runc-fp/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/failpoint/cmd/runc-fp/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/failpoint/cmd/runc-fp/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/failpoint/cmd/runc-fp/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/failpoint/cmd/runc-fp/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from file name flows into os.Open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to open arbitrary files.",
            "arguments": [
              "[file name](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[os.Open](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/runtime/v2/shim_load.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "startColumn": 13,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b19dcd9a5ace1542c036b20885c76a6a0e1ab84e204c42ba57a849bb75250301",
            "1": "4efb2cae.c8cae435.45df3e14.7d854d2d.7c4a878b.67ab4541.860c51ff.5c311668.f504655c.277c621c.45df3e14.9692a5c1.e8c00e77.35dc5fa9.94a32ef9.b2014c83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 3,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 21,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 44,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 21,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/runtime/v2/shim_load.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 13,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/podsandbox/sandbox_run_windows_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4b5d7ff1a58de5a7870778cdd621fdf683ae270a02162d79b58512ac9b7f2784",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/sandbox_run_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 15,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/sandbox_run_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 368,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/images/image_list_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "589bac7a6b0d17674e3660fc6d6e3b4b1fa8560bebd8b8207e706eb3d87f2296",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_list_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_list_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/images/image_list_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5ff80de314ceb1125051d0c301a049823e58771712f6d9161e7a810954a1bddb",
            "1": "424eddda.98f0ff0f.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.ff3d0695.424eddda.98f0ff0f.b0a32259.ecf71d36.797c781d.0cfce5a1.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_list_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 12,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_list_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/images/image_list_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fad501b272740eef1f74db4017815f03c157d5ad681700249609cb75bd26e048",
            "1": "424eddda.ff7f486d.3d13e656.ecf71d36.797c781d.67752288.8ee950b3.e2f05950.424eddda.ff7f486d.3d13e656.ecf71d36.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_list_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_list_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/images/image_status_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 5,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d9c35a02ae2776e9515851e3713c43cfdf196c10e53104ae3450146105a04fc3",
            "1": "424eddda.98f0ff0f.9cf9aa65.5e6c24a8.797c781d.5b61c4b1.8ee950b3.57c24eb1.424eddda.98f0ff0f.9cf9aa65.5e6c24a8.797c781d.5b61c4b1.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_status_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_status_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 368,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 5,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "207505fe01295c5f17de9a7b23aedb391a8908d8e24f1319e5ba2d944be1ced3",
            "1": "43e28d85.98f0ff0f.3d13e656.c5b4792d.797c781d.67752288.8ee950b3.ff3d0695.43e28d85.98f0ff0f.3d13e656.c5b4792d.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 5,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9845095c2940afccad7a9341d06323a67e7c66f5211ae089c91b684077c65aa5",
            "1": "43e28d85.98f0ff0f.3d13e656.c5b4792d.797c781d.67752288.8ee950b3.ff3d0695.43e28d85.98f0ff0f.3d13e656.c5b4792d.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 5,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bfb3e3b05b8f625833e103abb7ff10ab519a588576fa66790822ac4e3ad03fd0",
            "1": "43e28d85.98f0ff0f.3d13e656.c5b4792d.797c781d.67752288.8ee950b3.ff3d0695.43e28d85.98f0ff0f.3d13e656.c5b4792d.797c781d.2f4e1548.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/podsandbox/helpers_selinux_linux_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in User.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[User](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/container_create_windows_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 3,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "895525d56a792b0ab7319a24b3c2be266fb53dd2963c9415b0584b7ff3e79b16",
            "1": "6326ddfc.98f0ff0f.3d13e656.ecf71d36.797c781d.419d56d0.8ee950b3.ff3d0695.6326ddfc.98f0ff0f.3d13e656.ecf71d36.797c781d.419d56d0.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/container_create_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 15,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/container_create_windows_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 368,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in ASSIGN.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[ASSIGN](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/remotes/docker/pusher_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 2,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ae1df7d3e2f21eebd7769eb716e992f217f85ba0d8ed994b2695a69a4b0693f3",
            "1": "ba4e4356.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3.21bc7074.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/pusher_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/remotes/docker/pusher_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 2,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 368,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/client/container_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2610,
                  "endLine": 2610,
                  "startColumn": 2,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f51a45d0cc5434c49d199a40ffaacfba4f6cca198e5abc2c1c56301abcae2e48",
            "1": "6326ddfc.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.7b915e3a.1bff12d3.6326ddfc.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.7b915e3a.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/client/container_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2610,
                            "endLine": 2610,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/client/container_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2610,
                            "endLine": 2610,
                            "startColumn": 2,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "integration/client/container_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2616,
                  "endLine": 2616,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f2ef6411001ca9cbea5fa17f73dd511e9c9cc5ddc852d8e11efa354aadc645c5",
            "1": "6326ddfc.73eb5804.fc7d5400.e22980a8.f1d9f854.995dab92.7b915e3a.1bff12d3.6326ddfc.73eb5804.45df3e14.e22980a8.f1d9f854.995dab92.df7e59ba.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/client/container_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2610,
                            "endLine": 2610,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "integration/client/container_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2616,
                            "endLine": 2616,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 418,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "internal/cri/server/images/image_pull.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 460,
                  "endLine": 460,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cce4c542138367935963772c78616d46c5f6fd88aa6316075a9d85e01be1f140",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "internal/cri/server/images/image_pull.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 460,
                            "endLine": 460,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 508,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/ctr/commands/resolver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124,
                  "startColumn": 3,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ae7837ef1267f72ad8790f64fcf3830b9c28becba972a4b1dbfa8eb82611693",
            "1": "9cf53582.9bf9da8e.8d277033.e22980a8.c8f211d9.67ab4541.860c51ff.91f18234.9cf53582.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.f563e0a5.91f18234"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmd/ctr/commands/resolver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 3,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 508,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/k8s.io/client-go/util/cert/server_inspection.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b91ec0a2649e86e911022159054a145b9b0ad221bc78b160aeb44111a0a7602",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.b5e396cd.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.b5e396cd.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/client-go/util/cert/server_inspection.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 558,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/k8s.io/client-go/util/cert/server_inspection.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 3,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9bd18e7d2abcb778cf4e8d705104b0f2faec2629ba008950f3358072e41b31bc",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/client-go/util/cert/server_inspection.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 3,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 558,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vendor/k8s.io/apimachinery/pkg/util/proxy/dial.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 6,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d1ba1a29e591898478d64f4f4b08cac7b62d453d885a6bd302b4eeb6bb73572c",
            "1": "424eddda.9bf9da8e.8d277033.1c2a3430.c9c1f9d4.6c8feca2.f563e0a5.1f55c1aa.424eddda.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vendor/k8s.io/apimachinery/pkg/util/proxy/dial.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 6,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 508,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Go",
            "files": 4481,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "C++",
            "files": 5,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "C",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "C",
            "files": 1,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

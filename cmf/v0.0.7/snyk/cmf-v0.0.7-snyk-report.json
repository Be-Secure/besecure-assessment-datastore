{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/InsecureXmlParser",
              "name": "InsecureXmlParser",
              "shortDescription": {
                "text": "Insecure Xml Parser"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* Avoid using vulnerable APIs\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.\n\n\n## References\n* [XML vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureXmlParser",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/archerysec/archerysec/commit/73c2ef30d96ad8abcca11886ba96b9c9bc6a7289?diff=split#diff-fa2a8a9395a6042f369c987ec4ff5fe39f6a8b8ce5a551402de875938e03afb1L-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "from scanners.scanner_parser.web_scanner import zap_xml_parser, \\\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    arachni_xml_parser, netsparker_xml_parser, webinspect_xml_parser\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.response import Response\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.views import APIView\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "from rest_framework.parsers import MultiPartParser, FormParser\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "class WebScan(generics.ListCreateAPIView):\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = zap_scans_db.objects.all()\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = WebScanSerializer\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "            GET List all scans and check status.\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = zap_scans_db.objects.all()\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = WebScanSerializer(all_scans, many=True)\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Launch scans using this api\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = WebScanSerializer(data=request.data)\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = uuid.uuid4()\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scanner = request.data.get('scanner')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            target_url = request.data.get('scan_url', )\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = request.data.get('project_id', )\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            rescanid = None\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            rescan = 'No'\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if scanner == 'zap_scan':\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # run_s = launch_zap_scan\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread = threading.Thread(target=launch_zap_scan, args=(target_url, project_id, rescanid, rescan))\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread.daemon = True\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "                thread.start()\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif scanner == 'burp_scan':\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "                date_time = datetime.datetime.now()\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "                scan_dump = burp_scan_db(scan_id=scan_id,\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         project_id=project_id,\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         url=target_url,\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                         date_time=date_time)\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                scan_dump.save()\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # do_scan = burp_plugin.burp_scans(project_id, target_url, scan_id)\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # # o = ()\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread = threading.Thread(target=do_scan.scan_launch(), args=(project_id, target_url, scan_id))\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread.daemon = True\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # thread.start()\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    do_scan = burp_plugin.burp_scans(\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        project_id,\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        target_url,\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        scan_id)\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # do_scan.scan_lauch(project_id,\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    #                    target,\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    #                    scan_id)\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread = threading.Thread(\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        target=do_scan.scan_launch,\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    )\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread.daemon = True\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    thread.start()\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    # time.sleep(5)\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "                except Exception as e:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    print e\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not target_url:\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Scan Launched\", \"scanid\": scan_id})\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NetworkScan(generics.ListCreateAPIView):\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Network Scan API call to perform scan.\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = scan_save_db.objects.all()\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = NetworkScanSerializer\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Returns a list of all **Network Scans** in the system.\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = scan_save_db.objects.all()\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = NetworkScanSerializer(all_scans, many=True)\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "           Current user's identity endpoint.\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = NetworkScanSerializer(data=request.data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            target_ip = request.data.get('scan_ip', )\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = request.data.get('project_id', )\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            profile = None\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # views.openvas_scanner(target_ip, project_id, profile)\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread = threading.Thread(\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                target=views.openvas_scanner,\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "                args=(target_ip, project_id, profile)\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            )\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread.daemon = True\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            thread.start()\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # time.sleep(5)\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not target_ip:\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Scan Started\"})\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Project(generics.CreateAPIView):\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = project_db.objects.all()\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = ProjectDataSerializers\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self, request, format=None, **kwargs):\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Returns a list of all **Network Scans** in the system.\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        all_scans = project_db.objects.all()\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serialized_scans = ProjectDataSerializers(all_scans, many=True)\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serialized_scans.data)\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "           Current user's identity endpoint.\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = ProjectDataSerializers(data=request.data)\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_id = uuid.uuid4()\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_name = request.data.get(\"project_name\", )\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_start = request.data.get(\"project_start\", )\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_end = request.data.get(\"project_end\", )\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_owner = request.data.get(\"project_owner\", )\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            project_disc = request.data.get(\"project_disc\", )\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            save_project = project_db(project_name=project_name, project_id=project_id,\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                      project_start=project_start, project_end=project_end,\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                      project_owner=project_owner, project_disc=project_disc, )\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "            save_project.save()\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not project_name:\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Response({\"error\": \"No name passed\"})\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response({\"message\": \"Project Created\"})\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "class WebScanResult(generics.ListCreateAPIView):\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = zap_scan_results_db.objects.all()\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = WebScanResultSerializer\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Post request to get all vulnerability Data.\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = WebScanResultSerializer(data=request.data)\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = request.data.get('scan_id', )\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "            # project_id = request.data.get('project_id',)\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            zap_scan = zap_scan_results_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "            burp_scan = burp_scan_result_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "            all_scans = chain(zap_scan, burp_scan)\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "            serialized_scans = WebScanResultSerializer(all_scans, many=True)\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response(serialized_scans.data)\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NetworkScanResult(generics.ListCreateAPIView):\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "    queryset = ov_scan_result_db.objects.all()\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serializer_class = NetworkScanResultSerializer\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None, **kwargs):\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Post request to get all vulnerability Data.\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"\"\"\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serializer = NetworkScanResultSerializer(data=request.data)\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if serializer.is_valid():\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_id = request.data.get('scan_id', )\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            all_scans = ov_scan_result_db.objects.filter(scan_id=scan_id)\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "            serialized_scans = NetworkScanResultSerializer(all_scans, many=True)\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Response(serialized_scans.data)\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "class UpladScanResult(APIView):\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser_classes = (MultiPartParser,)\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def post(self, request, format=None):\n",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "        project_id = request.data.get(\"project_id\")\n",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scanner = request.data.get(\"scanner\")\n",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xml_file = request.data.get(\"filename\")\n",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_url = request.data.get(\"scan_url\")\n",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_id = uuid.uuid4()\n",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "        scan_status = \"100\"\n",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print xml_file\n",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if scanner == \"zap_scan\":\n",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "            date_time = datetime.datetime.now()\n",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_dump = zap_scans_db(scan_url=scan_url,\n",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     scan_scanid=scan_id,\n",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     date_time=date_time,\n",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     project_id=project_id,\n",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     vul_status=scan_status,\n",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     rescan='No')\n",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "            scan_dump.save()\n",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "            tree = ET.parse(xml_file)\n",
                        "lineNumber": 240,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/arvvoid/plugin.video.hbogoeu/commit/b3025809c78d3fe0f7d5cca06047acce6a6f91c1?diff=split#diff-04e77ef21fb1644dd424e853cfeb8a66d3c7fd5982f201c7c7985fd87e84858cL-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome import Random\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Cipher import AES\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Util import Padding\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no Cryptodome gracefully fail with an informative message\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    msg = xbmcaddon.Addon().getLocalizedString(30694)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmc.log(\"[\" + str(xbmcaddon.Addon().getAddonInfo('id')) + \"] MISSING Cryptodome dependency...exiting...\" + traceback.format_exc(), xbmc.LOGDEBUG)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmcgui.Dialog().ok(xbmcaddon.Addon().getAddonInfo('name') + \" ERROR\", msg)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sys.exit()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "class HbogoHandler(object):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_SW_VERSION = '4.7.4'\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_REQUIRED_PLATFORM = 'CHBR'  # emulate chrome\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ACCEPT_LANGUAGE = 'en-us,en;q=0.8'\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, handle, base_url):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon = xbmcaddon.Addon()\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon_id = self.addon.getAddonInfo('id')\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.language = self.addon.getLocalizedString\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_url = base_url\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.handle = handle\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.DEBUG_ID_STRING = \"[\" + str(self.addon_id) + \"] \"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.SESSION_VALIDITY = 0.5  # stored session valid for half hour\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_addon_cat=\"\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = \"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.search_string = urllib.unquote_plus(self.addon.getSetting('lastsearch'))\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginFanart(self.handle, image=self.get_resource(\"fanart.jpg\"))\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # LABELS\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_DESC = self.language(30700).encode('utf-8')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_NORES = self.language(30701).encode('utf-8')\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_ERROR = self.language(30702).encode('utf-8')\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_INFO = self.language(30713).encode('utf-8')\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SUCESS = self.language(30727).encode('utf-8')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE_UNTILL = self.language(30703).encode('utf-8')\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_FILM_UNTILL = self.language(30704).encode('utf-8')\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE = self.language(30705).encode('utf-8')\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEASON = self.language(30706).encode('utf-8')\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_MYPLAYLIST = self.language(30707).encode('utf-8')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NOLOGIN = self.language(30708).encode('utf-8')\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_LOGIN_ERROR = self.language(30709).encode('utf-8')\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NO_OPERATOR = self.language(30710).encode('utf-8')\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH = self.language(30711).encode('utf-8')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.use_content_type = \"episodes\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_original_names = self.addon.getSetting('origtitles')\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_original_names == \"true\":\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = True\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = False\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_scraper_names = self.addon.getSetting('forcescrap')\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_scraper_names == \"true\":\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = True\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = False\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.sensitive_debug = self.addon.getSetting('sensitivedebug')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug == \"true\":\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = True\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = False\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.lograwdata = self.addon.getSetting('lograwdata')\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.lograwdata == \"true\":\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = True\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug:\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ret = xbmcgui.Dialog().yesno(self.LB_INFO, self.language(30712).encode('utf-8'), self.language(30714).encode('utf-8'), self.language(30715).encode('utf-8'))\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not ret:\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.loggedin_headers = None  #DEFINE IN SPECIFIC HANDLER\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.API_PLATFORM = 'COMP'\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_resource(file):\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/'+file).decode('utf-8')\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_media_resource(file):\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/media/'+file).decode('utf-8')\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def log(self, msg, level=xbmc.LOGDEBUG):\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmc.log(self.DEBUG_ID_STRING + msg, level)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def setDispCat(self, cur_loc):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginCategory(self.handle, cur_loc)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = cur_loc\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def send_login_hbogo(self, url, headers, data, response_format='json'):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN URL: \" + url)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.post(url, headers=headers, data=data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN RETURNED STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.sensitive_debug:\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self.log(\"SEND LOGIN RETURNED RAW: \" + r.text.encode('utf-8'))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/arvvoid/plugin.video.hbogoeu/commit/b3025809c78d3fe0f7d5cca06047acce6a6f91c1?diff=split#diff-04e77ef21fb1644dd424e853cfeb8a66d3c7fd5982f201c7c7985fd87e84858cL-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome import Random\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Cipher import AES\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from Cryptodome.Util import Padding\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "except ImportError:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no Cryptodome gracefully fail with an informative message\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    msg = xbmcaddon.Addon().getLocalizedString(30694)\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmc.log(\"[\" + str(xbmcaddon.Addon().getAddonInfo('id')) + \"] MISSING Cryptodome dependency...exiting...\" + traceback.format_exc(), xbmc.LOGDEBUG)\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xbmcgui.Dialog().ok(xbmcaddon.Addon().getAddonInfo('name') + \" ERROR\", msg)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sys.exit()\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "class HbogoHandler(object):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_SW_VERSION = '4.7.4'\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    GO_REQUIRED_PLATFORM = 'CHBR'  # emulate chrome\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ACCEPT_LANGUAGE = 'en-us,en;q=0.8'\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, handle, base_url):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon = xbmcaddon.Addon()\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.addon_id = self.addon.getAddonInfo('id')\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.language = self.addon.getLocalizedString\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_url = base_url\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.handle = handle\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.DEBUG_ID_STRING = \"[\" + str(self.addon_id) + \"] \"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.SESSION_VALIDITY = 0.5  # stored session valid for half hour\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.base_addon_cat=\"\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = \"\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.search_string = urllib.unquote_plus(self.addon.getSetting('lastsearch'))\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginFanart(self.handle, image=self.get_resource(\"fanart.jpg\"))\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # LABELS\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_DESC = self.language(30700).encode('utf-8')\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH_NORES = self.language(30701).encode('utf-8')\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_ERROR = self.language(30702).encode('utf-8')\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_INFO = self.language(30713).encode('utf-8')\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SUCESS = self.language(30727).encode('utf-8')\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE_UNTILL = self.language(30703).encode('utf-8')\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_FILM_UNTILL = self.language(30704).encode('utf-8')\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_EPISODE = self.language(30705).encode('utf-8')\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEASON = self.language(30706).encode('utf-8')\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_MYPLAYLIST = self.language(30707).encode('utf-8')\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NOLOGIN = self.language(30708).encode('utf-8')\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_LOGIN_ERROR = self.language(30709).encode('utf-8')\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_NO_OPERATOR = self.language(30710).encode('utf-8')\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.LB_SEARCH = self.language(30711).encode('utf-8')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.use_content_type = \"episodes\"\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_original_names = self.addon.getSetting('origtitles')\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_original_names == \"true\":\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = True\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_original_names = False\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.force_scraper_names = self.addon.getSetting('forcescrap')\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.force_scraper_names == \"true\":\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = True\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.force_scraper_names = False\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.sensitive_debug = self.addon.getSetting('sensitivedebug')\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug == \"true\":\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = True\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.sensitive_debug = False\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.lograwdata = self.addon.getSetting('lograwdata')\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.lograwdata == \"true\":\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = True\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.lograwdata = False\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.sensitive_debug:\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "            ret = xbmcgui.Dialog().yesno(self.LB_INFO, self.language(30712).encode('utf-8'), self.language(30714).encode('utf-8'), self.language(30715).encode('utf-8'))\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not ret:\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit()\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.loggedin_headers = None  #DEFINE IN SPECIFIC HANDLER\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.API_PLATFORM = 'COMP'\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_resource(file):\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/'+file).decode('utf-8')\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_media_resource(file):\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return xbmc.translatePath(xbmcaddon.Addon().getAddonInfo('path')+'/resources/media/'+file).decode('utf-8')\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def log(self, msg, level=xbmc.LOGDEBUG):\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmc.log(self.DEBUG_ID_STRING + msg, level)\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def setDispCat(self, cur_loc):\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        xbmcplugin.setPluginCategory(self.handle, cur_loc)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.cur_loc = cur_loc\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def send_login_hbogo(self, url, headers, data, response_format='json'):\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN URL: \" + url)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"SEND LOGIN RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.post(url, headers=headers, data=data)\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN RETURNED STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if self.sensitive_debug:\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "                self.log(\"SEND LOGIN RETURNED RAW: \" + r.text.encode('utf-8'))\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except requests.RequestException as e:\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"SEND LOGIN ERROR: \" + repr(e))\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "            resp = {\"Data\": {\"ErrorMessage\": \"SEND LOGIN ERROR\"}, \"ErrorMessage\": \"SEND LOGIN ERROR\"}\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return resp\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get_from_hbogo(self, url, response_format='json'):\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"GET FROM HBO URL: \" + url)\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.log(\"GET FROM HBO RESPONSE FORMAT: \" + response_format)\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "            r = requests.get(url, headers=self.loggedin_headers)\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self.log(\"GET FROM HBO STATUS: \" + str(r.status_code))\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if response_format == 'json':\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return r.json()\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif response_format == 'xml':\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return ET.fromstring(r.text.encode('utf-8'))\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "python/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "HardcodedNonCryptoSecret",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ortoloco/ortoloco/commit/2bdc2a18ae07478b6b2ad481e6ad8ee43d99dd11?diff=split#diff-2c4d0fc3f973ca45b5be1e050f542f3fdf9f879073895c1ff6c8a127f9311b67L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "    General Settings\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "DEBUG = os.environ.get(\"JUNTAGRICO_DEBUG\", \"True\") == \"True\"\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "ALLOWED_HOSTS = ['my.ortoloco.ch']\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "DATA_UPLOAD_MAX_NUMBER_FIELDS = None\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "FILE_UPLOAD_PERMISSIONS = 0o444\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "ROOT_URLCONF = 'ortoloco.urls'\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "SITE_ID = 1\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "LOGIN_REDIRECT_URL = \"/my/home\"\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Python dotted path to the WSGI application used by Django's runserver.\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "WSGI_APPLICATION = 'ortoloco.wsgi.application'\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Make this unique, and don't share it with anybody.\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = 'd3w=vyfqpqmcj#&ge1d0$ch#ff7$qt#6z)lzqt=9pg8wg%d^%s'\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ.get('JUNTAGRICO_SECRET_KEY')\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/kirstykitto/CLAtoolkit/commit/57b0252012fd2bee6671734f8a598c47106dcb3c?diff=split#diff-fb10e8b863c0b9b7a10271f5cda36dbf1e7e3fe75586870b7547050c7e2e77fdL-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "from apiclient.discovery import build\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_ID = '775313004373-6nt8n91ih4g5qku95us9ceskbdlb6ure.apps.googleusercontent.com'\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "CLIENT_SECRET = 'MJHbk5HdDWmqyptU_ZZtBQNP'\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "SCOPE_YOUTUBE = 'https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner'\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "REDIRECT_URI = 'http://127.0.0.1:8000/dataintegration/ytAuthCallback'\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_VIDEO_BASE_URL = \"https://www.youtube.com/watch?v=\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_YT_CHANNEL_BASE_URL = \"https://www.youtube.com/channel/\"\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_NAME_YOUTUBE = \"YouTube\"\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_PLATFORM_URL_YOUTUBE = \"https://www.youtube.com\"\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "STR_OBJ_TYPE_VIDEO = 'Video'\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# For YouTube OAuth authentication\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "FLOW_YOUTUBE = OAuth2WebServerFlow(\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    client_id=CLIENT_ID,\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_secret=CLIENT_SECRET,\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    client_id=os.environ.get(\"YOUTUBE_CLIENT_ID\"),\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "    client_secret=os.environ.get(\"YOUTUBE_CLIENT_SECRET\"),\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hartwork/jawanndenn/commit/18eebc346ded81b839b1b2d38caf19927255afca?diff=split#diff-dd637aba286a0661c1b974283e708ce762bb3d24a707054e5b81495c1b7ab2b6L-1",
                    "lines": [
                      {
                        "line": "import os\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "from jawanndenn import DEFAULT_MAX_POLLS, DEFAULT_MAX_VOTES_PER_POLL\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "# Quick-start development settings - unsuitable for production\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "# SECURITY WARNING: keep the secret key used in production secret!\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "SECRET_KEY = 'ou@c@e2(9oh4*z9+tu0!)zf)j=_($#vmu36iflgy@g19+bkp-m'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SECRET_KEY = os.environ['JAWANNDENN_SECRET_KEY']\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 109,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "python/SSHHostKeyVerificationDisabled",
              "name": "SSHHostKeyVerificationDisabled",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSecure communication through SSH can take place when the client can establish the authenticity of the server. This is normally done with host key verification. Disabling host key verification opens the door for man-in-the-middle attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "SSHHostKeyVerificationDisabled",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-295"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "xml.etree.ElementTree.fromstring is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.fromstring](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/example-get-started/src/parse.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 20,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4be385751315a55716fcb1396024933133540f247c9a1d6f671520c272bffec1",
            "1": "486c3d07.66ee6f54.79e62dc9.139c59a8.424999a1.e9ac9b77.c532d34b.c01c06cb.486c3d07.66ee6f54.79e62dc9.139c59a8.424999a1.e9ac9b77.c532d34b.c01c06cb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/example-get-started/src/parse.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 20,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 534,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedNonCryptoSecret/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/client/test_minios3.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 46,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "940f179df27a28f070ceea60c192cfe2805bfd8a6b62da482bc8f1aec11f1c43",
            "1": "ef81ecda.53cabc12.028d70cd.139c59a8.cb60f8fa.ba14daf2.6e0d27eb.69dc60f8.ef81ecda.53cabc12.028d70cd.139c59a8.cb60f8fa.ba14daf2.6e0d27eb.69dc60f8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/client/test_minios3.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 46,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/client/test_minios3.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 46,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 384,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSHHostKeyVerificationDisabled",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "The paramiko.AutoAddPolicy policy used in set_missing_host_key_policy will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "markdown": "The {0} policy used in {1} will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[paramiko.AutoAddPolicy](0)",
              "[set_missing_host_key_policy](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmflib/storage_backends/sshremote_artifacts.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 13,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "19f86088ca62a2b7413ce0ed5efea1ebd3002c4b76e904c9d035748b352fed14",
            "1": "85e12fef.4d4abf70.79e62dc9.139c59a8.135a837d.ba14daf2.7da6a77b.a18c4377.d2f85842.4d4abf70.79e62dc9.139c59a8.135a837d.ba14daf2.7da6a77b.a18c4377"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmflib/storage_backends/sshremote_artifacts.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "cmflib/storage_backends/sshremote_artifacts.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 13,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 334,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 94,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 23,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Python",
            "files": 3,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}

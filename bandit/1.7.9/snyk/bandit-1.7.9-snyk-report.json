{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/InsecureTmpFile",
              "name": "InsecureTmpFile",
              "shortDescription": {
                "text": "Insecure Temporary File"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCreating temporary files can allow an attacker to guess the filename, and potentially create a file with the same filename with less restrictive access rights and gain access to the contents written by the application.\n\n## Best practices for prevention\n* Use more robust solutions to create file names like UUIDs or strong random values\n\n\n## References\n* [Insecure Temporary File](https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureTmpFile",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Unidata/netcdf4-python/commit/e387e6b06c76edab0cd038671eb0fe3d2382a218?diff=split#diff-ea4ea1c4ea1ccd3109f3550263c1d939d34af2560bb153e5441cb404ba92683aL-1",
                    "lines": [
                      {
                        "line": "file_name = tempfile.mktemp(\".nc\")\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "file_name = tempfile.NamedTemporaryFile(suffix='.nc', delete=False).name\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/infoxchange/docker-forklift/commit/d8746c278dad6849fe00b907aa443be4787ba3c1?diff=split#diff-caee650c3003842e9277d696a063ab724d42606e64cbf44cf1deb9d1d67d1d98L-1",
                    "lines": [
                      {
                        "line": "configuration_files = (tempfile.mktemp(),)\n",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "configuration_files = []\n",
                        "lineNumber": 147,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/angr/archr/commit/27ffb7624bb1dea1e84b67e6b0264354b6d460ee?diff=split#diff-adbff7308343d3f9a5a6ce9ab679bddaa42df7dc55ae919b4a4c074ae044ab03L-1",
                    "lines": [
                      {
                        "line": "import tempfile\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "@contextlib.contextmanager\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "def bundle(arrow_name):\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tbundle_path = tempfile.mktemp()\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbundle_path = tempfile.mkdtemp()\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 53,
                "cwe": [
                  "CWE-377"
                ]
              }
            },
            {
              "id": "python/paramiko~accept~all",
              "name": "paramiko~accept~all",
              "shortDescription": {
                "text": "paramiko~accept~all"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "paramiko~accept~all",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "python/TLS",
              "name": "TLS",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n## Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "TLS",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/datasift/datasift-python/commit/68b79d310d339299efd371290227d2aae29114dd?diff=split#diff-6f094bc945882296b54f345f7911a23bdb5e5d96e05500526583544ce7f2f955L-1",
                    "lines": [
                      {
                        "line": "self.poolmanager = PoolManager(num_pools=connections,\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               maxsize=maxsize,\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               block=block,\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               ssl_version=ssl.PROTOCOL_TLSv1)\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                               ssl_version=ssl.PROTOCOL_TLSv1_2)\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aaugustin/websockets/commit/17cb6949f40f84acc505c5b13f10837f5cb327e4?diff=split#diff-5b297d9683947cb4d111249f58b810df265ad8ee9e40d876bdb9354ec8d9e0f7L-1",
                    "lines": [
                      {
                        "line": "# Change to ssl.PROTOCOL_TLS_SERVER when dropping Python < 3.6.\n",
                        "lineNumber": 1106,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n",
                        "lineNumber": 1107,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n",
                        "lineNumber": 1106,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/qtumproject/qtum-electrum/commit/07e9415c2d020e5b67bee4c2e1c2520fadb43614?diff=split#diff-71efbdd323771f8b331e36a4145d27300f5f63ce0d6e8b766a7157bceb799006L-1",
                    "lines": [
                      {
                        "line": "    @staticmethod\n",
                        "lineNumber": 126,
                        "lineChange": "added"
                      },
                      {
                        "line": "    def get_ssl_context(cert_reqs, ca_certs):\n",
                        "lineNumber": 127,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, cafile=ca_certs)\n",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context.check_hostname = False\n",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context.verify_mode = cert_reqs\n",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context.options |= ssl.OP_NO_SSLv2\n",
                        "lineNumber": 132,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context.options |= ssl.OP_NO_SSLv3\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context.options |= ssl.OP_NO_TLSv1\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 135,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return context\n",
                        "lineNumber": 136,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "added"
                      },
                      {
                        "line": "    def get_socket(self):\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if self.use_ssl:\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "            cert_path = os.path.join(self.config_path, 'certs', self.host)\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if not os.path.exists(cert_path):\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_new = True\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "                s = self.get_simple_socket()\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if s is None:\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    return\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "                # try with CA first\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "                try:\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    s = ssl.wrap_socket(s, ssl_version=ssl.PROTOCOL_TLSv1_1, cert_reqs=ssl.CERT_REQUIRED, ca_certs=ca_path, do_handshake_on_connect=True)\n",
                        "lineNumber": 136,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    context = self.get_ssl_context(cert_reqs=ssl.CERT_REQUIRED, ca_certs=ca_path)\n",
                        "lineNumber": 148,
                        "lineChange": "added"
                      },
                      {
                        "line": "                    s = context.wrap_socket(s, do_handshake_on_connect=True)\n",
                        "lineNumber": 149,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 29,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "python/TooSmallRsaKeySizeUsed",
              "name": "TooSmallRsaKeySizeUsed",
              "shortDescription": {
                "text": "Cryptographic Issues"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nThe category of cryptographic issues refers not to a single specific vulnerability but rather to a wide range of problems surrounding the implementation of cryptography and related security algorithms in programs and web apps. For example, weaknesses in generating the pseudorandom numbers used to create session keys can make keys excessively easy for hackers to guess via brute-force attack algorithms. Another example is when developers use weak hashes to encode passwords and other confidential data, which can lead to collisions that ultimately bypass authentication techniques.\n\nEach individual weakness will obviously require a different strategy, but there are a few common best practices that can help avoid or mitigate attacks.\n\n## Best practices for prevention\n* Implement multi-factor authentication, which relies on two or more factors such as password and SMS confirmation, prior to permitting secure access.\n* Always use a strong hashing algorithm for tighter encryption. Consider an adaptive hash function with built-in salting, although these can have a negative impact on performance.\n* Check all certificate details to verify its validity-not only the issuing entity but expiry, domain, and all other factors.\n* Developers should familiarize themselves with deprecated security algorithms and implement schemes that require greater computational effort to resolve, therefore making them more resistant to current attacks.\n* Implement all software architecture and design around the principle of least privilege, releasing secure information only after authentication as needed for business purposes.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "TooSmallRsaKeySizeUsed",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/p2p-today/p2p-project/commit/?diff=split#diff-9e64092d7778bc35d3f11146076635aac20956e6b4f300bc1462e1e4b4b48534L-1",
                    "lines": [
                      {
                        "line": "myPub, myPriv = rsa.newkeys(1024)\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "myPub, myPriv = rsa.newkeys(2048)\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Psybernetics/Synchrony/commit/ae7fcb63018ac2bf07f8aed54ae68d25feb73a7d?diff=split#diff-85e0f2a6530e02572360b2e178047848f6d8a0d93cdc2e4e4f80cab54c10ce5aL-1",
                    "lines": [
                      {
                        "line": "key = RSA.generate(1024, random_generator)\n",
                        "lineNumber": 151,
                        "lineChange": "removed"
                      },
                      {
                        "line": "key = RSA.generate(4096, random_generator)\n",
                        "lineNumber": 151,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/laurivosandi/certidude/commit/59bedc1f162b1fd4c64191643a7ab392f9f23879?diff=split#diff-4e8715c7a425ee52e74b7df4d34efd32e8c92f3e60bd51bc2e1ad5943b82032eL-1",
                    "lines": [
                      {
                        "line": "    from cryptography import x509\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    from cryptography.hazmat.primitives.asymmetric import rsa, padding\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    from cryptography.hazmat.primitives import hashes, serialization\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    from cryptography.hazmat.backends import default_backend\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    from cryptography.x509.oid import NameOID\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    key = rsa.generate_private_key(\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public_exponent=65537,\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        key_size=1024,\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        backend=default_backend())\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    csr = x509.CertificateSigningRequestBuilder()\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if cn is not None:\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        csr = csr.subject_name(x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, cn)]))\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    buf = csr.sign(key, hashes.SHA256(), default_backend()\n",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ).public_bytes(serialization.Encoding.PEM)\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return buf\n",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    public_key, private_key = asymmetric.generate_pair('rsa', bit_size=2048)\n",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "    builder = CSRBuilder({ 'common_name': cn }, public_key)\n",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "    request = builder.build(private_key)\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return pem_armor_csr(request)\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 32,
                "cwe": [
                  "CWE-310"
                ]
              }
            },
            {
              "id": "python/HardcodedKey",
              "name": "HardcodedKey",
              "shortDescription": {
                "text": "Use of Hardcoded Cryptographic Key"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. The use of a hardcoded cryptographic key significantly increases the possibility that encrypted data may be recovered.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "HardcodedKey",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/mozilla/addons-server/commit/8cb81e32919ee8d8d903eaa5bf4ada17bc886e88?diff=split#diff-133326a76dde8b092110f440eed9db9515c8984bf11cea2799d746f772a2c2f0L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "from django.conf import settings\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "import commonware.log\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "from moz_inapp_pay.verify import verify_claims, verify_keys\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import jwt\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "log = commonware.log.getLogger('z.crypto')\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "secret = 'marketplaceSecret'  # This is a placeholder.\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "secret = settings.APP_PURCHASE_SECRET\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ONSdigital/eq-survey-runner/commit/76664977dd0b942ffaeaa86fc518121f1428f25e?diff=split#diff-de62df3777c1c5b82abdfee3d0ed836af1cc4dd0a8ba5a762ea03e15f2507860L-1",
                    "lines": [
                      {
                        "line": "self.secret = 'sharedsecret1999'\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "with open(\"rrm-public.pem\", \"rb\") as key_file:\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "    self.rrm_public_key = serialization.load_pem_public_key(\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "        key_file.read(),\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "        backend=self.backend\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "    )\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ismetacar/ertis/commit/abd0e9796100796ba34a632a4fe58feca0e33a0e?diff=split#diff-6cfa032d2b677885c8a669fb954ea8d292a99dd5bcf7d081f14bcc410790c27aL-1",
                    "lines": [
                      {
                        "line": "decoded = jwt.decode(token, key='123456789', algorithms='HS256')\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "decoded = jwt.decode(token, key=secret, algorithms='HS256')\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-321"
                ]
              }
            },
            {
              "id": "python/no~hostname~verification",
              "name": "no~hostname~verification",
              "shortDescription": {
                "text": "no~hostname~verification"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "no~hostname~verification",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "python/TarSlip",
              "name": "TarSlip",
              "shortDescription": {
                "text": "Arbitrary File Write via Archive Extraction (Tar Slip)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nZip Slip is a form of directory traversal that can be exploited by extracting files from an archive. The premise of the directory traversal vulnerability is that an attacker can gain access to parts of the file system outside of the target folder in which they should reside. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim’s machine. The vulnerability can also cause damage by overwriting configuration files or other sensitive resources, and can be exploited on both client (user) machines and servers.\n\n## Example\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "TarSlip",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/AlexKuhnle/ShapeWorld/commit/798a52fa5a7e01e6822dcf157600ec9b9b3e1350?diff=split#diff-be0584efe894029a1b0526edab5d2e8f7c2888ce3648e9ef4287200f61b6ac32L-1",
                    "lines": [
                      {
                        "line": "import tarfile\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "with tarfile.open(os.path.join(directory, 'resources', language + '.dat.tar.gz'), 'r:gz') as filehandle:\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        fileinfo = filehandle.getmember(language + '.dat')\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    except KeyError:\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        assert False\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    filehandle.extract(member=fileinfo)\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import gzip\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "with gzip.open(os.path.join(directory, 'resources', language + '.dat.gz'), 'rb') as gzip_filehandle:\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "    with open(os.path.join(directory, 'resources', language + '.dat'), 'wb') as filehandle:\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "        filehandle.write(gzip_filehandle.read())\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Hydrospheredata/kubeflow-workshop/commit/754457fccfe919cde60d4ca240f28b374f593334?diff=split#diff-8ac076fbde9e80ce02018a52a6ad9e873aa9be704e8dac4b8abc44b314b588b9L-1",
                    "lines": [
                      {
                        "line": "import os, gzip, tarfile, shutil, glob\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "import urllib, urllib.parse, urllib.request\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "def download_files(base_url, base_dir, files):\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\" Download required data \"\"\"\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "    downloaded = []\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.makedirs(base_dir, exist_ok=True)\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for file in files:\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print(f\"Started downloading {file}\", flush=True)\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "        download_url = urllib.parse.urljoin(base_url, file)\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "        download_path = os.path.join(base_dir, file)\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "        local_file, _ = urllib.request.urlretrieve(download_url, download_path)\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "        unpack_file(local_file, base_dir)\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return downloaded\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "def unpack_file(file, base_dir):\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\" Unpacking all compressed files. \"\"\"\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(f\"Unpacking {file}\", flush=True)\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if os.path.split(base_dir)[-1] == \"mnist\":\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "with gzip.open(file, 'rb') as f_in, open(file[:-3],'wb') as f_out:\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    shutil.copyfileobj(f_in, f_out)\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "if os.path.split(base_dir)[-1] == \"notmnist\":\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with tarfile.open(file) as f_tar: \n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f_tar.extractall(base_dir)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/lpcinelli/foreground-segmentation/commit/17489eb13e3d50a2b2c373258d05a6c0160fd4f5?diff=split#diff-0127893470062e012505a30a335e174e59d3db3e164684944b6a83e57cdb6cb2L-1",
                    "lines": [
                      {
                        "line": "import tarfile\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import urllib\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "from zipfile import ZipFile\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "import glob2 as glob\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import numpy as np\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import pandas as pd\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "from PIL import Image\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "from tqdm import tqdm\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "URL = \"http://wordpress-jodoin.dmi.usherb.ca/static/dataset/dataset2014.zip\"\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "MD5 = \"d86332547edbc25f4ddbcd49f92413cf\"\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "BASE_PATH = os.path.dirname(os.path.abspath(__file__))\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "def md5file(fname):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    hash_md5 = hashlib.md5()\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    with open(fname, \"rb\") as f:\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for chunk in iter(lambda: f.read(4096), b\"\"):\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "            hash_md5.update(chunk)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return hash_md5.hexdigest()\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "def download(url, md5sum, target_dir):\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Download file from url to target_dir, and check md5sum.\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Adapted from PaddlePaddle/DeepSpeech repo\"\"\"\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if not os.path.exists(target_dir): os.makedirs(target_dir)\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    filepath = os.path.join(target_dir, url.split(\"/\")[-1])\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "if not (os.path.exists(filepath) and md5file(filepath) == md5sum):\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Downloading %s ...\" % url)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system(\"wget -c \" + url + \" -P \" + target_dir)\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"\\nMD5 Chesksum %s ...\" % filepath)\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if not md5file(filepath) == md5sum:\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise RuntimeError(\"MD5 checksum failed.\")\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print(\"File exists, skip downloading. (%s)\" % filepath)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return filepath\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "def unpack(filepath, target_dir, rm_tar=False):\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\"Unpack the file to the target_dir.\"\"\"\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    print(\"Unpacking %s ...\" % filepath)\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    tar = tarfile.open(filepath)\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    tar.extractall(target_dir)\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    tar.close()\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if rm_tar == True:\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if os.path.exists(os.path.join(target_dir, 'dataset')):\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "        print(\"Skip unpacking. Data already extracted at %s.\" % os.path.join(\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "            target_dir, 'dataset'))\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "    print(\"Unpacking {}...\".format(filepath))\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "    with ZipFile(filepath) as fzip:\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "        fzip.extractall(target_dir)\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if remove:\n",
                        "lineNumber": 78,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 49,
                "cwe": [
                  "CWE-22"
                ]
              }
            },
            {
              "id": "python/InsecureXmlParser",
              "name": "InsecureXmlParser",
              "shortDescription": {
                "text": "Insecure Xml Parser"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* Avoid using vulnerable APIs\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.\n\n\n## References\n* [XML vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureXmlParser",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DefectDojo/django-DefectDojo/commit/3bb6173ce1db621ebd99a1cb361e7da7cbaf1925?diff=split#diff-ef1e087c75390ecb8efe1b3990802470d172cb27c62e76392ba87bdae855ca2cL-1",
                    "lines": [
                      {
                        "line": "from xml.dom import NamespaceErr\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from xml.etree import ElementTree\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from defusedxml.dom import NamespaceErr\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "from defusedxml.etree import ElementTree\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "from datetime import datetime\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "from dojo.models import Finding\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "class CheckmarxXMLParser(object):\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, filename, test):\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cxscan = ElementTree.parse(filename)\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oVirt/vdsm/commit/bebc0dff76115e11a0d8d3be2971d17dd2898711?diff=split#diff-c8191175dae739bf1111cc700f07f7d2ec4e6254ab286559bda259ea3abec251L-1",
                    "lines": [
                      {
                        "line": "actual = ET.fromstring(xml)\n",
                        "lineNumber": 308,
                        "lineChange": "removed"
                      },
                      {
                        "line": "actual = xmlutils.fromstring(xml)\n",
                        "lineNumber": 308,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GovReady/compliancelib-python/commit/ba892b563bb4c329387a983109caa84382eea0e8?diff=split#diff-50428a83950457170bb17ab641987e84903af63e6263dbf3940fb12d17ea0359L-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import defusedxml.ElementTree as ET\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "class NIST800_53(object):\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"represent 800-53 security controls\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, id):\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.xmlfile = os.path.join(os.path.dirname(__file__), 'data/800-53-controls.xml')\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.id = id\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if \"(\" in self.id:\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._load_control_enhancement_from_xml()\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            self._load_control_from_xml()\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # split description\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.set_description_sections()\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self._get_control_json_dict()\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def _load_control_from_xml(self):\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"load control detail from 800-53 xml using a pure python process\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tree = ET.parse(self.xmlfile)\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "python/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/kiwitcms/Kiwi/commit/e17c071623e055c24a0fdf203991819d446c8f09?diff=split#diff-aa51d9851848643981397fb834fa01bae8fba8ff6f1af7bcd7c711b007a0433aL-1",
                    "lines": [
                      {
                        "line": "md5 = hashlib.md5()\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "md5.update(value.encode(\"UTF-8\"))\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return md5.hexdigest()\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "_checksum = hashlib.sha256()\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "_checksum.update(value.encode(\"UTF-8\"))\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "return _checksum.hexdigest()\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mozilla/amo-validator/commit/1557fa06a96966a6fbacd1733383ae83ad3b0614?diff=split#diff-98ef2e4adee9bbea1bbbd8f184af864ebe80f96ee44e6729e6c74b3ff9aa3147L-1",
                    "lines": [
                      {
                        "line": "hash = hashlib.sha1(open(path).read()).hexdigest()\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hash = hashlib.sha256(open(path).read()).hexdigest()\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ssfdust/full-stack-flask-smorest/commit/1b364164630cade9a86fc295850c7781fd4a7241?diff=split#diff-c14286914504e87a0adbd9123450ec1bb5484583d1db033876f3df4159371531L-1",
                    "lines": [
                      {
                        "line": "from hashlib import md5\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from app.utils.secure import encrypt_str\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "class TestAuth():\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def test_auth(self, flask_app, flask_app_client, regular_user):\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "        user_hash = md5(regular_user.email.encode('utf-8')).hexdigest()\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        user_hash = encrypt_str(regular_user.email)\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 144,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "python/Jinja2AutoEscapeFalse",
              "name": "Jinja2AutoEscapeFalse",
              "shortDescription": {
                "text": "Jinja auto-escape is set to false."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nJinja2 is a python templating library that can be configured to escape values and avoid XSS vulnerabilities. However, the library by default sets the autoescaping to false.\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Jinja2AutoEscapeFalse",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/remcoder/Pxxl.js/commit/707b0de4c23a0b62b3367dd7515e9df08c0a85c1?diff=split#diff-68f63e8cccbcb05c3a3fe3cb8f8a020e0b62330133bce1aacdca14328932410aL-1",
                    "lines": [
                      {
                        "line": "env = Environment(loader=FileSystemLoader('templates'))\n",
                        "lineNumber": 1,
                        "lineChange": "removed"
                      },
                      {
                        "line": "env = Environment(loader=FileSystemLoader('templates'), \n",
                        "lineNumber": 1,
                        "lineChange": "added"
                      },
                      {
                        "line": "  extensions=['jinja2.ext.autoescape'],\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "  autoescape=True)\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GoogleCloudPlatform/titan/commit/0bf5c35ddc04b1020a14ed910af41e9ae37b1c1b?diff=split#diff-c11ef690b2d17d9c12d561977691c7d5b8f04c24db5a1f2f7266954296169432L-1",
                    "lines": [
                      {
                        "line": "jinja_environment = jinja2.Environment(\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)), autoescape=True)\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rsrdesarrollo/sarna/commit/8d4e57c9e3b472e2db8c63d9da194f048e43ee6a?diff=split#diff-c06d497ff6c790308e10bf3e7755c9ef6d603a65b5ead96bdbb3a6d6a7d81605L-1",
                    "lines": [
                      {
                        "line": "jinja2_env = jinja2.Environment()\n",
                        "lineNumber": 104,
                        "lineChange": "removed"
                      },
                      {
                        "line": "jinja2_env = jinja2.Environment(\n",
                        "lineNumber": 105,
                        "lineChange": "added"
                      },
                      {
                        "line": "    autoescape=True\n",
                        "lineNumber": 106,
                        "lineChange": "added"
                      },
                      {
                        "line": ")\n",
                        "lineNumber": 107,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 44,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "python/SSHHostKeyVerificationDisabled",
              "name": "SSHHostKeyVerificationDisabled",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSecure communication through SSH can take place when the client can establish the authenticity of the server. This is normally done with host key verification. Disabling host key verification opens the door for man-in-the-middle attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "SSHHostKeyVerificationDisabled",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/openstack/cinder/commit/1eda138be81b2405969b80c00f30ba237e250fcd?diff=split#diff-e50d17e447ea75009d7bb9d1d07aa9816b28de7a7edd88164b9ca243f9146017L-1",
                    "lines": [
                      {
                        "line": "    def create_ssh_client(self, **kwargs):\n",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "        ssh_client = paramiko.SSHClient()\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "        known_hosts_file = kwargs.get('known_hosts_file', None)\n",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if known_hosts_file is None:\n",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "            ssh_client.load_system_host_keys()\n",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "            ssh_client.load_host_keys(known_hosts_file)\n",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "        missing_key_policy = kwargs.get('missing_key_policy', None)\n",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if missing_key_policy is None:\n",
                        "lineNumber": 70,
                        "lineChange": "added"
                      },
                      {
                        "line": "            missing_key_policy = paramiko.WarningPolicy()\n",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "        ssh_client.set_missing_host_key_policy(missing_key_policy)\n",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return ssh_client\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/eNMS-automation/eNMS/commit/4286580928f6e99afaa5f69441af3bc4ab867a17?diff=split#diff-6766261b13e10f3f20c5f2e7ddc7615b4d1155692e7c330b5deb2717dc7d2361L-1",
                    "lines": [
                      {
                        "line": "    def job(self, device, _):\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        path_backup = Path.cwd() / 'logs' / 'job_logs'\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        now = strip_all(str(datetime.now()))\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        path_dir = path_backup / f'logs_{now}'\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        source = path_backup / f'logs_{now}.tgz'\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        makedirs(path_dir)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        for job in fetch_all('Job'):\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            with open(path_dir / f'{job.name}.json', 'w') as log_file:\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                dump(job.logs, log_file)\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        with open_tar(source, 'w:gz') as tar:\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            tar.add(path_dir, arcname='/')\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ssh_client = SSHClient()\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ssh_client.set_missing_host_key_policy(AutoAddPolicy())\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ssh_client.connect(\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            device.ip_address,\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            username=device.username,\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            password=device.password,\n",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            look_for_keys=False\n",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        )\n",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        destination = f'{self.destination_path}/logs_{now}.tgz'\n",
                        "lineNumber": 50,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        self.transfer_file(ssh_client, source, destination)\n",
                        "lineNumber": 51,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ssh_client.close()\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if self.delete_folder:\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            rmtree(path_dir)\n",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if self.delete_archive:\n",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            remove(source)\n",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return {\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Debian/dput-ng/commit/1b3e96caf3292de3205cc0c795fbf461f8c167d7?diff=split#diff-d208c024ecd7acd5c19315c5dbf05ee2635baf12a4307b94e74ac01e6fabcf3bL-1",
                    "lines": [
                      {
                        "line": "self._sshclient.load_system_host_keys()\n",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "self._sshclient.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if 'globalknownhostsfile' in o:\n",
                        "lineNumber": 118,
                        "lineChange": "added"
                      },
                      {
                        "line": "        for gkhf in o['globalknownhostsfile'].split():\n",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "                if os.path.isfile(gkhf):\n",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        self._sshclient.load_system_host_keys(gkhf)\n",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "else:\n",
                        "lineNumber": 122,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if os.path.isfile(\"/etc/ssh/ssh_known_hosts\"):\n",
                        "lineNumber": 123,
                        "lineChange": "added"
                      },
                      {
                        "line": "                self._sshclient.load_system_host_keys(\"/etc/ssh/ssh_known_hosts\")\n",
                        "lineNumber": 124,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if os.path.isfile(\"/etc/ssh/ssh_known_hosts2\"):\n",
                        "lineNumber": 125,
                        "lineChange": "added"
                      },
                      {
                        "line": "                self._sshclient.load_system_host_keys(\"/etc/ssh/ssh_known_hosts2\")\n",
                        "lineNumber": 126,
                        "lineChange": "added"
                      },
                      {
                        "line": "if 'userknownhostsfile' in o:\n",
                        "lineNumber": 127,
                        "lineChange": "added"
                      },
                      {
                        "line": "        for u in o['userknownhostsfile'].split():\n",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "                # actually, ssh supports a bit more than ~/,\n",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "                # but that would be a task for paramiko...\n",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "                ukhf = os.path.expanduser(u)\n",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "                if os.path.isfile(ukhf):\n",
                        "lineNumber": 132,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        self._sshclient.load_host_keys(ukhf)\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "else:\n",
                        "lineNumber": 134,
                        "lineChange": "added"
                      },
                      {
                        "line": "        for u in ['~/.ssh/known_hosts2','~/.ssh/known_hosts']:\n",
                        "lineNumber": 135,
                        "lineChange": "added"
                      },
                      {
                        "line": "                ukhf = os.path.expanduser(u)\n",
                        "lineNumber": 136,
                        "lineChange": "added"
                      },
                      {
                        "line": "                if os.path.isfile(ukhf):\n",
                        "lineNumber": 137,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        # Ideally, that should be load_host_keys,\n",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        # so that the known_hosts file can be written\n",
                        "lineNumber": 139,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        # again. But paramiko can destroy the contents\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        # or parts of it, so no writing by using\n",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        # load_system_host_keys here, too:\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        self._sshclient.load_system_host_keys(ukhf)\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": "self._sshclient.set_missing_host_key_policy(AskToAccept(self))\n",
                        "lineNumber": 144,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "PT",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Guad/fuwa/commit/955baf1c0e8824f08a96e48a350ee3cd0e3c5493?diff=split#diff-568470d013cd12e4f388206520da39ab9a4e4c3c6b95846cbc281abc1ba3c959L-1",
                    "lines": [
                      {
                        "line": "import string, random\n",
                        "lineNumber": 1,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import string, random, hashlib, os\n",
                        "lineNumber": 1,
                        "lineChange": "added"
                      },
                      {
                        "line": "from werkzeug import secure_filename\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "#Load config file\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "config = {}\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "with open('config.ini', 'r') as file:\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tfor line in file.read().splitlines():\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tline = line.split('==')\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tconfig[line[0]] = line[1]\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "app = flask.Flask(__name__) #Initialize our application\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024 #Set the upload limit to 10MiB\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def genHash(seed): #Generate five letter filenames for our files\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    base = string.ascii_lowercase+string.digits \n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    random.seed(seed)\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "    hash_value = \"\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for i in range(5):\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        hash_value += random.choice(base)\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return hash_value\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/', methods=['GET', 'POST'])\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "def index():\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif flask.request.method == 'POST':\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\"\"\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tFile upload happens here.\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tWe get your filename and convert it to our hash with your extension.\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tThen we redirect to the file itself.\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\"\"\"\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tf = flask.request.files['file']\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\textension = f.filename.split('.')[-1]\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tfilename = genHash(f.filename) + '.' + extension\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tf.save('static/files/%s' % filename)\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tprint 'Uploaded file \\'%s\\'' % filename #Log what file was uploaded\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn flask.redirect(flask.url_for('getFile', filename=filename))\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thasher = hashlib.md5() \t\t\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tbuf = f.read()\t\t   \t\t\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tf.seek(0) #Set cursor back to position 0 so we can read it again in the save function.\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\t\t\t\t\t# We hash the file to get its filename.\t   \t\t\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\t\t\t\t\t\t\t# So that we can upload two different images with the same filename,\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\thasher.update(buf)\t   \t\t# But not two same images with different filenames.\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tdirname = genHash(hasher.hexdigest())\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\tif not os.path.exists(\"static/files/%s\" % dirname): # Check if the folder already exists\n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tos.mkdir('static/files/%s' % dirname) #Make it\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tf.save('static/files/%s/%s' % (dirname, secure_filename(f.filename)))\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tprint 'Uploaded file \\'%s\\'' % secure_filename(f.filename) #Log what file was uploaded\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn flask.redirect(flask.url_for('getFile', dirname=dirname,filename=secure_filename(f.filename)))\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\telse:\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\tflask.flash('File already exists in %s!' % dirname) #Display a message for the user.\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn flask.redirect(flask.url_for('index'))\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fonttools/fonttools/commit/0b99c8968e04e2e36c6c46ad8bb1a550d25969b4?diff=split#diff-e8b6161353c7ce5b13e62df1da329a85de0ef80ce8f039d283c25bf892b2b600L-1",
                    "lines": [
                      {
                        "line": "os.system('gzip -9v %s' % tar)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "os.rename(gz, tgz)\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "if destdir:\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tprint \"destination directory:\", destdir\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tos.system('mv %s %s' % (gz, destdir))\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Chenwe-i-lin/KnowledgeFruits/commit/?diff=split#diff-ab8c675e5b4b07c550455b0884835f1df471bb69ad7142f6ad43b26cf33eb4e6L-1",
                    "lines": [
                      {
                        "line": "base_path = os.path.abspath(os.path.dirname(__file__))\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "base_path_for_data =  os.path.join(base_path,'data/texture')\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "file = os.path.join(base_path_for_data, image + '.png')\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "if os.path.abspath(file).startswith(base_path_for_data):\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "with open(os.getcwd() + \"/data/texture/\" + image + '.png', \"rb\") as f:\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 36,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/InsecureFilePermissions",
              "name": "InsecureFilePermissions",
              "shortDescription": {
                "text": "Insecure File Permissions"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nEnsuring correct file and directory permissions is one of the most critical security tasks for any organization. It takes careful planning and ongoing tracking for every single user (or group of users) within the application. When this weakness is present, it means that due to a misconfiguration, the wrong permission level is applied for a particular resource. This could give a user with a relatively low access level (such as any authenticated user or even an anonymous user) access to sensitive information. Once an attacker gains access, they can delete or modify it, sell it, or hold it for ransom. They can even potentially run executable files on the server.\n\nIn certain regulated industries such as healthcare and finance, unpatched vulnerabilities stemming from this weakness can lead to fines for non-compliance. And in all cases, breaches due to this weakness can quickly lead to a loss of reputation and low user confidence in the security of the application. Therefore, careful design and planning are essential for validating security policies and ensuring their implementation and maintenance.\n\n## Best practices for prevention\n* Classify application functionality according to privilege level: anonymous, normal, privileged, and administrative; then define user groups and roles and the access required by each to create a comprehensive security policy that is simpler to implement.\n* Make no assumptions about the environment in which the application will run (for example, single user, on-premises, user types, UI, etc.).\n* Never create applications with loose default security settings. Often, businesses rely on administrators to tighten security following installation; this is a weak security tactic. Implement restrictive security settings by default and open access to securely authenticated users as needed.\n* Ensure secure-channel communication for all API-based interactions.\n* Implement multifactor authentication and familiarize all developers with safe cookie-handling practices to ensure session-level security.\n* Encrypt all stored sensitive data such as credentials or configuration information to minimize the potential for harm if this data is breached.\n* Run code in a sandbox or jail, if possible; however, this approach does not prevent all problems and should be used in combination with some or all of the above.\n* Verify that all configuration files, executables, and libraries are readable and writable only by the software administrator.\n* Implement thorough static and dynamic test strategies (both manual and automatic) to flag permission problems wherever possible (bearing in mind that few tests offer complete coverage).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureFilePermissions",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Juniper/jsnapy/commit/f07761e533c2daa0040d3e978bcf22b0b3bfe6ba?diff=split#diff-60f61ab7a8d1910d86d9fda2261620314edcae5894d5aaa236b821c7256badd7L-1",
                    "lines": [
                      {
                        "line": "mode = 0o777\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "mode = 0o700\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "install.run(self)\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "os.chmod(dir_path, mode)\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Scan-o-Matic/scanomatic/commit/f56e6426036e11cee248fe25dd455fc91251a6f0?diff=split#diff-30b4f76359bc943319fd211c442fa1c397044dc1d9bfb56d89fbb6c419aa13a5L-1",
                    "lines": [
                      {
                        "line": "os.chmod(targetBase, 0777)\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "os.chmod(targetBase, 0755)\n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/conix-security/BTG/commit/ce09f9b900c570205f114ce3e978af99d495f283?diff=split#diff-b43667d3bfec4e6f4fa0a653fcd90ff6825621bf5a9420c97ece4a1058b6b122L-1",
                    "lines": [
                      {
                        "line": "chmod(log_path, 0o777)\n",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "chmod(log_path, 0o666)\n",
                        "lineNumber": 82,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 30,
                "cwe": [
                  "CWE-732"
                ]
              }
            },
            {
              "id": "python/InsecureCipher",
              "name": "InsecureCipher",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n## Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureCipher",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/timgabets/pythales/commit/df38b3cf770162ae06095c7e827caca329447cd3?diff=split#diff-d67ec80a1d928d7931db8f251200e9c253baaff9f436dc6033bd7f8c010edb45L-1",
                    "lines": [
                      {
                        "line": "from pynblock.tools import raw2str, raw2B, B2raw, xor, get_visa_pvv, get_digits_from_string\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "def get_key_check_value(key, kcv_length=6):\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Get DES key check value\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \"\"\"\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    cipher = DES3.new(B2raw(key), DES3.MODE_ECB)\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    encrypted = raw2B(cipher.encrypt(B2raw(b'00000000000000000000000000000000')))\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return encrypted[:kcv_length]\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from pynblock.tools import raw2str, raw2B, B2raw, xor, get_visa_pvv, get_visa_cvv, get_digits_from_string, key_CV\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mcnemesis/globalclipboard/commit/c2f90c2e5fdce3c606715e1847037d21aef0f2b9?diff=split#diff-a2df5abffb20fa950f91bbca3038bc7bb1942d6b58252cfa03ad5e1ac294302fL-1",
                    "lines": [
                      {
                        "line": "from Crypto.Cipher import DES3\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from Crypto import Random\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import gnupg\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "import random\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from cStringIO import StringIO\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "except:\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    from StringIO import StringIO\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "VERSION = '1.0'\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "CONF_FILE='~/.global_clip/client.conf'\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "#----------- helpers --------------------\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "def encrypt_file(in_s, out_s, chunk_size, key, iv):\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    des3 = DES3.new(key, DES3.MODE_CFB, iv)\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while True:\n",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        chunk = in_s.read(chunk_size)\n",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if len(chunk) == 0:\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            break\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        elif len(chunk) % 16 != 0:\n",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            chunk += ' ' * (16 - len(chunk) % 16)\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        out_s.write(des3.encrypt(chunk))\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "def decrypt_file(in_s, out_s, chunk_size, key, iv):\n",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    des3 = DES3.new(key, DES3.MODE_CFB, iv)\n",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while True:\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        chunk = in_s.read(chunk_size)\n",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if len(chunk) == 0:\n",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            break\n",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        out_s.write(des3.decrypt(chunk))\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "def get_random_str(alphabet=None):\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "    al = list(alphabet or 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_|{()-+!~\\\\/*&^%$#@')\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "    random.shuffle(al)\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "    p = ''.join(al[0:random.randrange(1,len(al)/2)])\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return p\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "def encrypt_file(in_s, out_s,email):\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    gpg = gnupg.GPG(gnupghome=os.path.expanduser(GPG_HOME))\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    unencrypted_string = in_s.read()\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "    encrypted_data = gpg.encrypt(unencrypted_string,email,always_trust=True)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if encrypted_data.ok:\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "        encrypted_string = str(encrypted_data)\n",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "        out_s.write(encrypted_string)\n",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "        raise BaseException(\"Encrption Failed!\\n\\n%s\" % encrypted_data.stderr)\n",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "def decrypt_file(in_s, out_s, mypassword):\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "    gpg = gnupg.GPG(gnupghome=os.path.expanduser(GPG_HOME))\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "    encrypted_string = in_s.read()\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "    decrypted_data = gpg.decrypt(encrypted_string, passphrase=mypassword,always_trust=True)\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if decrypted_data.ok:\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "        out_s.write(decrypted_data.data)\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "    else:\n",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        raise Exception(\"Decryption Failed!\\n\\n%s\" % decrypted_data.stderr)\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/v3aqb/fwlite/commit/8cbb16045c238bc004168626362744257dad879f?diff=split#diff-745174ccba9d8b45c0784054fd02aab2bb6860824f537aac1172b96020251faeL-1",
                    "lines": [
                      {
                        "line": "    return Cipher(algorithms.SEED(self.key), modes.CFB(self.iv), default_backend())\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if self.method.startswith('rc4'):\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return Cipher(algorithms.ARC4(self.key), None, default_backend())\n",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return Cipher(algorithms.SEED(self.key), mode, default_backend())\n",
                        "lineNumber": 54,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "python/NoHardcodedPasswords",
              "name": "NoHardcodedPasswords",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "NoHardcodedPasswords",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/badoo/pyexasol/commit/2dd19536a268bc5f0f01ae24fb6a09daa77a1834?diff=split#diff-8cf1c2175341bd9af5c9e80eba3597eac42d73c57fb275edf6ba6687af3061cbL-1",
                    "lines": [
                      {
                        "line": "dsn = 'exasol-dev.mlan:8563'\n",
                        "lineNumber": 0,
                        "lineChange": "removed"
                      },
                      {
                        "line": "user = 'SYS'\n",
                        "lineNumber": 1,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password = 'exasol'\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "schema = 'PYEXASOL_TEST'\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 0,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "added"
                      },
                      {
                        "line": "dsn = os.environ.get('EXAHOST', 'exasol-dev.mlan:8563')\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "user = os.environ.get('EXAUID', 'SYS')\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "password = os.environ.get('EXAPWD', 'exasol')\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "schema = os.environ.get('EXASCHEMA', 'PYEXASOL_TEST')\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dashpay/sentinel/commit/15cd95d9662b726301c46efcdfe5738cbf22614f?diff=split#diff-64b1ab22a02a67f026631c29469d2eef15f09367f37f6127e29b09c9e0578a45L-1",
                    "lines": [
                      {
                        "line": "db = MySQLDatabase('sentinel', host='127.0.0.1', user='dashdrive', passwd='dashdrive')\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "import os\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "import sys\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "sys.path.append( os.path.join( os.path.dirname(__file__), '..' ) )\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "import config\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "env = os.environ.get('SENTINEL_ENV') or 'production'\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "db_cfg = config.db[env]\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "dbname = db_cfg.pop('database')\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "db = MySQLDatabase(dbname, **db_cfg)\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ArRosid/network-automation-book/commit/0886b388e65e7d4735d90b2f6c4cc107363f2676?diff=split#diff-8ab08bbd4468a1518f5de92d25a497a3b60b3c8f4a435627251d33ed113b83d7L-1",
                    "lines": [
                      {
                        "line": "import getpass\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "ip_address = \"192.168.99.1\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username = \"user\"\n",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password = \"user123\"\n",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ip_address = raw_input(\"Masukkan IP Address: \")\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "username = raw_input(\"Masukkann Username: \")\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "password = getpass.getpass()\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 55,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "python/ssl~wrap_socket~without~protocol",
              "name": "ssl~wrap_socket~without~protocol",
              "shortDescription": {
                "text": "Missing protocol in ssl.wrap_socket"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCalling `ssl.wrap_socket` without specifying the `ssl_version` results in using a protocol version that is deprecated due to no longer being strong enough.\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\n\n\n## Best practices for prevention\n* Avoid calling `ssl.wrap_socket` without specifying the `ssl_version`\n\n\n## References\n\n* [ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "ssl~wrap_socket~without~protocol",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/eerimoq/simba/commit/9543eb6a9a3f2c239db3be8dae7d0ad43f310bd6?diff=split#diff-d5b225ccb0485a59aefcad124590095f890ca7e40f3a2724fec56db1d6fc9011L-1",
                    "lines": [
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "def recvall(sock, length):\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "    buf = b''\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "    while len(buf) < length:\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "        byte = sock.recv()\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if not byte:\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "            break\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "        buf += byte\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return buf\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "context.load_cert_chain(certfile=\"server.crt\",\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "                        keyfile=\"server.key\")\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mozilla/pluotsorbet/commit/5467504f196228a2db798e1d7e631b019048f186?diff=split#diff-f125e780e724f8101396135d6dabcc95ffc659d120e8c7694f8d7145b50da0d5L-1",
                    "lines": [
                      {
                        "line": "httpd.socket = ssl.wrap_socket(httpd.socket, certfile='cert.pem', server_side=True)\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "httpd.socket = ssl.wrap_socket(httpd.socket,\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "                               server_side=True,\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "                               certfile='cert.pem',\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "                               keyfile='cert.pem',\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "                               ssl_version=ssl.PROTOCOL_SSLv3)\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Debian/debile/commit/29696f0a491c938a5de2d3b2ecdd31c3e824a312?diff=split#diff-9592c0238cfde6b683ca5f59a078d2c282781c7f18b4b7356b8f89783361f983L-1",
                    "lines": [
                      {
                        "line": "self.sock = ssl.wrap_socket(\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sock, self.key_file, self.cert_file,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ca_certs=self.ca_certs, cert_reqs=cert_reqs,\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    do_handshake_on_connect=True\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    do_handshake_on_connect=True, ssl_version=ssl.PROTOCOL_TLSv1,\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 37,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "python/BindToAllNetworkInterfaces",
              "name": "BindToAllNetworkInterfaces",
              "shortDescription": {
                "text": "Binding to all network interfaces may open service to unintended traffic"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nBinding to `0.0.0.0` makes a server listen on all network interfaces, which may open the service to unintended traffic.\n\n## Best practices for prevention\n * Allow binding on a specific interface instead of `0.0.0.0`",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "BindToAllNetworkInterfaces",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/cornell-cup/cs-minibot-platform/commit/2317a0b72e8cb14d53506d015044be999e4dbcad?diff=split#diff-23c38129eb89a21f705d5b57b5e255001e6cff8499c452eb44840c477528108eL-1",
                    "lines": [
                      {
                        "line": "ip = \"0.0.0.0\"\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ip = \"127.0.0.1\"\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "serverSocket.bind( (ip, serverPort) )\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/baohaojun/system-config/commit/80a71b1231bfe046f6f819369d5e2e2b9c4fc377?diff=split#diff-3852660d647416a008adf3e152cf843bf94e474c8c4ee1914d7cdca11e962262L-1",
                    "lines": [
                      {
                        "line": "ime_listen_sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ime_listen_sock.bind(('0.0.0.0', 12345))\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "#ime_listen_sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "ime_listen_sock.bind(('127.0.0.1', 12345))\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tijme/angularjs-csti-scanner/commit/4c755269164b310ab0d564fa5745af361c7a9be9?diff=split#diff-220399d68270a7522a6b9e26365de52571020d81208f4879470f83725fe7d13eL-1",
                    "lines": [
                      {
                        "line": "        self.sock.bind((\"0.0.0.0\", 0))\n",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        self.sock.bind((\"127.0.0.1\", 0))\n",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "        self.sock.listen(1)\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.thread = threading.Thread(target=self.__handler)\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.thread.start()\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.url = self.sock.getsockname()[0] + \":\" + str(self.sock.getsockname()[1])\n",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        self.url = \"127.0.0.1:\" + str(self.sock.getsockname()[1])\n",
                        "lineNumber": 63,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 46,
                "cwe": [
                  "CWE-284"
                ]
              }
            },
            {
              "id": "python/RunWithDebugTrue",
              "name": "RunWithDebugTrue",
              "shortDescription": {
                "text": "Debug Mode Enabled"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen debugging, it may be necessary to report detailed information to a developer. However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "RunWithDebugTrue",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/youtify/youtify/commit/a3e91bcf71f2fca4e167bc86d15a2adb4a5323c1?diff=split#diff-0fa9312f4a91eb730539f65a0974930d40238ad957764ff0d987c31e9b698875L-1",
                    "lines": [
                      {
                        "line": "import webapp2\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "from google.appengine.ext.webapp import template\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "from google.appengine.ext.webapp import util\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "class MinimizerHandler(webapp2.RequestHandler):\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def get(self):\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "        path = os.path.join(os.path.dirname(__file__), 'html', 'minimizer.html')\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.response.headers['Content-Type'] = 'text/html; charset=utf-8';\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.response.out.write(template.render(path, {\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }))\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "app = webapp2.WSGIApplication([\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ('/.*', MinimizerHandler),\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ], debug=True)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ], debug=False)\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/derolf/transcoder/commit/21126e722f6a36963f3ee0a00a85502e9b7a5646?diff=split#diff-5dd2ce715c71935cc12e2b05af1a76efbb5f720fa99d70328b36fb2b9460864cL-1",
                    "lines": [
                      {
                        "line": "from flask import Flask, request, Response, abort, send_file, jsonify\n",
                        "lineNumber": 0,
                        "lineChange": "none"
                      },
                      {
                        "line": "from awake import wol\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "import os, subprocess, re\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "import config as C\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "import library as L\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "import web\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "import restlibrary\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "app = Flask(__name__)\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "restlibrary.init( app )\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "web.init( app )\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.run( host=\"0.0.0.0\",port=C.port, threaded=True, debug=True )\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.run( host=\"0.0.0.0\",port=C.port, threaded=True, debug=False )\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/datacenter/acitoolkit/commit/f0f9b2cd94b8692c3c15eee3954781f0e0bb0587?diff=split#diff-49a9b8eb9a3986d165fea2b6e1d0c47801ca6fef3700465221e43dde511863c7L-1",
                    "lines": [
                      {
                        "line": "app.run(debug=True, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 53,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.run(debug=False, host=args.ip, port=int(args.port))\n",
                        "lineNumber": 53,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 30,
                "cwe": [
                  "CWE-489"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "CommandInjection",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ucbvislab/speecheditor/commit/70f2fb2290a28a1db5e65755c3a8307ef538ea99?diff=split#diff-568470d013cd12e4f388206520da39ab9a4e4c3c6b95846cbc281abc1ba3c959L-1",
                    "lines": [
                      {
                        "line": "subprocess.call('cp \"%s\" \"%s\"' % (orig_name, full_name), shell=True)\n",
                        "lineNumber": 285,
                        "lineChange": "removed"
                      },
                      {
                        "line": "shutil.copyfile(orig_name, full_name)\n",
                        "lineNumber": 303,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/esozh/eso_zh_ui/commit/7ef4d63f4c7c2e0275daf08862f615dcc6cf69f5?diff=split#diff-483aa1e8daa36090ed6724943f7abfef3f885823db8620ee30cc5ead97b91053L-1",
                    "lines": [
                      {
                        "line": "os.system('mv %s %s' % (filename, new_name))\n",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "shutil.move(filename, new_name)\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jjgod/opf-cc/commit/d03202eab8278189bc3d9ebd6ff353772a72189d?diff=split#diff-fd2c598923afdaa788e7469b2866ea4d019adcb333e33494e563810508d06700L-1",
                    "lines": [
                      {
                        "line": "cmd = \"rm -rf '%s'\" % input_path\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "os.system(cmd)\n",
                        "lineNumber": 144,
                        "lineChange": "removed"
                      },
                      {
                        "line": "shutil.rmtree(input_path)\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 81,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "python/SSLVerificationBypass",
              "name": "SSLVerificationBypass",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n## Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "SSLVerificationBypass",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/mytardis/mytardis/commit/209039d112fb0e25d137509ac5453e0d530e5f20?diff=split#diff-5e68ab655e8a14d56623e5552e6fb906dc4e7ba7883e793e7c88ade7de1c2c75L-1",
                    "lines": [
                      {
                        "line": "r = requests.post(\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    url,\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    headers=headers,\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    data=json.dumps(payload),\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    verify=False)\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    data=json.dumps(payload))\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ethz-asl/linter/commit/63c527c47d08cdec037f5522069ca47100ac61be?diff=split#diff-5d93e8f999bf0bb7c7166531babb2e124bd2fab99e69ac9ca7a60d74eda5ecadL-1",
                    "lines": [
                      {
                        "line": "request = requests.get(url, verify=False, stream=True)\n",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "request = requests.get(url, verify=True, stream=True)\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jonluca/Anubis/commit/2eb838e311a33f032732a00e88c64082892bc56c?diff=split#diff-bbb95583df3e08592caec03b34536b3884af05bf15c379a2d0deda1cac9cfb6dL-1",
                    "lines": [
                      {
                        "line": "res = requests.get(\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "  'https://www.virustotal.com/en/domain/' + target + '/information/',\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "  headers=headers, verify=False)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  headers=headers)\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 74,
                "cwe": [
                  "CWE-295"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/InsecureTmpFile",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Use of tempfile.mktemp is deprecated and poses a security risk",
            "markdown": "Use of {0} is deprecated and poses a security risk",
            "arguments": [
              "[tempfile.mktemp](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mktemp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d98354f0ab14d32508bb54ed1255075075cb72e8fc0dcc91b6e3dfeabfea5129",
            "1": "b9573275.26ff433e.97cdec13.e6aa8a79.ac563c4e.ba14daf2.081ac3f4.bbef3508.b9573275.26ff433e.97cdec13.e6aa8a79.ac563c4e.ba14daf2.081ac3f4.bbef3508"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/mktemp.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 1,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureTmpFile",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Use of tempfile.mktemp is deprecated and poses a security risk",
            "markdown": "Use of {0} is deprecated and poses a security risk",
            "arguments": [
              "[tempfile.mktemp](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/mktemp.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57064889c88e98ae2b8b0841fa1c1953a901b5c305ff6f0804f3fdff988d7510",
            "1": "b9573275.bfe3b513.3c3a65ff.139c59a8.ac563c4e.ba14daf2.b98ff73c.bbef3508.b9573275.bfe3b513.3c3a65ff.139c59a8.ac563c4e.ba14daf2.b98ff73c.bbef3508"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/mktemp.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 1,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/paramiko~accept~all",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Blindly accepting all SSH keys with paramiko.client.AutoAddPolicy policy might result with a MITM attack, replace this with either 'WarningPolicy' or 'RejectPolicy'",
            "markdown": "Blindly accepting all SSH keys with {0} policy might result with a MITM attack, replace this with either 'WarningPolicy' or 'RejectPolicy'",
            "arguments": [
              "[paramiko.client.AutoAddPolicy](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6,
                  "startColumn": 40,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "40a7b7aa98b466b3be7fb2ed55e0ea811520e1738f273d634f8263156308f1d4",
            "1": "61d44453.4d4abf70.f69bcf5a.139c59a8.135a837d.a1632d4f.7da6a77b.742d9b21.7ebae0d0.4d4abf70.34df308d.0238a4e4.135a837d.ba14daf2.7da6a77b.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/paramiko~accept~all",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Blindly accepting all SSH keys with paramiko.client.AutoAddPolicy policy might result with a MITM attack, replace this with either 'WarningPolicy' or 'RejectPolicy'",
            "markdown": "Blindly accepting all SSH keys with {0} policy might result with a MITM attack, replace this with either 'WarningPolicy' or 'RejectPolicy'",
            "arguments": [
              "[paramiko.client.AutoAddPolicy](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 40,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "84e6b98c177e5514d957fa9afba7d725dc1053bd7051efdaaa55770cd02a6a4f",
            "1": "61d44453.4d4abf70.f69bcf5a.139c59a8.135a837d.ba14daf2.7da6a77b.742d9b21.7ebae0d0.4d4abf70.f69bcf5a.93af1246.135a837d.ba14daf2.7da6a77b.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 202,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TLS",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Do not use old versions of TLS (ssl.PROTOCOL_TLSv1 used in ssl.wrap_socket).",
            "markdown": "Do not use old versions of TLS ({0} used in {1}).",
            "arguments": [
              "[ssl.PROTOCOL_TLSv1](0)",
              "[ssl.wrap_socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e5e8e2ce13f6f56e6a9467254bb83b122321cda0678b79dbef77bb2da8281484",
            "1": "53204e57.fb7d73ec.03d23db9.139c59a8.5889c0fd.a1632d4f.25ca586c.742d9b21.53204e57.2dc773d6.995a076f.139c59a8.5889c0fd.ba14daf2.081ac3f4.988e21e1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 29,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TLS",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Do not use old versions of TLS (ssl.PROTOCOL_TLSv1_1 used in ssl.wrap_socket).",
            "markdown": "Do not use old versions of TLS ({0} used in {1}).",
            "arguments": [
              "[ssl.PROTOCOL_TLSv1_1](0)",
              "[ssl.wrap_socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dfc4dad1b5242c423c61b9efea4a35df9c58bc248b923fbe111d6af3eae9fc94",
            "1": "53204e57.fb7d73ec.03d23db9.139c59a8.5889c0fd.a1632d4f.897e9b0f.742d9b21.53204e57.fb7d73ec.03d23db9.bc45319f.5889c0fd.ba14daf2.897e9b0f.edf3bee2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 29,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TooSmallRsaKeySizeUsed",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Key size of 1024 bits used in key_size is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[key_size](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 26,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a722b7d0fedcb51face71e725f748781171a711c3ca7ca7e7eb18056a6279fe7",
            "1": "5e906c3d.77de6050.0a370b96.139c59a8.d3062cf8.d50b0743.47e4b281.443a1ebc.2d06e3d6.1a384b99.854cf667.644d9ef8.9de5013a.d50b0743.47e4b281.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/weak_cryptographic_key_sizes.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/weak_cryptographic_key_sizes.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TooSmallRsaKeySizeUsed",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Key size of 512 bits used in cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[512](0)",
              "[cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/weak_cryptographic_key_sizes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 1,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86fc9b665f2233b38f9c6b91e5074abaf92a0dfe09d97acfc6b757f3afa3105e",
            "1": "51b140d9.e21186c2.49bfb21d.139c59a8.6b43835e.ba14daf2.081ac3f4.096f9ca3.51b140d9.487a9e5e.65d69a9e.644d9ef8.13ebb12f.ba14daf2.b83e124a.096f9ca3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/weak_cryptographic_key_sizes.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 26,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/weak_cryptographic_key_sizes.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 1,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/HardcodedKey",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "A hardcoded bytes value is used as a cipher key in cryptography.hazmat.primitives.ciphers.algorithms.Blowfish. Generate the value with a cryptographically strong random number generator instead.",
            "markdown": "A hardcoded {0} is used as a cipher key in {1}. Generate the value with a cryptographically strong random number generator instead.",
            "arguments": [
              "[bytes value](0)",
              "[cryptography.hazmat.primitives.ciphers.algorithms.Blowfish](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 7,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78ee53bab9279a7229216a8cd3f85bb08c94902268dfb37097c44fac2bcb8bc2",
            "1": "3783e1cb.e2f3e72f.85ec23ad.98569367.30c69829.ba14daf2.081ac3f4.742d9b21.a9825353.c2aa53a4.85ec23ad.9fc02dae.30c69829.7e8c1782.a43f076b.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 7,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 17,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/no~hostname~verification",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Using context that has been passed from ssl._create_unverified_context will result with no hostname verification.",
            "markdown": "Using context that has been passed from {0} will result with no hostname verification.",
            "arguments": [
              "[ssl._create_unverified_context](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/unverified_context.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 11,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3df0672f83c8f88a2652647b7d5a8b5521981c2fa13e4d067e0cd50431cbb531",
            "1": "eb9ba6dc.ae949b01.79e62dc9.139c59a8.a62d072b.be3df3bc.25ca586c.742d9b21.eb9ba6dc.ae949b01.79e62dc9.139c59a8.a62d072b.be3df3bc.25ca586c.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/unverified_context.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 11,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 151,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TarSlip",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Calling extractall to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "markdown": "Calling {0} to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "arguments": [
              "[extractall](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 5,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1664342002cf0b767811b85ea1b02475042fbe822b9fdc411953ae8b83181c3f",
            "1": "6f52b793.755ecede.6da5baaf.8a4e3f10.64ffc8ed.ba14daf2.081ac3f4.a9cc5dba.a0ac1176.755ecede.6da5baaf.8a4e3f10.145e7f2f.ba14daf2.292a8005.a9cc5dba"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TarSlip",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Calling extractall to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "markdown": "Calling {0} to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "arguments": [
              "[extractall](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 5,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a4d20069f29281abb78fd6e507fe35b5518ab5afc18febd672292cb2938d806",
            "1": "0e8da04b.755ecede.0752bc1c.8a4e3f10.64ffc8ed.ba14daf2.081ac3f4.fa07e0a8.0e8da04b.755ecede.0752bc1c.8a4e3f10.145e7f2f.ba14daf2.292a8005.fa07e0a8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/TarSlip",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Calling extractall to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "markdown": "Calling {0} to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
            "arguments": [
              "[extractall](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/tarfile_extractall.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 5,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eace988b175956dea30ec6201ad873f455b55775b9d5f7e85d760cdfa949dbf3",
            "1": "0e8da04b.755ecede.6da5baaf.8a4e3f10.64ffc8ed.ba14daf2.081ac3f4.31200d37.0e8da04b.755ecede.6da5baaf.8a4e3f10.145e7f2f.ba14daf2.292a8005.31200d37"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/tarfile_extractall.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.dom.pulldom.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.pulldom.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_pulldom.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3,
                  "startColumn": 5,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3f0aff6c622a36032a77c1426d39a731d1f3e44282f53e5112c32c3f92ae6911",
            "1": "8fdd35e7.f043c911.79e62dc9.48bcf934.51ad391a.5d2fb2c6.586ae462.742d9b21.8fdd35e7.f043c911.79e62dc9.48bcf934.51ad391a.5d2fb2c6.586ae462.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_pulldom.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.dom.pulldom.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.pulldom.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_pulldom.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83b412e6b0a5f560d5ca40062d80d6768a2bafe48e037e35b32b0f505adff05d",
            "1": "8fdd35e7.f043c911.77bb4f3d.98569367.51ad391a.5d2fb2c6.2d4efbdc.a17ee3af.8fdd35e7.f043c911.77bb4f3d.98569367.51ad391a.5d2fb2c6.2d4efbdc.a17ee3af"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_pulldom.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/new_candidates-some.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 5,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ef0567338d81098d257a31085c61a061ea3971d0cb6a97bf9d4185c097456a6",
            "1": "92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb.92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/new_candidates-some.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/new_candidates-all.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 5,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef09faaf29f6349bf34c08a3775007bbe6493b9d772132455fce5fa75d1d7961",
            "1": "92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb.92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/new_candidates-all.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/new_candidates-all.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 5,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b6314cd13710434bbfac4f40c19d51dff12bdec935c93868d756c0c69de6258",
            "1": "92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb.92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/new_candidates-all.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/new_candidates-nosec.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 5,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4c1be41424ee5f0efaae83398084cf2f5a3fa3da1d52f66f75e38ed9e28ea274",
            "1": "92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb.92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.7d4589a2.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/new_candidates-nosec.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_sax.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "startColumn": 5,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b66df48e610b4cfcadec31dcf77630914d2bd29b547a7fb103d4c2f6df2a67d8",
            "1": "92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.fd2705af.62ccb8fb.92ec80ba.c9ddc28c.aed90495.139c59a8.e2aa5f2a.57d888ee.fd2705af.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_sax.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.make_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.make_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_sax.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 5,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5608f641b41f675e59268f604521c835a1110defa6c191185c2eefc50a6a1480",
            "1": "92ec80ba.c9ddc28c.aed90495.139c59a8.cc857d4e.57d888ee.fdf9b038.ebed174f.92ec80ba.c9ddc28c.aed90495.139c59a8.cc857d4e.57d888ee.fdf9b038.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_sax.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 5,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.ElementTree.fromstring is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.fromstring](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 8,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad01c34c144f0182a8188c150157044038656247b3b6d3af3ed33ae5c16bba27",
            "1": "6c09f6bd.d8435ddf.79e62dc9.25853107.424999a1.ba14daf2.f8c3f5ac.46073ae2.6c09f6bd.d8435ddf.79e62dc9.25853107.424999a1.ba14daf2.f8c3f5ac.46073ae2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_elementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 8,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.ElementTree.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7437726258ccc0860ef649c1ecc42b7f908f22fc5276308aaed541a917edbe03",
            "1": "10c9fd8b.54ee381e.3c3a65ff.139c59a8.cc857d4e.a1632d4f.25ca586c.46073ae2.10c9fd8b.54ee381e.3c3a65ff.139c59a8.cc857d4e.a1632d4f.25ca586c.46073ae2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_elementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.ElementTree.iterparse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.iterparse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b3b530d24d0e726fb01d72449f8ae96fce68a2b37f8f51e6af386580a719ea93",
            "1": "15f8f49d.54ee381e.e3e3b3b6.139c59a8.cc857d4e.a1632d4f.34ed705a.46073ae2.15f8f49d.54ee381e.e3e3b3b6.139c59a8.cc857d4e.a1632d4f.34ed705a.46073ae2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_elementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.ElementTree.XMLParser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.ElementTree.XMLParser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_elementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 5,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2f0765a84446fed65b97afefdbe096d97d3d2c1ef62f559bf838988e1e823604",
            "1": "223e749a.f26a7d56.79e62dc9.139c59a8.3b615ee8.5d2fb2c6.25ca586c.46073ae2.223e749a.f26a7d56.79e62dc9.139c59a8.3b615ee8.5d2fb2c6.25ca586c.46073ae2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_elementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 5,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.cElementTree.fromstring is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.cElementTree.fromstring](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 8,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5865019475c773a92445104e25d04899b42994b1834b981f9b72dfc1a52f0152",
            "1": "6c09f6bd.d8435ddf.79e62dc9.25853107.424999a1.ba14daf2.f8c3f5ac.760261bd.6c09f6bd.d8435ddf.79e62dc9.25853107.424999a1.ba14daf2.f8c3f5ac.760261bd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_celementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 8,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.cElementTree.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.cElementTree.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "29643ae4ae3497f91021e14bc85b06f1dcda8a03034cfa7c79f56a1101010231",
            "1": "18a6e90d.54ee381e.3c3a65ff.139c59a8.cc857d4e.a1632d4f.25ca586c.eca9a324.18a6e90d.54ee381e.3c3a65ff.139c59a8.cc857d4e.a1632d4f.25ca586c.eca9a324"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_celementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.cElementTree.iterparse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.cElementTree.iterparse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83604be3305677e1352dfdc65cbe8116df49d9f19c31fa69d2260aa29d55d860",
            "1": "37f84eb0.54ee381e.e3e3b3b6.139c59a8.cc857d4e.a1632d4f.20c08315.46073ae2.37f84eb0.54ee381e.e3e3b3b6.139c59a8.cc857d4e.a1632d4f.20c08315.46073ae2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_celementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.etree.cElementTree.XMLParser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.etree.cElementTree.XMLParser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_etree_celementtree.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 5,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78a7c9c79f812a85b4b833102736c58d5d3f53ad252b3e93a159564705757ae3",
            "1": "d77d68bf.f26a7d56.79e62dc9.139c59a8.bf9132cc.5d2fb2c6.25ca586c.46073ae2.d77d68bf.f26a7d56.79e62dc9.139c59a8.bf9132cc.5d2fb2c6.25ca586c.46073ae2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_etree_celementtree.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 5,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.expatreader.create_parser is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.expatreader.create_parser](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_expatreader.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 5,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e1b0fd0ae900b599c61644caf74d59a16a62e352eda754b87ec0289c9a0ef77e",
            "1": "6b04e873.945ca1e7.79e62dc9.139c59a8.7fe11af9.a1632d4f.402d019a.273cb3f1.6b04e873.945ca1e7.79e62dc9.139c59a8.7fe11af9.a1632d4f.402d019a.273cb3f1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_expatreader.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 525,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.dom.minidom.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_minidom.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3,
                  "startColumn": 5,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4423bb4bf97e900c061daf06853a195660217fe136c7e1647182a96e2d090de0",
            "1": "306e20b5.f26a7d56.79e62dc9.48bcf934.4bac399f.5d2fb2c6.586ae462.742d9b21.306e20b5.f26a7d56.79e62dc9.48bcf934.4bac399f.5d2fb2c6.586ae462.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_minidom.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 5,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.dom.minidom.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_minidom.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd9ce040be5eb380e5df0168adf7aee10cb77cd91fe6396c1f0bc0e7a2f32893",
            "1": "428c4635.f26a7d56.77bb4f3d.98569367.4bac399f.5d2fb2c6.2d4efbdc.1d7ae12c.428c4635.f26a7d56.77bb4f3d.98569367.4bac399f.5d2fb2c6.2d4efbdc.1d7ae12c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_minidom.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_sax.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 5,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "82ed7c449e0a1281436741f1e0ecc2968a2c09677610e01fa724ae92906e8984",
            "1": "b2dd68c0.577bab1d.79e62dc9.25853107.b81a1377.ba14daf2.fd2705af.62ccb8fb.b2dd68c0.577bab1d.79e62dc9.25853107.b81a1377.ba14daf2.fd2705af.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_sax.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_sax.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 5,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "06918a41437e6c52596886bb0d5f25e98f3ac55374a02bac1b28f7ce6041acc5",
            "1": "b2dd68c0.577bab1d.79e62dc9.833655f7.b81a1377.ba14daf2.fdf9b038.4201a018.b2dd68c0.577bab1d.79e62dc9.833655f7.b81a1377.ba14daf2.fdf9b038.4201a018"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_sax.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 5,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_sax.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 5,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc7283ca59c4c8dae96b61fca2537fc719249a2333b68c7cac26d9df84866323",
            "1": "b2dd68c0.577bab1d.79e62dc9.6a85de8d.d9eff02e.ba14daf2.fd2705af.62ccb8fb.b2dd68c0.577bab1d.79e62dc9.6a85de8d.d9eff02e.ba14daf2.fd2705af.62ccb8fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_sax.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 5,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.sax.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.sax.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_sax.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 5,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6323686ea74c115612f3864a31851112cd1375382f84da4dcd4f068b7d1d1013",
            "1": "79375598.d64320ed.79e62dc9.6a85de8d.d9eff02e.2e607898.fdf9b038.ebed174f.79375598.d64320ed.79e62dc9.6a85de8d.d9eff02e.2e607898.fdf9b038.ebed174f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_sax.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.dom.expatbuilder.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.expatbuilder.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_expatbuilder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6b581415eb0513481b7c378596fdae84709bd549a873ff1bb2c59e1338c1d542",
            "1": "10c9fd8b.54ee381e.3c3a65ff.139c59a8.cc857d4e.360ada24.402d019a.742d9b21.10c9fd8b.54ee381e.3c3a65ff.139c59a8.cc857d4e.360ada24.402d019a.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_expatbuilder.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureXmlParser",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "xml.dom.expatbuilder.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.expatbuilder.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/xml_expatbuilder.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b1eacd36f1629e950a21e93f33a74be81f1b9c8ace3d9e239978713aedb4b4c",
            "1": "6c09f6bd.d83b3cf4.79e62dc9.25853107.ba730654.ba14daf2.cb2a023f.e1ae838c.6c09f6bd.d83b3cf4.79e62dc9.25853107.ba730654.ba14daf2.cb2a023f.e1ae838c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/xml_expatbuilder.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 575,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "md5 used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[md5](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80a6178e4240a80a30c591eee6ecfe9591bc84e919c25838be6fc94337774e27",
            "1": "c86943d9.76e86a36.c2b6f7fb.aeb8e740.e26e24d8.a1632d4f.65068a99.742d9b21.c86943d9.76e86a36.c2b6f7fb.aeb8e740.e26e24d8.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "md4 used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[md4](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "48cdc15edac644e0fc77cc30c3c1de53ade841c41bec4fa03497dc3ccd852f6c",
            "1": "1a1f61bb.76e86a36.3c3a65ff.aeb8e740.f03125b8.a1632d4f.65068a99.742d9b21.1a1f61bb.76e86a36.3c3a65ff.aeb8e740.f03125b8.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "MD4 used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[MD4](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57c6554ab0d7c654b3966b512c0b184d443dc6e0a3c9e8dc620e5482692faa32",
            "1": "d62ed47c.76e86a36.3c3a65ff.aeb8e740.4c47be72.a1632d4f.65068a99.742d9b21.d62ed47c.76e86a36.3c3a65ff.aeb8e740.4c47be72.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "sha1 used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[sha1](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "95c647b87ecb845ad05d109e46a677411151e1d5ca9ab298d3601a942109f4ea",
            "1": "fec97823.76e86a36.3c3a65ff.aeb8e740.4c48745c.a1632d4f.65068a99.742d9b21.fec97823.76e86a36.3c3a65ff.aeb8e740.4c48745c.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "sha1 used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[sha1](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0037f0fca66e7cece1f20e03a840d2446a04a70905538bea435a1bf9990dc451",
            "1": "d62ed47c.76e86a36.3c3a65ff.aeb8e740.4c48745c.a1632d4f.65068a99.742d9b21.d62ed47c.76e86a36.3c3a65ff.aeb8e740.4c48745c.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "sha1 used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[sha1](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "14194de6eb7670c25444c73bf774bf2141d770a32fc71c47625b31abbf535a54",
            "1": "3ed4c953.76e86a36.3c3a65ff.aeb8e740.4c48745c.ac6a7c32.65068a99.742d9b21.3ed4c953.76e86a36.3c3a65ff.aeb8e740.4c48745c.ac6a7c32.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "sha used in hashlib.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} used in {1} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[sha](0)",
              "[hashlib.new](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hashlib_new_insecure_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa68934e7a4bb67d7c8e5631f6053db0b8e278913931de20754fc490eb5fd0af",
            "1": "d62ed47c.76e86a36.3c3a65ff.aeb8e740.4c47be72.a1632d4f.65068a99.742d9b21.d62ed47c.76e86a36.3c3a65ff.aeb8e740.4c47be72.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hashlib_new_insecure_functions.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 6
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e14047a20feeeef6ba31df463619ba0c3161a9b9e9be42572765bf5f8a3bec34",
            "1": "3f282bfc.540dc5bf.f04405c4.139c59a8.cc857d4e.a1632d4f.25ca586c.f423300a.3f282bfc.540dc5bf.f04405c4.139c59a8.cc857d4e.a1632d4f.25ca586c.f423300a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 1,
                            "endColumn": 6
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 1,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b8ba6f89f5782d7b2c83cc0dc154bf49e4ca6265dcf9107b54d09be71b3870c7",
            "1": "220bd578.d3c76680.f04405c4.139c59a8.cc857d4e.a1632d4f.25ca586c.f423300a.220bd578.d3c76680.f04405c4.139c59a8.cc857d4e.a1632d4f.25ca586c.f423300a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 1,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d66bcc7ca4384518307bd5e97c54a0f5db568fcfa0716192762eea6fd623dd3",
            "1": "b447f35d.2dd6d7a6.3c3a65ff.139c59a8.bab9de6f.ba14daf2.339eb8dd.f423300a.b447f35d.2dd6d7a6.f04405c4.139c59a8.bab9de6f.ba14daf2.fe378a00.f423300a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/imports-aliases.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9b84c10ab2068d834e89bc38733e016505f22d88d8f7f836ef99925243b24208",
            "1": "046642b1.d39eb2fa.f04405c4.139c59a8.3c85cd3e.a1632d4f.25ca586c.f423300a.046642b1.d39eb2fa.f04405c4.139c59a8.3c85cd3e.a1632d4f.25ca586c.f423300a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/imports-aliases.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f5ed271195deb7b5444675181bb5b99cf902d450edea89760b18607e13a589a4",
            "1": "8b4fea28.830b6bcf.f04405c4.139c59a8.231ad846.a1632d4f.65068a99.742d9b21.8b4fea28.830b6bcf.f04405c4.139c59a8.231ad846.a1632d4f.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a6461077dc7269f109e57ff9230ff7f46eaccb7519f0605d8ed88689444fd580",
            "1": "a2db85fa.2dd6d7a6.3c3a65ff.139c59a8.231ad846.ba14daf2.081ac3f4.742d9b21.a2db85fa.2dd6d7a6.f04405c4.139c59a8.231ad846.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "02c6d4af08872e84dc18c24680f749765397f26cbd6775bbfbc6e58611b40cb3",
            "1": "560c3176.4621de1a.f04405c4.139c59a8.1a0abf6d.ba14daf2.65068a99.742d9b21.560c3176.4621de1a.f04405c4.139c59a8.1a0abf6d.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.md5 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.md5](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 7,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "225b3e8deeb0d186a8fd3cfee457a0c4e9e8d5f9f985ae2e445450c25c30efa5",
            "1": "560c3176.04ad2656.f04405c4.139c59a8.cc857d4e.ba14daf2.65068a99.742d9b21.560c3176.04ad2656.f04405c4.139c59a8.cc857d4e.ba14daf2.65068a99.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Crypto.Hash.SHA.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[Crypto.Hash.SHA.new](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "startColumn": 11,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0edb18b3f8ea6a082469f5f9132789f2c32ba7b0d4fc1b6f54e453066b8c1748",
            "1": "3620d9bb.6987f7a0.9ff0d179.139c59a8.056de048.ba14daf2.8658ac02.8794408a.3620d9bb.b55232f6.9ff0d179.aeb8e740.30c69829.ba14daf2.8658ac02.8794408a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 29,
                            "endLine": 29,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Crypto.Hash.SHA.new is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[Crypto.Hash.SHA.new](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 1,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7651cb888c1ea3afc613a5c3626691724d3313b8df94b5deb49372510e6b4c36",
            "1": "6c7104af.07540d74.3c3a65ff.aeb8e740.231ad846.a1632d4f.3823e999.742d9b21.6c7104af.07540d74.3c3a65ff.aeb8e740.231ad846.a1632d4f.3823e999.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 1,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf4ea3fc23411644376046d15a737277f08c48bbd30ec5a6b20b20c59ec0670b",
            "1": "49be4e19.59b34bce.3c3a65ff.139c59a8.231ad846.a1632d4f.4836399a.742d9b21.49be4e19.59b34bce.3c3a65ff.139c59a8.231ad846.a1632d4f.4836399a.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureHash",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "hashlib.sha1 is insecure. Consider changing it to a secure hashing algorithm.",
            "markdown": "{0} is insecure. Consider changing it to a secure hashing algorithm.",
            "arguments": [
              "[hashlib.sha1](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/crypto-md5.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "19486e1e801922b7a7ba7353f070ebcb53d4bf3d85df618c9ca98b4fae311287",
            "1": "3ed4c953.59b34bce.3c3a65ff.139c59a8.231ad846.ac6a7c32.cbfa2b68.742d9b21.3ed4c953.59b34bce.3c3a65ff.139c59a8.231ad846.ac6a7c32.cbfa2b68.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/crypto-md5.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "jinja2.Environment is called with autoescape set to False. This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with autoescape set to False. This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Environment](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 15,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0fe6180c397a9a38e5abffc1e2aadfd93eb01c8f441aa6dbb499441ad1bbeaa3",
            "1": "1ba848e8.91acfc9b.693f3001.139c59a8.747347ea.a1632d4f.cbfa2b68.cdf099c6.1ba848e8.91acfc9b.693f3001.139c59a8.747347ea.ba14daf2.cbfa2b68.cdf099c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/jinja2_templating.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "jinja2.Environment is called with autoescape set to False. This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with autoescape set to False. This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Environment](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cf5a4365a116b7528b42fd155208a286d6cc3e14c01952024005941b3a23197",
            "1": "1ba848e8.1380ee28.3c3a65ff.4c71cda2.747347ea.a1632d4f.cbfa2b68.cdf099c6.1ba848e8.1380ee28.3c3a65ff.4c71cda2.747347ea.ba14daf2.cbfa2b68.cdf099c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/jinja2_templating.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/Jinja2AutoEscapeFalse",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "jinja2.Environment is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "markdown": "{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.",
            "arguments": [
              "[jinja2.Environment](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/jinja2_templating.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eab800b42df90bb199573bcc89daca76e4262982050d3aa72b69763c61905910",
            "1": "1ba848e8.1380ee28.3c3a65ff.4c71cda2.747347ea.a1632d4f.25ca586c.742d9b21.e06468b8.1380ee28.3c3a65ff.4c71cda2.747347ea.73cfdf26.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/jinja2_templating.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSHHostKeyVerificationDisabled",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "The paramiko.client.AutoAddPolicy policy used in set_missing_host_key_policy will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "markdown": "The {0} policy used in {1} will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[paramiko.client.AutoAddPolicy](0)",
              "[set_missing_host_key_policy](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a81521697cd6d8f6739947782d36a83733136ce0c6da1aa09ea404a2f872a9c",
            "1": "61d44453.4d4abf70.f69bcf5a.139c59a8.135a837d.ba14daf2.7da6a77b.742d9b21.61d44453.4d4abf70.f69bcf5a.139c59a8.135a837d.ba14daf2.7da6a77b.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 1,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSHHostKeyVerificationDisabled",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "The paramiko.AutoAddPolicy policy used in set_missing_host_key_policy will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "markdown": "The {0} policy used in {1} will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[paramiko.AutoAddPolicy](0)",
              "[set_missing_host_key_policy](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "72a78c348414b3c6e23548f1739b8758d4a7cc15d4ef900748922bee68bb4656",
            "1": "b685d531.2024ccf4.3c3a65ff.139c59a8.135a837d.ba14daf2.081ac3f4.742d9b21.d2f85842.2024ccf4.3c3a65ff.139c59a8.135a837d.ba14daf2.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSHHostKeyVerificationDisabled",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "The paramiko.WarningPolicy policy used in set_missing_host_key_policy will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "markdown": "The {0} policy used in {1} will not reject unknown host keys. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[paramiko.WarningPolicy](0)",
              "[set_missing_host_key_policy](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/no_host_key_verification.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "108bfda99f5efe75c3e2597ae1ec2e07e11cba4110ac87bce355e0fd23c12fd5",
            "1": "0c07c7a0.2024ccf4.3c3a65ff.139c59a8.135a837d.ba14daf2.081ac3f4.742d9b21.0c07c7a0.2024ccf4.3c3a65ff.139c59a8.135a837d.ba14daf2.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 40,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/no_host_key_verification.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 1,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 553,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.walk, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[os.walk](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bandit/cli/main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 39,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ec92ef2defce9f152eecc1bdea65a985272e586fc4be51331e65da34ab8ca344",
            "1": "5e2187a4.d3fa0bdc.2683ade8.139c59a8.075a0498.ba14daf2.081ac3f4.6aac30d8.61137a49.5a149377.83b8ec51.96450536.cebd729b.48e1de78.7e8da20f.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 427,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 427,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 431,
                            "endLine": 431,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 442,
                            "endLine": 442,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 56,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 56,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 47,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 39,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.walk, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33)",
              "[os.walk](34)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bandit/cli/main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 664,
                  "endLine": 664,
                  "startColumn": 5,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b9cb394c2c2108c77bc3afddfa85093a031c15f709a8eb21295678fbfb8a82d",
            "1": "61137a49.e3d9b656.ec35cf50.6ba51aae.cebd729b.ba14daf2.7e8da20f.be0adc0c.61137a49.3a992a3e.96d442e8.76c60cbc.cebd729b.ae429a6c.f6dc7859.be0adc0c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 427,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 427,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 431,
                            "endLine": 431,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 442,
                            "endLine": 442,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 56,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 52,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 602,
                            "endLine": 602,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 615,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 615,
                            "startColumn": 54,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 616,
                            "endLine": 616,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 60,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 619,
                            "endLine": 619,
                            "startColumn": 60,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 631,
                            "endLine": 631,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 629,
                            "endLine": 629,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 636,
                            "endLine": 636,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 652,
                            "endLine": 652,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 664,
                            "endLine": 664,
                            "startColumn": 26,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 664,
                            "endLine": 664,
                            "startColumn": 26,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 30,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 30,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 35,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/core/manager.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)",
              "[open](26)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bandit/cli/main.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 638,
                  "endLine": 638,
                  "startColumn": 18,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3688c2d7dba49bccb008461ffe2cebb398515319fa574ddc8ee87e7ece0e6891",
            "1": "f5e089af.90033edf.187bf175.139c59a8.f3eda546.ba14daf2.7e8da20f.b7d480de.f5e089af.90033edf.187bf175.03d71cbf.f3eda546.ae429a6c.7e8da20f.b7d480de"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 425,
                            "endLine": 425,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 427,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 427,
                            "endLine": 427,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 431,
                            "endLine": 431,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 442,
                            "endLine": 442,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 454,
                            "endLine": 454,
                            "startColumn": 56,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 52,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 602,
                            "endLine": 602,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 611,
                            "endLine": 611,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 615,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 615,
                            "startColumn": 54,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 616,
                            "endLine": 616,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 60,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 619,
                            "endLine": 619,
                            "startColumn": 60,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 631,
                            "endLine": 631,
                            "startColumn": 17,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 633,
                            "endLine": 633,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 628,
                            "endLine": 628,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 629,
                            "endLine": 629,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 636,
                            "endLine": 636,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 638,
                            "endLine": 638,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 638,
                            "endLine": 638,
                            "startColumn": 23,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/main.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 638,
                            "endLine": 638,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[open](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bandit/cli/config_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 155,
                  "startColumn": 18,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "713f64f3de76643568e2a0ec803f131d7e54791abbe107cdef4bffe22286caaa",
            "1": "2e8ddaeb.3b267a04.187bf175.139c59a8.f3eda546.ba14daf2.4785c07e.a4830b9a.2e8ddaeb.c1a398e6.094e9cf7.9cd2dfe0.4608c58f.0ae9797a.f6dc7859.b68ca2bb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 12,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 37,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 142,
                            "endLine": 142,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 8,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 23,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/config_generator.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 504,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureFilePermissions",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The permission 7 is set on a file using os.chmod. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "markdown": "The permission {0} is set on a file using {1}. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "arguments": [
              "[7](0)",
              "[os.chmod](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/os-chmod.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a87e6cf37930f9c4312e8aca621a22de830b118a50d21548de14fe947a33a1b",
            "1": "0ab11ea8.1c6650e9.3c3a65ff.139c59a8.a2082bdd.a1632d4f.25ca586c.47faacc6.0ab11ea8.1c6650e9.3c3a65ff.139c59a8.a2082bdd.ba14daf2.081ac3f4.47faacc6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureFilePermissions",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The permission 511 is set on a file using os.chmod. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "markdown": "The permission {0} is set on a file using {1}. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "arguments": [
              "[511](0)",
              "[os.chmod](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/os-chmod.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83bb0f6cbadb2b91b21bfa7aa35bb2aafabaa4b279b000c9eb754d450bc636a5",
            "1": "0ab11ea8.1c6650e9.3c3a65ff.139c59a8.a2082bdd.a1632d4f.25ca586c.742d9b21.0ab11ea8.1c6650e9.3c3a65ff.139c59a8.a2082bdd.ba14daf2.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureFilePermissions",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The permission 511 is set on a file using os.chmod. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "markdown": "The permission {0} is set on a file using {1}. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "arguments": [
              "[511](0)",
              "[os.chmod](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/os-chmod.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "90eaa99cbaf0518f487234afd6773a5a9d740767d51f6bb1a900ead07006ca6d",
            "1": "7c9b0e0a.92149cfc.3c3a65ff.139c59a8.7a121c2e.a1632d4f.25ca586c.636bc44f.7c9b0e0a.92149cfc.3c3a65ff.139c59a8.7a121c2e.ba14daf2.081ac3f4.636bc44f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 23,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureFilePermissions",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The permission 511 is set on a file using os.chmod. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "markdown": "The permission {0} is set on a file using {1}. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "arguments": [
              "[511](0)",
              "[os.chmod](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/os-chmod.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "082ae500dec325ca3a7a85234881e66aaaf6ad28827e9a2ff46b903cce7b5f43",
            "1": "a7d0dc2f.1c6650e9.3c3a65ff.139c59a8.191cf165.a1632d4f.ed3f8005.742d9b21.a7d0dc2f.1c6650e9.3c3a65ff.139c59a8.191cf165.ba14daf2.ed3f8005.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureFilePermissions",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The permission 511 is set on a file using os.chmod. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "markdown": "The permission {0} is set on a file using {1}. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "arguments": [
              "[511](0)",
              "[os.chmod](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/os-chmod.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8499578ca8424acaf4855a2c9a6b0eff612c1fe86eff5a0bfac3d0f3404c9161",
            "1": "4fe0fda2.0afaa260.3c3a65ff.139c59a8.7a121c2e.a1632d4f.25ca586c.742d9b21.4fe0fda2.0afaa260.3c3a65ff.139c59a8.7a121c2e.ba14daf2.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureFilePermissions",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "The permission 511 is set on a file using os.chmod. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "markdown": "The permission {0} is set on a file using {1}. Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed leading to information exposure.",
            "arguments": [
              "[511](0)",
              "[os.chmod](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/os-chmod.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "startColumn": 1,
                  "endColumn": 9
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80d88dbc7eb7bf442a93d33129fae34fd699c60fd19cc703409c67c836d5c591",
            "1": "4fe0fda2.1c6650e9.5838b186.1efe772f.eae7448b.b61ac8fb.4ff9ad84.4adb0865.4fe0fda2.1c6650e9.5838b186.1efe772f.eae7448b.ba14daf2.4ff9ad84.4adb0865"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 19,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/os-chmod.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 1,
                            "endColumn": 9
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 406,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureCipher",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "The ARC4 cipher is insecure. Consider using AES instead.",
            "markdown": "The {0} cipher is insecure. Consider using AES instead.",
            "arguments": [
              "[ARC4](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "startColumn": 10,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e8bdc96feb2866a0bd0420a4a29d1dd44407cf6630336bb4592212e4fb52f177",
            "1": "8ef8a442.6c5006d0.9ff0d179.aeb8e740.30c110a6.7e8c1782.081ac3f4.742d9b21.8ef8a442.6c5006d0.9ff0d179.aeb8e740.30c110a6.7e8c1782.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 10,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureCipher",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "The ARC4 cipher is insecure. Consider using AES instead.",
            "markdown": "The {0} cipher is insecure. Consider using AES instead.",
            "arguments": [
              "[ARC4](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "585372e4b996b405a3b4e165decd42ce65f6835b16c60b1c9d17c9273306d6d3",
            "1": "a9825353.c2aa53a4.85ec23ad.9fc02dae.30c69829.7e8c1782.081ac3f4.742d9b21.a9825353.c2aa53a4.85ec23ad.9fc02dae.30c69829.7e8c1782.081ac3f4.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 17,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureCipher",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "The Blowfish cipher is insecure. Consider using AES instead.",
            "markdown": "The {0} cipher is insecure. Consider using AES instead.",
            "arguments": [
              "[Blowfish](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 10,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "93b3de1b0ed2d398d1f9a8d1a8204b32308265e88f86152ce814d62bf34ec1c0",
            "1": "3a6c4934.6987f7a0.85ec23ad.aeb8e740.30c69829.7e8c1782.081ac3f4.8794408a.3a6c4934.6987f7a0.85ec23ad.aeb8e740.30c69829.7e8c1782.081ac3f4.8794408a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 10,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureCipher",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "The Blowfish cipher is insecure. Consider using AES instead.",
            "markdown": "The {0} cipher is insecure. Consider using AES instead.",
            "arguments": [
              "[Blowfish](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 17,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25d55231f281d5ba3378a78d7ff21cba3e9fe8f8080a92bf449b9396ecd86c15",
            "1": "a9825353.2b90cdfb.85ec23ad.9fc02dae.30c69829.7e8c1782.a43f076b.742d9b21.a9825353.2b90cdfb.85ec23ad.9fc02dae.30c69829.7e8c1782.a43f076b.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 17,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/InsecureCipher",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "The DES cipher is insecure. Consider using AES instead.",
            "markdown": "The {0} cipher is insecure. Consider using AES instead.",
            "arguments": [
              "[DES](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ciphers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 10,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fae8feab1e103a44785d70e00e801468caadf4bde156533811f34e76e795b897",
            "1": "3783e1cb.40d22be2.85ec23ad.aeb8e740.30c69829.7e8c1782.3a4bf648.742d9b21.3783e1cb.40d22be2.85ec23ad.aeb8e740.30c69829.7e8c1782.3a4bf648.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ciphers.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 10,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 805,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/NoHardcodedPasswords",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} password used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/hardcoded-passwords.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 5,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "51619942064b114753faf989c5dd4d0e98d8a96144faea06125b44251a9e87bb",
            "1": "b37185f4.1f1bef32.08d0ebb3.98569367.ddb095de.a1632d4f.25ca586c.742d9b21.b37185f4.1f1bef32.08d0ebb3.98569367.ddb095de.a1632d4f.25ca586c.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 16,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/hardcoded-passwords.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/ssl~wrap_socket~without~protocol",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "Call to deprecated method ssl.wrap_socket does not specify a protocol, which may result in an insecure default being used",
            "markdown": "Call to deprecated method {0} does not specify a protocol, which may result in an insecure default being used",
            "arguments": [
              "[ssl.wrap_socket](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/ssl-insecure-version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6cec728cac20682d9b3ac8b1407778b3bcac5adf43914c16d97e54d9a4565cf4",
            "1": "09f46826.fb7d73ec.3c3a65ff.139c59a8.cc857d4e.a1632d4f.25ca586c.742d9b21.09f46826.fb7d73ec.3c3a65ff.139c59a8.cc857d4e.a1632d4f.25ca586c.742d9b21"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/ssl-insecure-version.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/BindToAllNetworkInterfaces",
          "ruleIndex": 16,
          "level": "warning",
          "message": {
            "text": "Using bind in bind makes it listen on all network interfaces, which may open the service to unintended traffic.",
            "markdown": "Using {0} in {1} makes it listen on all network interfaces, which may open the service to unintended traffic.",
            "arguments": [
              "[bind](0)",
              "[bind](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/binding.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "startColumn": 1,
                  "endColumn": 7
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fabf216fe0fbde409d03e748b26abc7167d397263974b7490073b52e0f765958",
            "1": "16691f08.e505eac4.79e62dc9.139c59a8.e737520c.bcaa763b.b2903af3.6aac30d8.16691f08.e505eac4.79e62dc9.139c59a8.e737520c.bcaa763b.081ac3f4.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/binding.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 1,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/binding.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4,
                            "endLine": 4,
                            "startColumn": 1,
                            "endColumn": 7
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/RunWithDebugTrue",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "Running the application in debug mode (debug flag is set to True in run) is a security risk if the application is accessible by untrusted parties.",
            "markdown": "Running the application in debug mode (debug flag is set to {0} in {1}) is a security risk if the application is accessible by untrusted parties.",
            "arguments": [
              "[True](0)",
              "[run](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/flask_debug.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 8
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0e4854f6963dc66c3332541cd97135e3a92e3d2e8f77afeeae938f5d90e924de",
            "1": "ad31a887.976f7a3f.671b1085.139c59a8.cc857d4e.a1632d4f.fa793294.742d9b21.b1a8a79f.976f7a3f.671b1085.08fb6340.828d6b14.7eee6d6e.fa793294.baf4e289"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/flask_debug.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 15,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/flask_debug.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 1,
                            "endColumn": 8
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18)",
              "[subprocess.check_output](19)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bandit/cli/baseline.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 26,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4c6bf6121627084313faa1c29b4ca28b017b017f9e8a2c1fb9bfbe9cea179ea2",
            "1": "e06468b8.2036f5f0.79e62dc9.139c59a8.2f3f80b7.ba14daf2.a2237efa.f46ed94e.de5f582a.14259c5a.75c093eb.76c60cbc.c8b7d5cc.73cfdf26.9626747d.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 15,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 1,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 25,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 25,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 17,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 89,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 95,
                            "startColumn": 17,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 95,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 22,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 43,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 30,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 13,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 50,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bandit/cli/baseline.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 26,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in requests.get. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[requests.get](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9364d0febd4233796215581501abb0ac5e68fcddf245c82d733cc1d9bfaccaac",
            "1": "101172a8.5ef5dd58.ef7ad415.27d2f85c.f6e8357d.a1632d4f.cc914b1e.773acf30.101172a8.277c621c.ef7ad415.27d2f85c.5ef953d3.ba14daf2.cc914b1e.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 47,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 54,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 5,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in requests.post. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[requests.post](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 1,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc90f5cc3a72757f098a9eef68033c030ff5eb66c3c6414d2992448ec5c86e9e",
            "1": "101172a8.b1ff0823.ef7ad415.3456c081.f6e8357d.a1632d4f.cbfa2b68.773acf30.101172a8.277c621c.ef7ad415.3456c081.5ef953d3.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 48,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 55,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 1,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in requests.put. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[requests.put](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9a86ba597c330caba8ed2e449ab22c5b11415a7558c2746d28664f654b895888",
            "1": "101172a8.5ef5dd58.ef7ad415.27d2f85c.f7842e09.a1632d4f.cbfa2b68.773acf30.101172a8.277c621c.ef7ad415.27d2f85c.f7842e09.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 47,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 54,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in requests.delete. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[requests.delete](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1fe080b5cc7b61f9d4d923b054578473e54f67e07ab3a35c3a78fd9caf45c365",
            "1": "101172a8.5ef5dd58.ef7ad415.27d2f85c.f6e8357d.a1632d4f.cbfa2b68.773acf30.101172a8.277c621c.ef7ad415.27d2f85c.5ef953d3.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 50,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 57,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 1,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in requests.patch. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[requests.patch](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "311825f0a3ec25289e56ebc7f0f9317b73da58bdeee5b19ce5b9da9c16679a7c",
            "1": "fa646265.5ef5dd58.ef7ad415.27d2f85c.21f8eaa6.a1632d4f.cbfa2b68.773acf30.fa646265.277c621c.ef7ad415.27d2f85c.21f8eaa6.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 49,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 56,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in requests.head. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[requests.head](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "startColumn": 1,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7d62974edfa577b14d584d5540678cb656a98760fa28d50bf59dd396086da6ad",
            "1": "101172a8.5ef5dd58.ef7ad415.2f70e912.f6e8357d.a1632d4f.cbfa2b68.773acf30.101172a8.277c621c.ef7ad415.2f70e912.5ef953d3.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 48,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 55,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 1,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.request. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.request](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ceb1d05edf959844c67815eac02f3a8bef051780468daad4e945dd251c22649c",
            "1": "747e3084.5ef5dd58.4300ee00.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.277c621c.4300ee00.139c59a8.5ef953d3.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 43,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 50,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 1,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.get. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.get](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a02272872602acde9f7ccf8c0fcf2343e781c642467eba146c6df7318f18de89",
            "1": "747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 39,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.options. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.options](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 1,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "69a9faa9e8382b3f17387d51f576dfd625fcced2b163a1b61cfb49608e526631",
            "1": "747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 36,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 43,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 1,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.head. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.head](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 1,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7a7b2415b9cad54085ba6b2564e0029168d986a6ecc6ba2cf3bf618c2f810f1",
            "1": "747e3084.f8cb6108.3c3a65ff.2f70e912.82685f48.a1632d4f.cbfa2b68.773acf30.747e3084.f8cb6108.3c3a65ff.2f70e912.82685f48.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 40,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 1,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.post. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.post](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 1,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "946e3c67364493bddcfc07b9b38bf0327a02b1d59bb414ed48085399118a6a0c",
            "1": "747e3084.b1ff0823.3c3a65ff.3c424a1d.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.b1ff0823.3c3a65ff.3c424a1d.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 40,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 1,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.put. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.put](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "39a6897f4833d53bb099018f967d40487f418996764e162326a7993e1686c575",
            "1": "747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 39,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.patch. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.patch](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 1,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4cb33ff54ee2c44099448b696a923177e4244388ef605baf526dffa7188b245f",
            "1": "747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 34,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 41,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 1,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.delete. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.delete](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dbd633f59c6afd9c56b76d246b7625f6925eb1d05a7542c95af25916c26fc65a",
            "1": "747e3084.5ef5dd58.2273c49f.139c59a8.0646c668.a1632d4f.a325c75e.773acf30.747e3084.5ef5dd58.2273c49f.139c59a8.0646c668.ba14daf2.a325c75e.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.stream. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.stream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f9bd45c1797208bad3171de139328ed9fefd642d9c5d17e148451d3c9c688c2f",
            "1": "747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.a1632d4f.228db9e8.773acf30.747e3084.5ef5dd58.3c3a65ff.139c59a8.0646c668.ba14daf2.228db9e8.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 35,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.Client. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.Client](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 1,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "526a46703650b1dd47bc79682e5cb8e3c06777dcb24fd20ade21e77a49e21142",
            "1": "103de1fc.cd29d0b7.3c3a65ff.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.103de1fc.cd29d0b7.3c3a65ff.139c59a8.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/SSLVerificationBypass",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Certificate verification is disabled by setting verify to False in httpx.AsyncClient. This may lead to Man-in-the-middle attacks.",
            "markdown": "Certificate verification is disabled by setting {0} to {1} in {2}. This may lead to Man-in-the-middle attacks.",
            "arguments": [
              "[verify](0)",
              "[False](1)",
              "[httpx.AsyncClient](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/requests-ssl-verify-disabled.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 1,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "41b627a59d822ddc16db1e1059e939f73ec33c5575593e9e2f1c0f84fb1c9ab1",
            "1": "747e3084.09255e10.3c3a65ff.139c59a8.0646c668.a1632d4f.cbfa2b68.773acf30.747e3084.09255e10.3c3a65ff.139c59a8.0646c668.ba14daf2.cbfa2b68.773acf30"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 19,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/requests-ssl-verify-disabled.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 1,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 817,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "Python",
            "files": 171,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "Python",
            "files": 3,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}
